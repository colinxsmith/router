/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x031110
#endif


#include <node.h>
//Older version of node.h does not include this
#include <node_version.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

#ifdef NODE_VERSION
#if NODE_VERSION_AT_LEAST(10, 12, 0)
#define SWIG_NODE_AT_LEAST_1012
#endif
#endif

//Necessary to check Node.js version because V8 API changes are backported in Node.js
#if (defined(NODE_VERSION) && !defined(SWIG_NODE_AT_LEAST_1012)) || \
    (!defined(NODE_VERSION) && (V8_MAJOR_VERSION-0) < 7)
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject()
#define SWIGV8_TO_STRING(handle) (handle)->ToString()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length()
#else
#define SWIGV8_TO_OBJECT(handle) (handle)->ToObject(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_TO_STRING(handle) (handle)->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocalChecked()
#define SWIGV8_NUMBER_VALUE(handle) (handle)->NumberValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_INTEGER_VALUE(handle) (handle)->IntegerValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_BOOLEAN_VALUE(handle) (handle)->BooleanValue(SWIGV8_CURRENT_CONTEXT()).ToChecked()
#define SWIGV8_WRITE_UTF8(handle, buffer, len) (handle)->WriteUtf8(v8::Isolate::GetCurrent(), buffer, len)
#define SWIGV8_UTF8_LENGTH(handle) (handle)->Utf8Length(v8::Isolate::GetCurrent())
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) do { SWIGV8_ErrorHandler.error(code, msg); SWIG_fail; } while (0)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

SWIGINTERN void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be reset properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See definition of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
SWIGRUNTIME V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#elif (V8_MAJOR_VERSION-0) < 5
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#else
  void (*dtor) (const v8::WeakCallbackInfo<SWIGV8_Proxy> &data);
#endif
};

SWIGRUNTIME v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

SWIGRUNTIME int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#else
SWIGRUNTIME void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

SWIGRUNTIME int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

SWIGRUNTIME void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (V8_MAJOR_VERSION-0) < 5
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor, v8::WeakCallbackType::kParameter);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor, v8::WeakCallbackType::kParameter);
  }
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

SWIGRUNTIME int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

SWIGRUNTIME v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif
  }

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

SWIGRUNTIME SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGRUNTIME SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);
  if(objRef->InternalFieldCount() < 1) return false;
#if (V8_MAJOR_VERSION-0) < 5
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  v8::Local<v8::Value> flag;
  if (!objRef->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&flag))
    return false;
#endif
  return (flag->IsBoolean() && SWIGV8_BOOLEAN_VALUE(flag));
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = SWIGV8_TO_OBJECT(valRef);

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#elif (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#else
SWIGRUNTIME void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackInfo<SwigV8PackedData> &data) {
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

#if (V8_MAJOR_VERSION-0) < 5
  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("__swig__packed_data__"));
  obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, SWIGV8_BOOLEAN_NEW(true));
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (V8_MAJOR_VERSION-0) < 5
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete, v8::WeakCallbackType::kParameter);
#endif

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#elif (V8_MAJOR_VERSION-0) < 5
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorNameGetterCallback  SwigV8AccessorGetterCallback;
typedef v8::AccessorNameSetterCallback  SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
#if (V8_MAJOR_VERSION-0) < 5
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#else
  obj->SetAccessor(SWIGV8_CURRENT_CONTEXT(), SWIGV8_SYMBOL_NEW(symbol), getter, setter);
#endif
}

#if (V8_MAJOR_VERSION-0) < 5
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#else
SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid& info)
#endif
{
    char buffer[256];
    char msg[512];
    int res;

#if (V8_MAJOR_VERSION-0) < 5
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
#else
    v8::Local<v8::String> sproperty;
    if (property->ToString(SWIGV8_CURRENT_CONTEXT()).ToLocal(&sproperty)) {
      SWIGV8_WRITE_UTF8(sproperty, buffer, 256);
      res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    }
    else {
      res = -1;
    }
#endif

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
fail: ;
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Base_Optimise swig_types[0]
#define SWIGTYPE_p_FOptimise swig_types[1]
#define SWIGTYPE_p_Optimise swig_types[2]
#define SWIGTYPE_p_bool swig_types[3]
#define SWIGTYPE_p_char swig_types[4]
#define SWIGTYPE_p_double swig_types[5]
#define SWIGTYPE_p_int swig_types[6]
#define SWIGTYPE_p_p1DFunc swig_types[7]
#define SWIGTYPE_p_pConstraintFunc swig_types[8]
#define SWIGTYPE_p_pHmul swig_types[9]
#define SWIGTYPE_p_pModC swig_types[10]
#define SWIGTYPE_p_pModQ swig_types[11]
#define SWIGTYPE_p_pUtility swig_types[12]
#define SWIGTYPE_p_p_char swig_types[13]
#define SWIGTYPE_p_size_t swig_types[14]
#define SWIGTYPE_p_unsigned_char swig_types[15]
#define SWIGTYPE_p_unsigned_int swig_types[16]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 17, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#ifdef _JAVASOFT_JNI_H_
#include "optimise.h"
template <typename T> DLLEXPORT void dumpvector(size_t n,const char* name,T* A,std::ofstream &file)
{
	file<<name<<std::endl;
	file.precision(17);
	if(A&&(n>0))
	{
		while(n--)
		{
			if(n)
				file<<*A++<<" ";
			else
				file<<*A++;
		}
	}
	file<<std::endl;
}

extern "C" void patternmin(unsigned long n,double *x,double *step,
	double *f,double scale,short iprint,short icon,
	unsigned long maxit,double *w,pUtility calcfx,void*info);

void lineprintv(FILE* I,const char* name,size_t n,vector data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%-.8e ",data[i]);
	fprintf(I,"\n");
}
void lineprinti(FILE* I,const char* name,size_t n,int* data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%d ",data[i]);
	fprintf(I,"\n");
}
void lineprintl(FILE* I,const char* name,size_t n,dimen* data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%d ",data[i]);
	fprintf(I,"\n");
}
void lineprintn(FILE* I,const char* name,size_t n,char** data)
{
	fprintf(I,"%s\n",name);
	for(size_t i=0;data&&i<n;++i)
		fprintf(I,"%s ",data[i]);
	fprintf(I,"\n");
}
short FrontierCVPFlog(dimen npoints,vector risk,
									vector arisk,vector rreturn,vector areturn,
									dimen n,long nfac,char** stocknames,vector w,dimen m,
									vector A,vector L,vector U,vector alpha,
									vector benchmark,vector Q,vector initial,
									real delta,vector buy,vector sell,real kappa,dimen basket,
									dimen trades,dimen revise,int costs,real min_holding,real min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Comp,real LSValue,
									dimen npiece,vector hpiece,vector pgrad,
									vector FC,vector FL,vector SV,vector mask,int DoByRisks)
{
	FILE* OOO=fopen("s:\\Frontier.log","w");
	fprintf(OOO,"npoints\n%d\n",npoints);
	lineprintv(OOO,(char*)"risk",n*npoints,risk);
	lineprintv(OOO,(char*)"arisk",n*npoints,arisk);
	lineprintv(OOO,(char*)"rreturn",n*npoints,rreturn);
	lineprintv(OOO,(char*)"areturn",n*npoints,areturn);
	fprintf(OOO,"n\n%d\n",n);
	fprintf(OOO,"nfac\n%d\n",nfac);
	lineprintn(OOO,"stocknames",n,stocknames);
	lineprintv(OOO,(char*)"w",n*npoints,w);
	fprintf(OOO,"m\n%d\n",m);
	lineprintv(OOO,(char*)"A",n*m,A);
	lineprintv(OOO,(char*)"L",n+m,L);
	lineprintv(OOO,(char*)"U",n+m,U);
	lineprintv(OOO,(char*)"alpha",n,alpha);
	lineprintv(OOO,(char*)"benchmark",n,benchmark);
	if(nfac==-1)
		lineprintv(OOO,(char*)"Q",(n-ncomp)*(n-ncomp+1)/2,Q);
	else
		lineprintv(OOO,(char*)"Q",(n-ncomp)*(nfac+1),Q);
	lineprintv(OOO,(char*)"initial",n,initial);
	fprintf(OOO,"delta\n%-.e\n",delta);
	lineprintv(OOO,(char*)"buy",n,buy);
	lineprintv(OOO,(char*)"sell",n,sell);
	fprintf(OOO,"kappa\n%-.e\n",kappa);
	fprintf(OOO,"basket\n%d\n",basket);
	fprintf(OOO,"trades\n%d\n",trades);
	fprintf(OOO,"revise\n%d\n",revise);
	fprintf(OOO,"costs\n%d\n",costs);
	fprintf(OOO,"min_holding\n%-.e\n",min_holding);
	fprintf(OOO,"min_trade\n%-.e\n",min_trade);
	fprintf(OOO,"m_LS\n%d\n",m_LS);
	fprintf(OOO,"Fully_Invested\n%d\n",Fully_Invested);
	fprintf(OOO,"Rmin\n%-.e\n",Rmin);
	fprintf(OOO,"Rmax\n%-.e\n",Rmax);
	fprintf(OOO,"m_Round\n%d\n",m_Round);
	lineprintv(OOO,(char*)"min_lot",n,min_lot);
	lineprintv(OOO,(char*)"size_lot",n,size_lot);
	lineprinti(OOO,"shake",n*npoints,shake);
	fprintf(OOO,"ncomp\n%d\n",ncomp);
	lineprintv(OOO,(char*)"Comp",(n-ncomp)*ncomp,Comp);
	fprintf(OOO,"LSValue\n%-.8e\n",LSValue);
	fprintf(OOO,"npiece\n%d\n",npiece);
	lineprintv(OOO,(char*)"hpiece",n*npiece,hpiece);
	lineprintv(OOO,(char*)"pgrad",n*npiece,pgrad);
	if(nfac!=-1)
	{
		lineprintv(OOO,(char*)"FC",(nfac+1)*nfac/2,FC);
		lineprintv(OOO,(char*)"SV",(n-ncomp),SV);
		lineprintv(OOO,(char*)"FL",(n-ncomp)*nfac,FL);
	}
	else
	{
		lineprintv(OOO,(char*)"FC",0,FC);
		lineprintv(OOO,(char*)"SV",0,SV);
		lineprintv(OOO,(char*)"FL",0,FL);
	}
	lineprintv(OOO,(char*)"mask",n,mask);
	fprintf(OOO,"DoByRisks\n%d\n",DoByRisks);
	fclose(OOO);
	return 0;
}
typedef struct
{
	JNIEnv *jenv;
	jobject jd;
	char*	functionName;
}	JavaInfo;
static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;

	jdoubleArray xx = jenv->NewDoubleArray(n);
	if(!xx) printf("JNI can't allocate xx\n");
	jdoubleArray yy = jenv->NewDoubleArray(n);
	if(!yy) printf("JNI can't allocate yy\n");
	jdoubleArray HH = jenv->NewDoubleArray(n*(n+1)/2);
	if(!HH) printf("JNI can't allocate HH\n");

	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(JJJJ[D[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}


	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(yy,0,n,y);
	jenv->SetDoubleArrayRegion(HH,0,n*(n+1)/2,H);


	jenv->CallVoidMethod(jd,mid,(jlong)n,(jlong)n1,(jlong)n2,(jlong)n3,HH,xx,yy);
	jenv->GetDoubleArrayRegion(yy,0,n,y);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(yy);
	jenv->DeleteLocalRef(HH);
}	
static double CallUtil(size_t n,double *x,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	char*	name=info->functionName;
	jobject jd=info->jd;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D)D");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return 1e10;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);

	jenv->SetDoubleArrayRegion(xx,0,n,x);

	jdouble ret =0;
	ret= jenv->CallDoubleMethod(jd,mid,(jlong)n,xx);


	jenv->DeleteLocalRef(xx);
	return ret;
}	
static void CallModC(size_t n,double *x,double *c,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray cc = jenv->NewDoubleArray(n);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(cc,0,n,c);

	jenv->CallVoidMethod(jd,mid,(jlong)n,xx,cc);
	jenv->GetDoubleArrayRegion(cc,0,n,c);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(cc);
}	
static void CallModQ(size_t n,double *x,double *Hmod,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(J[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray cc = jenv->NewDoubleArray(n*(n+1)/2);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(cc,0,n*(n+1)/2,Hmod);

	jenv->CallVoidMethod(jd,mid,(jlong)n,xx,cc);
	jenv->GetDoubleArrayRegion(cc,0,n*(n+1)/2,Hmod);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(cc);
}	
static void CallModAb(size_t n,size_t m,double *x,double *y,double *J,double *H,double*g,void* f)
{
	size_t nm=n*m,nn=n*(n+1)>>1;
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	jobject jd=info->jd;
	char*	name=info->functionName;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(JJ[D[D[D[D[D)V");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return;
	}

	jdoubleArray xx = jenv->NewDoubleArray(n);
	jdoubleArray JJ;
	
	if(J) JJ = jenv->NewDoubleArray(nm);
	else JJ = jenv->NewDoubleArray(0);
	
	jdoubleArray yy = jenv->NewDoubleArray(m);
	jdoubleArray HH;
	
	if(H) HH = jenv->NewDoubleArray(nn);
	else HH = jenv->NewDoubleArray(0);
	
	jdoubleArray gg = jenv->NewDoubleArray(m);

	jenv->SetDoubleArrayRegion(xx,0,n,x);
	jenv->SetDoubleArrayRegion(yy,0,m,y);
	if(J) jenv->SetDoubleArrayRegion(JJ,0,nm,J);
	jenv->SetDoubleArrayRegion(gg,0,m,g);
	if(H) jenv->SetDoubleArrayRegion(HH,0,nn,H);

	jenv->CallVoidMethod(jd,mid,(jlong)n,(jlong)m,xx,yy,JJ,HH,gg);
	if(J) jenv->GetDoubleArrayRegion(JJ,0,nm,J);
	if(H) jenv->GetDoubleArrayRegion(HH,0,nn,H);
	jenv->GetDoubleArrayRegion(gg,0,m,g);


	jenv->DeleteLocalRef(xx);
	jenv->DeleteLocalRef(yy);
	jenv->DeleteLocalRef(JJ);
	jenv->DeleteLocalRef(HH);
	jenv->DeleteLocalRef(gg);
}	
static double Call1D(double x,void* f)
{
	JavaInfo *info=(JavaInfo*)f;
	JNIEnv *jenv=info->jenv;
	char*	name=info->functionName;
	jobject jd=info->jd;
	jclass jc=jenv->GetObjectClass(jd);
	jmethodID mid = jenv->GetMethodID(jc,name,"(D)D");
	if(!mid)
	{
		printf("Cannot get method %s\n",name);return 1e10;
	}
	jdouble dd=0;
	dd=jenv->CallDoubleMethod(jd,mid,x);
	return dd;
}	
#ifdef __cplusplus
extern "C"
{
#endif
#ifdef __cplusplus
}
#endif
#else
//		#ifndef _JAVASOFT_JNI_H_
#include "optimise.h"
typedef void (*ppModC)_PROTO((dimen nvab,vector x,vector c)); 
typedef void (*ppModQ)_PROTO((dimen n1,vector x,dimen n2,vector h)); 
template <typename T> DLLEXPORT void dumpvector(size_t n,const char* name,T* A,std::ofstream &file)
{
	file<<name<<std::endl;
	file.precision(17);
	if(A&&(n>0))
	{
		while(n--)
		{
			if(n)
				file<<*A++<<" ";
			else
				file<<*A++;
		}
	}
	file<<std::endl;
}
extern "C" void patternmin(unsigned long n,double *x,double *step,
	double *f,double scale,short iprint,short icon,
	unsigned long maxit,double *w,pUtility calcfx,void*info);
#endif
#ifdef H_PERL

static void CallModQ(size_t n,double *x,double *c,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svx,*svc;
	AV *tempavx=newAV(),*tempavc=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
	}
	for(i=0;i<n*(n+1)/2;++i)
	{
		av_push(tempavc,newSVnv(c[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svc = sv_2mortal(newRV((SV*)tempavc));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svx);
	XPUSHs(svc);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0){croak ("call_Inc: expected 0 values CallModQ, got %d\n",count);}
	for(i=0;i<n*(n+1)/2;++i)
	{
		c[i]=SvNV(*(av_fetch((AV*)SvRV(svc),i,0)));
//		printf("%d %e\n",i+1,c[i]);
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavc);
}
static void CallModAb(size_t n,size_t m,double *x,double*y,double *J,double*H,double*g,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svm,*svx,*svJ,*svg,*svy,*svH;
	AV *tempavx=newAV(),*tempavy=newAV(),*tempavJ=newAV(),*tempavH=newAV(),*tempavg=newAV();

	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
	}
	for(i=0;i<m;++i)
	{
		av_push(tempavy,newSVnv(y[i]));
	}
	if(J)
	{
		for(i=0;i<n*m;++i)
		{
			av_push(tempavJ,newSVnv(J[i]));
		}
	}
	if(H)
	{
		for(i=0;i<n*(n+1)>>1;++i)
		{
			av_push(tempavH,newSVnv(H[i]));
		}
	}
	for(i=0;i<m;++i)
	{
		av_push(tempavg,newSVnv(g[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svm = sv_2mortal(newSViv(m));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svy = sv_2mortal(newRV((SV*)tempavy));
	svJ = sv_2mortal(newRV((SV*)tempavJ));
	svH = sv_2mortal(newRV((SV*)tempavH));
	svg = sv_2mortal(newRV((SV*)tempavg));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svm);
	XPUSHs(svx);
	XPUSHs(svy);
	XPUSHs(svJ);
	XPUSHs(svH);
	XPUSHs(svg);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0){croak ("call_Inc: expected 0 values CallModQ, got %d\n",count);}
	if(J)
	{
		for(i=0;i<n*m;++i)
		{
			J[i]=SvNV(*(av_fetch((AV*)SvRV(svJ),i,0)));
		}
	}
	if(H)
	{
		for(i=0;i<n*(n+1)>>1;++i)
		{
			H[i]=SvNV(*(av_fetch((AV*)SvRV(svH),i,0)));
		}
	}
	for(i=0;i<m;++i)
	{
		g[i]=SvNV(*(av_fetch((AV*)SvRV(svg),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavy);
	av_undef(tempavJ);
	av_undef(tempavH);
	av_undef(tempavg);
}
static void CallModC(size_t n,double *x,double *c,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svx,*svc;
	AV *tempavx=newAV(),*tempavc=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
		av_push(tempavc,newSVnv(c[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svc = sv_2mortal(newRV((SV*)tempavc));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svx);
	XPUSHs(svc);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0)
		croak ("call_Inc: expected 0 values CallModC, got %d\n",count) ;
	for(i=0;i<n;++i)
	{
		c[i]=SvNV(*(av_fetch((AV*)SvRV(svc),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavx);
	av_undef(tempavc);
}
static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	size_t count,i;
	dSP;
	SV *svn,*svn1,*svn2,*svn3,*svH,*svx,*svy;
	AV *tempavH=newAV(),*tempavx=newAV(),*tempavy=newAV();
	double back;
	for(i=0;i<n*(n+1)/2;++i)
	{
		av_push(tempavH,newSVnv(H[i]));
	}
	for(i=0;i<n;++i)
	{
		av_push(tempavx,newSVnv(x[i]));
		av_push(tempavy,newSVnv(y[i]));
	}
	ENTER;
	SAVETMPS;
	svn = sv_2mortal(newSViv(n));
	svn1 = sv_2mortal(newSViv(n1));
	svn2 = sv_2mortal(newSViv(n2));
	svn3 = sv_2mortal(newSViv(n3));
	svH = sv_2mortal(newRV((SV*)tempavH));
	svx = sv_2mortal(newRV((SV*)tempavx));
	svy = sv_2mortal(newRV((SV*)tempavy));
	PUSHMARK(SP);
	XPUSHs(svn);
	XPUSHs(svn1);
	XPUSHs(svn2);
	XPUSHs(svn3);
	XPUSHs(svH);
	XPUSHs(svx);
	XPUSHs(svy);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_DISCARD);
    SPAGAIN ;
	if (count != 0)
		croak ("call_Inc: expected 0 values CallHmul, got %d\n",count) ;
	for(i=0;i<n;++i)
	{
		y[i]=SvNV(*(av_fetch((AV*)SvRV(svy),i,0)));
	}
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempavH);
	av_undef(tempavx);
	av_undef(tempavy);
}
static double CallUtil(size_t n,double*x,void*f)
{
	size_t count,i;
	dSP;
	SV * sva,*svb ;
	AV *tempav=newAV();
	double back;
	for(i=0;i<n;++i)
	{
		av_push(tempav,newSVnv(x[i]));
	}
	ENTER;
	SAVETMPS;
	sva = sv_2mortal(newSViv(n));
	svb = sv_2mortal(newRV((SV*)tempav));
	PUSHMARK(SP);
	XPUSHs(sva);
	XPUSHs(svb);
	PUTBACK;
	count = perl_call_sv((SV*)f, G_SCALAR);
    SPAGAIN ;
	if (count != 1)
		croak ("call_Inc: expected 1 values CallUtil, got %d\n",count) ;
    back=POPn ;
    PUTBACK;
    FREETMPS;
    LEAVE;
	av_undef(tempav);
	return back;
}
static double Call1D(double x,void* f)
{
	double back;
    dSP;
    int count;
    ENTER;
    SAVETMPS;
    PUSHMARK(SP);
    XPUSHs(sv_2mortal(newSVnv(x)));
    PUTBACK;
    count = perl_call_sv((SV*)f, G_SCALAR);
    SPAGAIN ;
    if (count != 1)
         croak("Call1D: wanted return value, Call1D got %d\n",count) ;
	back=POPn;
    PUTBACK;
    FREETMPS;
    LEAVE;
	return back;
}	
#endif
#ifdef Py_PYTHON_H
#if PY_VERSION_HEX >= 0x03000000
#define PyString_Check(x) PyUnicode_Check(x)
#define USE_STRDUP 0
#else
#define USE_STRDUP 1
#endif

//________________________Here they are________________________________________________
void CMS_get_fromvec(PyObject* &obj,Py_ssize_t n,char*name,vector w)
{
	PyObject*matcher=PyObject_GetAttrString(obj,name);
	if(PyList_Check(matcher))
	{
		Py_ssize_t i,size=PyList_Size(matcher);
		if(n!=size)
		{
			Py_XDECREF(matcher);
			matcher=PyList_New(n);
		}
		if(w)
		{
			for(i=0;i<n;++i)
			{
				PyList_SetItem(matcher,i,PyFloat_FromDouble(w[i]));
			}
		}
		else
		{
			printf("Just set 0\n");
			for(i=0;i<n;++i)
			{
				PyList_SetItem(matcher,i,PyFloat_FromDouble(0.0));
			}
		}
		if(n!=size)
		{
			PyObject_SetAttrString(obj,name,matcher);
			Py_XDECREF(matcher);
		}
	}
}
void CMS_set_asvec(PyObject*obj,Py_ssize_t n,char*name,vector &w)
{
	if(PyObject_HasAttrString(obj,name))
	{
		PyObject*matcher=PyObject_GetAttrString(obj,name);
		if(PyList_Check(matcher))
		{
			Py_ssize_t i,size=PyList_Size(matcher);
			if(!w)
			{
				w=new double[n];
			}
			if(size)
			{
				for(i=0;i<size;++i)
				{
					PyObject*o=PyList_GetItem(matcher,i);//Borrowed ref
					if(PyFloat_Check(o))
						w[i]=PyFloat_AsDouble(o);
					else if(PyLong_Check(o))
						w[i]=PyLong_AsDouble(o);
					else if(PyInt_Check(o))
						w[i]=(double)PyInt_AsLong(o);
				}
				Py_XDECREF(matcher);
			}
			else
				dzerovec(n,w);
		}
	}
	else
	{
		char*err1=(char*)"No member has name                                                                                                ";
		sprintf(err1,"No member of object has name %s",name);
		printf("%s\n",err1);
		PyErr_SetString(PyExc_TypeError,err1);return;
	}
}
static double AccUtil(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher;
	
	char* name1=Opt->Utilname;
	CMS_get_fromvec(obj,Opt->n,(char*)"w",Opt->w);

	if(PyObject_HasAttrString(obj,name1))
	{
		matcher=PyObject_CallMethod(obj,name1,0);
	}
	double ret;
	if(matcher)
	{
		ret=(double)PyFloat_AsDouble(matcher);
		Py_XDECREF(matcher);
	}
	return ret;
}

static void AccGUtil(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher;
	
	char* name1=Opt->GUtilname;
	CMS_get_fromvec(obj,Opt->n,(char*)"w",Opt->w);
	if(PyObject_HasAttrString(obj,name1))
	{
		matcher=PyObject_CallMethod(obj,name1,0);
	}
	if(matcher&&PyList_Check(matcher))
	{
		Py_ssize_t i,size=PyList_Size(matcher);
		for(i=0;i<size;++i)
		{
			PyObject*o=PyList_GetItem(matcher,i);//Borrowed ref
			if(PyFloat_Check(o))
				OP->grad[i]=PyFloat_AsDouble(o);
			else if(PyLong_Check(o))
				OP->grad[i]=PyLong_AsDouble(o);
			else if(PyInt_Check(o))
				OP->grad[i]=(double)PyInt_AsLong(o);
		}
		Py_XDECREF(matcher);
	}
}

static short AccOpt(void*info)
{
	OptParamAccum*OP=(OptParamAccum*)info;
	OptPassAccum*Opt=(OptPassAccum*)(OP->MoreInfo);
	PyObject*obj=(PyObject*)(Opt->caller),*matcher,*o;
	
	matcher=PyInt_FromLong((long)Opt->m);
	PyObject_SetAttrString(obj,"m",matcher);
	Py_XDECREF(matcher);
	
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n+Opt->m),(char*)"L",Opt->L);
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n+Opt->m),(char*)"U",Opt->U);
	CMS_get_fromvec(obj,(Py_ssize_t)(Opt->n*Opt->m),(char*)"A",Opt->A);
	
	if(PyObject_HasAttrString(obj,Opt->Optname))
	{
		o=PyObject_CallMethod(obj,Opt->Optname,(char*)"()",0);
	}
	short ret=-1000;
	if(o)
	{
		ret=(short)PyInt_AsLong(o);
		Py_XDECREF(o);
	}
	else
	{
		printf("Nothing returned from function call\n");
		PyErr_SetString(PyExc_TypeError,(char*)"Nothing returned from function call");
	}
	
	CMS_set_asvec(obj,(Py_ssize_t)Opt->n,(char*)"w",Opt->w);
	Opt->back=ret;//Opt object expects back member to be set correctly as well as w
	
	return ret;
}
	
	

static void CallHmul(size_t n,size_t n1,size_t n2,size_t n3,double* H,double *x,double *y,void* f)
{
	PyObject *Hlist=PyList_New(n*(n+1)/2);
	PyObject *list1=PyList_New(n);
	PyObject *list2=PyList_New(n);
	double *yp=y;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n*(n+1)/2;++i)
	{
		PyList_SetItem(Hlist,i,PyFloat_FromDouble(*H++));
	}
	for(i=0;i<n;++i)
	{
		PyList_SetItem(list1,i,PyFloat_FromDouble(*x++));
		PyList_SetItem(list2,i,PyFloat_FromDouble(*yp++));
	}
	arglist = Py_BuildValue("(llllOOO)",n,n1,n2,n3,Hlist,list1,list2);
	result = PyObject_CallObject(func,arglist);
	yp=y;
	for(i=0;i<n;++i)
	{
		*yp++ = PyFloat_AsDouble(PyList_GetItem(list2,i));
	}
	Py_DECREF(Hlist);
	Py_DECREF(list1);
	Py_DECREF(list2);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static double CallUtil(size_t n,double *x,void* f)
{
	PyObject *xlist=PyList_New(n);
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	double dresult=0;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	arglist = Py_BuildValue("(lO)",n,xlist);
	result = PyObject_CallObject(func,arglist);
	Py_DECREF(xlist);
	Py_CLEAR(xlist);
	Py_DECREF(arglist);
	if(result)
	{
		dresult=PyFloat_AsDouble(result);
		Py_CLEAR(result);
	}
	return dresult;
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModC(size_t n,double *x,double *c,void* f)
{
	PyObject *xlist=PyList_New(n);
	PyObject *clist=PyList_New(n);
	double *cp=c;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
		PyList_SetItem(clist,i,PyFloat_FromDouble(*cp++));
	}
	arglist = Py_BuildValue("(lOO)",n,xlist,clist);
	result = PyObject_CallObject(func,arglist);
	cp=c;
	for(i=0;i<n;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(clist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(clist);
	Py_CLEAR(xlist);
	Py_CLEAR(clist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModQ(size_t n,double *x,double *Hmod,void* f)
{
	PyObject *xlist=PyList_New(n);
	PyObject *clist=PyList_New(n*(n+1)/2);
	double *cp=Hmod;
	size_t i;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	for(i=0;i<n*(n+1)/2;++i)
	{
		PyList_SetItem(clist,i,PyFloat_FromDouble(*cp++));
	}
	arglist = Py_BuildValue("(lOO)",n,xlist,clist);
	result = PyObject_CallObject(func,arglist);
	cp=Hmod;
	for(i=0;i<n*(n+1)/2;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(clist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(clist);
	Py_CLEAR(xlist);
	Py_CLEAR(clist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	
//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static void CallModAb(size_t n,size_t m,double *x,double*y,double *J,double*H,double*g,void* f)// Get the Jacobian and first derivatives of constraints f(x)=0
{
	PyObject *xlist=PyList_New(n);
	PyObject *ylist=PyList_New(m);
	PyObject *Jlist,*Hlist;
	PyObject *glist=PyList_New(m);
	double *cp=J;
	size_t i,nn=n*(n+1)>>1,nm=n*m;
	PyObject *func,*arglist;
	PyObject *result;
	func = (PyObject*) f;
	for(i=0;i<n;++i)
	{
		PyList_SetItem(xlist,i,PyFloat_FromDouble(*x++));
	}
	for(i=0;i<m;++i)
	{
		PyList_SetItem(ylist,i,PyFloat_FromDouble(*y++));
	}
	cp=g;
	for(i=0;i<m;++i)
	{
		PyList_SetItem(glist,i,PyFloat_FromDouble(*cp++));
	}
	if(J)
	{
		cp=J;
		Jlist=PyList_New(nm);
		for(i=0;i<nm;++i)
		{
			PyList_SetItem(Jlist,i,PyFloat_FromDouble(*cp++));
		}
	}
	else
		Jlist=PyList_New(0);
	if(H)
	{
		cp=H;
		Hlist=PyList_New(nn);
		for(i=0;i<nn;++i)
		{
			PyList_SetItem(Hlist,i,PyFloat_FromDouble(*cp++));
		}
	}
	else
		Hlist=PyList_New(0);
	arglist = Py_BuildValue("(llOOOOO)",n,m,xlist,ylist,Jlist,Hlist,glist);
	result = PyObject_CallObject(func,arglist);
	if(J)
	{
		cp=J;
		for(i=0;i<nm;++i)
		{
			*cp++ = PyFloat_AsDouble(PyList_GetItem(Jlist,i));
		}
	}
	if(H)
	{
		cp=H;
		for(i=0;i<nn;++i)
		{
			*cp++ = PyFloat_AsDouble(PyList_GetItem(Hlist,i));
		}
	}
	cp=g;
	for(i=0;i<m;++i)
	{
		*cp++ = PyFloat_AsDouble(PyList_GetItem(glist,i));
	}
	Py_DECREF(xlist);
	Py_DECREF(ylist);
	Py_DECREF(Jlist);
	Py_DECREF(Hlist);
	Py_DECREF(glist);
	Py_CLEAR(xlist);
	Py_CLEAR(ylist);
	Py_CLEAR(Jlist);
	Py_CLEAR(Hlist);
	Py_CLEAR(glist);
	Py_DECREF(arglist);
	if(result)
	{
		Py_CLEAR(result);
	}
}	

//_____________________________________________________________________________________
//________________________Here they are________________________________________________
static double Call1D(double x,void* f)
{
	PyObject* func = (PyObject*) f;
	double back;
	PyObject* arglist = Py_BuildValue("(d)",x);
	PyObject* result = PyObject_CallObject(func,arglist);
	Py_DECREF(arglist);
	if(result)
	{
		back = PyFloat_AsDouble(result);
		Py_CLEAR(result);
	}
	return back;
}	

//_____________________________________________________________________________________
static PyObject* l_output_helper(PyObject* target, PyObject* o)
{//We're trying to add o to list target even if there is no target
//I don't think there is any point to this
    PyObject*   o2;
    if(!target)
	{                   
        target = o;printf("target was 0\n");
    }
	else if(target == Py_None)
	{  
        Py_DECREF(Py_None);
        target = o;printf("target was Py_None\n");
    }
	else
	{                         
        if(!PyList_Check(target))
		{
            o2 = target;printf("target wasn't a list\n");
            target = PyList_New(0);
            PyList_Append(target,o2);
		    Py_XDECREF(o2);
        }
        PyList_Append(target,o);
		Py_XDECREF(o);
    }
    return target;
}
#endif
#ifdef SWIGCSHARP
#if defined( WIN32 ) || defined( __SYSNT__ )
#define MYSTDCALL __stdcall
#else
#define MYSTDCALL
#endif
static double Call1D(double x,void* f)
{
	double (MYSTDCALL *func)(double)  =(double (MYSTDCALL *)(double ))f;
	return func(x);
}	
static void CallHmul(dimen n,dimen n1,dimen n2,dimen n3,double* H,double *x,double *y,void* f)
{
	void (MYSTDCALL *func)(dimen,dimen,dimen,dimen,vector,vector,vector)  =(void (MYSTDCALL *)(dimen,dimen ,dimen,dimen,vector,vector ,vector))f;
	func(n,n*(n+1)/2,n2,n3,H,x,y);
}
static double CallUtil(dimen n,double *x,void* f)
{
	double (MYSTDCALL *func)(dimen,vector)  =(double (MYSTDCALL *)(dimen ,vector ))f;
	return func(n,x);
}
static void CallModC(dimen n,double *x,double *c,void* f)
{
	void (MYSTDCALL *func)(dimen,vector,vector)  =(void (MYSTDCALL *)(dimen ,vector ,vector))f;
	func(n,x,c);
}
static void CallModQ(dimen n,double *x,double *q,void* f)
{
	void (MYSTDCALL *func)(dimen,vector,dimen,vector)  =(void (MYSTDCALL *)(dimen ,vector ,dimen,vector))f;
	func(n,x,n*(n+1)/2,q);
}
static void CallModAb(dimen n,dimen m,double *x,double *y,double *J,double *H,double*g,void* f)
{
	void (MYSTDCALL *func)(dimen,dimen,vector,vector,dimen,vector,dimen,vector,vector)  =(void (MYSTDCALL *)(dimen,dimen,vector,vector,dimen,vector,dimen,vector,vector))f;
	if(J&&!H)func(n,m,x,y,n*m,J,0,H,g);
	else if(!J&&H)func(n,m,x,y,0,J,n*(n+1)/2,H,g);
	else if(!J&&!H)func(n,m,x,y,0,J,0,H,g);
	func(n,m,x,y,n*m,J,n*(n+1)/2,H,g);
}
#endif


typedef double real;
typedef double* vector;
typedef double* matrix;
#if defined(__SYSNT__) ||defined(MSDOSS)||defined(_LP64)
typedef unsigned long dimen;
typedef long short_scl;
typedef long Integer;
#else
typedef unsigned int dimen;
typedef int short_scl;
typedef int Integer;
#endif



    extern "C" void MCAR(unsigned long n,unsigned long nf,vector w,vector alpha,vector FL,vector SV,vector FC,vector MC)
    {
        vector Q=0,MCTR=new double[n],MCRR=new double[n],FMCRR=0,FMCTR=0,FX=0,RFX=0,bbeta=new double[n+1];
        double risk=0,arisk=0,Rrisk=0,rreturn=0,areturn=0,Rreturn=0;
        PropertiesC(n,nf,0,w,alpha,0,Q,&risk,&arisk,&Rrisk,
									&rreturn,
                                    &areturn,&Rreturn,
                                    MC,MCTR,MCRR,FMCRR,
                                    FMCTR,bbeta,FX,RFX,
                                    FL,FC,SV,0,0);
        delete[] MCTR;
        delete[] MCRR;
        delete[] bbeta;
    }
    extern "C" void FX_get(unsigned long n,unsigned long nf,vector w,vector FL,vector SV,vector FC,vector FX)
    {
        vector Q=0,MCAR=new double[n],MCTR=new double[n],MCRR=new double[n],FMCRR=0,FMCTR=new double[n+nf],alpha=0,RFX=0,bbeta=new double[n+1];
        double risk=0,arisk=0,Rrisk=0,rreturn=0,areturn=0,Rreturn=0;
        PropertiesC(n,nf,0,w,alpha,0,Q,&risk,&arisk,&Rrisk,
									&rreturn,
                                    &areturn,&Rreturn,
                                    MCAR,MCTR,MCRR,FMCRR,
                                    FMCTR,bbeta,FX,RFX,
                                    FL,FC,SV,0,0);
        delete[] MCAR;
        delete[] MCTR;
        delete[] MCRR;
        delete[] bbeta;
        delete[] FMCTR;
    }
    extern "C" short SimpleOpt(unsigned long n,long nfac,int ls,int full,vector SV,vector FL,vector FC,
    vector w, unsigned long m, vector L, vector U, vector A,vector alpha,double gamma, double*ogamma,double minRisk,double maxRisk,
    double five, double ten, double forty, char** names)
    {
        int log = 2;
        char* logfile = (char*)"JSlog";
        gamma=gamma>=1.0?gamma-1e-15:gamma;
        short back = Optimise_internalCVPAFblSaMSoftQ(n,nfac,names,w,m,
									A,L,U,alpha,
									0,0,gamma,0,
									-1.0,0,0,-1.0,n,
									-1,0,0,-1.0,
									-1.0,
									ls,full,-1.0,-1.0,
									0,0,0,0,
									0,0,1.0,
									0,0,0,
									0,0,0,0,0,
									FC,FL,SV,minRisk,maxRisk,
									ogamma,0,log,logfile,
									0,1,
									-1,-1,
									-1,-1,1,1,
									1,0.0,0,0,
									1,0,0,0,0,
									0,0,0,0,0,five,ten,forty,0);   
        return back;    
    }
    extern "C" void testchars(int n,char** in,char** out)
    {
        int i,l1,l2,j;
        for(i=0;i<n;++i){
            l1=strlen(in[i]);
            l2=strlen(out[i]);
            printf("%s\n",in[i]);
            printf("Before %s\n",out[i]);
            for(j=0;j<l2;++j)
            {
               if(j<l1)out[i][j]=in[i][j];
            }
            printf("Changed %s\n",out[i]);
        }
    }

extern "C" void test2dlist(size_t n,size_t m,double*TWOD)
{
	size_t i,j;
	printf("n=%d m=%d\n",n,m);
	for(i=0;i<n;++i)
	{
		for(j=0;j<m;++j)
		{
			printf("i=%d,j=%d\t%f\n",i,j,TWOD[i+j*n]);
			TWOD[i+j*n]*=2;
		}
	}
}
extern "C" void Sym_mult(size_t n, vector S, vector x, vector w_opt)
{
	dsmxmulv(n, S, x, w_opt);
}
extern "C" void GetOrder(size_t n,double* a,size_t* bb1,int abs=0,unsigned char*bad=0)
{
	std::valarray<unsigned char> dropbad;
	if(!bad)
	{
		dropbad.resize(n);
		dropbad=(unsigned char)0;
		bad=&dropbad[0];
	}
	if(abs)
		getorder(n,a,bb1,bad);
	else
		getordereig(n,a,bb1,bad);
/*	for(size_t i = 0;i<n;++i)
	{
		std::cout << bb1[i] << std::endl;
	}*/
}

extern "C" void PatternMin(unsigned long n,double *w_opt,double *step,
	double *ynewlow,double scale,pUtility calcfx,void*info,short iprint=1,unsigned long maxit=20,short icon=2)
{
	std::valarray<double> w(n*(n+4));
	patternmin(n,w_opt,step,ynewlow,scale,iprint,icon,maxit,&w[0],calcfx,info);
}
extern "C" void dumpvec(size_t n,const char* name,double* A,const char* file)
{
	std::ofstream outFile;
	outFile.open(file,std::ios_base::app);
	if(outFile.fail())
	{
		std::cout<<"Cannot open "<<file<<std::endl;
		return;
	}
	dumpvector(n,name,A,outFile);
	outFile.close();
	outFile.clear();
}
extern "C" void dumpsvec(size_t n,const char* name,char** A,const char* file)
{
	std::ofstream outFile;
	outFile.open(file,std::ios_base::app);
	if(outFile.fail())
	{
		std::cout<<"Cannot open "<<file<<std::endl;
		return;
	}
	dumpvector(n,name,A,outFile);
	outFile.close();
	outFile.clear();
}

extern "C" void ReorderS(size_t n, size_t* order,vector QFIX);
extern "C" void ReorderSquare(size_t n,size_t* order,vector QFIX);
extern "C" void Reorder(size_t n, size_t* order,vector QFIX);
extern "C" void Reorder_mult(size_t n, size_t* order,vector QFIX,size_t m);
extern "C" void getBIMcov(char* factorfile,char* covfile,size_t *BIMnf,char** factors,vector QFIX);
extern "C" void procBIMcov(char* factorfile,char* covfile,char* outfile);
extern "C" void procBIMmod(char* modelfile,char* facretfile,char* expfile,char* svfile,char* outfile);
extern "C"  void digitise(size_t n,vector w,vector initial,vector minlot,vector sizelot,vector digit);
extern "C" size_t roundcount(size_t n,vector w,vector initial,vector minl,vector sizl,double *trw,vector naive);
extern "C" int	fix_covariancem(dimen n,vector QFIX);
extern "C" short InvQ_d(dimen n,vector Q,vector d,vector Qm1d);
extern "C" short ConstrRegress(dimen n,dimen m,vector Q,vector d,vector w_opt,vector L,vector U,vector AAA);
extern "C" int	pickout(dimen nstocks,char **stocklist,dimen M_nstocks,char** M_stocklist,vector QFIX,size_t*Order=0);
extern "C" int	pickoutstrings(dimen nstocks,char **stocklist,dimen M_nstocks,char** M_stocklist,char** Q,size_t*Order=0);
extern "C" char*	Return_Message(int ifail);
extern "C" char*	MultiStageMessage(int ifail);
extern "C" char*	SOCPlstestMessage(int ifail);
extern "C" short eigendecomp(dimen n, vector eigvec, vector eigval, dimen itmax);
extern "C" void dldlfactNULL(dimen n, vector S);
extern "C" char* expire_date(char*asetup);
extern "C" char* version(char*asetup);
extern "C" char* cversion(char*asetup);
extern "C" char* component_key(char*asetup);
extern "C" int	days_left(char **aversion);
extern "C" void Extract_Factor_Information(dimen nstocks,dimen numfac,dimen Mnstocks,
								vector FLOAD,vector SSV,char** stocklist,
								vector MFLOAD,vector MSV,char** Mstocklist);
extern "C" void CurrencyProcessFL(size_t nf,size_t n,vector FL,vector psi,vector FLn);


extern "C" void winsorise(unsigned long noOfPts, double *values, int winsorOption, double scaling, 
			   double *returnArray);
extern "C"  double percentile(unsigned long noOfPts, double *values, int num);
extern "C"  double average(unsigned long s, double *xx);
extern "C"  double stddev(unsigned long s, double *xx);
extern "C"  double covariance1(double *xx, double *y, double *w, unsigned long s);
extern "C"  void mAve(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mSum(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mProd(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mCovar(unsigned long noOfPts, double *values1, double *values2, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mCorrel(unsigned long noOfPts, double *values1, double *values2, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mVar(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void mStddev(unsigned long noOfPts, double *values, unsigned long window, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cAve(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cSum(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cProd(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cCovar(unsigned long noOfPts, double *values1, double *values2, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cCorrel(unsigned long noOfPts, double *values1, double *values2, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cVar(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void cStddev(unsigned long noOfPts, double *values, unsigned long ignoreMissing, double *returnArray);
extern "C"  void prodArrays(unsigned long noOfPts, double *values1, double *values2, double *returnArray);
extern "C"  double wAve(unsigned long noOfPts, double *values, double *weights);
extern "C"  double wAveProd(unsigned long noOfPts, double *values1, double *values2, double *weights);
extern "C"  double wCovar(unsigned long noOfPts, double *values1, double *values2, double *weights);

extern "C" double ddotvec(unsigned long n,vector a,vector b);
extern "C" void genmult(size_t nl,size_t ng,vector YY,vector SSS,vector YS);
extern "C" void getFSF(size_t n,size_t m,vector S,vector YS,vector FSF);
extern "C" double DOT(size_t n,vector a,vector b);
extern "C" void combineS(size_t n,vector q,vector g,vector U);
extern "C" void	symm_inverse_x(size_t n,vector Q,vector x,vector Qm1x);
extern "C" void vec2symm(size_t n,vector vec,vector symm);
extern "C" void symmsymm(size_t n,vector S1,vector S2,vector S1S2);
extern "C" void Sinv_X(size_t n,vector S,vector X,vector SiX);
extern "C" double A1MA2(size_t n,vector A1,vector A2,vector M);
extern "C" void square2symm(size_t n,vector S);
extern "C" void square2sqsymm(size_t n,vector S);
extern "C" void gensymm(size_t n,vector M,vector S,vector MS);
extern "C" void Sinv_M(size_t n,vector S,vector M);
extern "C" double AdotSiAX(size_t n,vector Ai,vector S,vector Aj,vector X);
extern "C" double AdotSi(size_t n,vector A,vector S);
extern "C" void SiAX(size_t n,vector S,vector A,vector X,vector SAX);
extern "C" void Sisymm(size_t n,vector S,vector Si);
extern "C" short OptSemi(size_t n,size_t m,vector w_opt,vector g,vector Q,vector AAA,vector B);
extern "C" short OptSemiGen(size_t N,size_t M,vector X,vector C,vector AA,vector BB,size_t top=100);
extern "C" void vecvec2symmat(size_t n,vector b,vector a,vector AA);
extern "C" void Amake(size_t n,vector base,vector a,double b,vector AA,double B=10.0);
extern "C" short OptFundClass(size_t nf,size_t nc,vector target,double value,
							  double outvalue,vector wW,double factor=0.25,int log=0);
extern "C" void Factor2Cov(size_t n,size_t nfac,vector FFC,vector FLOAD,vector SSV,vector QFIX);
extern "C" void Factor2Var(size_t n,size_t nfac,vector FFC,vector FLOAD,vector SSV,vector Variance);
extern "C" int opt_fix(dimen n,vector QFIX,vector mask,int print=0,double tol=0);
extern "C" int eig_fix(dimen n,vector QFIX);
extern "C" int quad_fix(dimen n,vector QFIX,vector mask);
extern "C" void basic_factor_global_local_attribution(size_t n,size_t nl,size_t ng,vector FLOAD,vector w,
											 vector Y,vector G,vector S,vector YS,
											 vector FFC,vector SSV,
											 vector XMCTR,vector FFMCTR,vector SMCTR,
											 vector IsFVar,vector IsXVar,
											 vector IsFVarpg,vector GFX,vector FMCTRpg,vector IsXVarga,
											 vector FFX,double*facrisk,int print=0,vector FCgl=0);

extern "C" void basic_factor_global_local_attribution1(size_t n,size_t nl,size_t ng,
																 vector FLOAD,vector w,
																 vector Y,vector G,vector S,vector YS,
																 vector XMCTR,vector FFMCTR,
																vector IsFVar,vector IsXVar,
																vector IsFVarpg,vector GFX,
																vector FMCTRpg,vector IsXVarga,
																 vector FFX,double*facrisk,int print);
extern "C" double xCx(size_t n,vector Q,vector w);
extern "C" double gausspdf(double mean=0,double st=1,size_t reseed=0);
extern "C" void resampfront
(dimen n,long nfac,char** names,dimen m,
 vector AAA,vector L,vector U,vector alpha,
 vector benchmark,vector Q,vector Iinitial,
 real delta,int revise,vector FFC,vector FLOAD,vector SSV,dimen ncomp,vector Comp,
 int logg,char* logfile,double gamma,size_t nsamp,vector randrisk,vector randreturn,
 size_t npoints=0,vector risks=0,vector rreturns=0,vector mask=0);
extern "C" void manyVars(size_t n,vector Q,vector x,vector AssetVars,
									 size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void ManyVarsD(size_t n,vector SV,vector x,vector AssetVars,size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void manyVarsX(size_t n,size_t nf,vector Q,vector x,vector AssetVars,
									 size_t nmask=0,size_t* masks=0,vector MaskVars=0);
extern "C" void dmxtmulv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void dmxmulv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void dmxtmultv(dimen n, dimen m, vector G, vector F, vector GFX);
extern "C" void BITA_dgemv(char *trans, size_t m, size_t n, double alpha, double *a, size_t lda, double *x, size_t incx, double beta, double *y, size_t incy);
extern "C" void SriskAttribution(size_t n,vector SSV,vector x,size_t nsect,
										   size_t* sectdef,vector Rctr,vector TRctr);
extern "C" void SvarianceAttribution(size_t n,vector SSV,vector x,size_t nsect,
										   size_t* sectdef,vector Rctr,vector TRctr);
extern "C" void FriskAttribution(size_t n,size_t nl,vector FFC,vector FLOAD,vector x,
										   size_t nsect,
										   size_t* sectdef,size_t ng,vector G,vector YS,
										   size_t nfgroup,size_t* fgroupdef,
										   size_t nggroup,size_t* ggroupdef,
										   vector TotalRisks,vector GlobalRisks,vector LocalRisks,
										   vector TotalBreak,vector GlobalBreak,vector LocalBreak);
extern "C" size_t FvarianceAttribution(size_t n,size_t nl,vector FFC,vector FLOAD,vector x,
										   size_t nsect,
										   size_t* sectdef,size_t ng,vector G,vector YS,
										   size_t nfgroup,size_t* fgroupdef,
										   size_t nggroup,size_t* ggroupdef,
										   vector TotalRisks,vector GlobalRisks,vector LocalRisks,
										   vector TotalBreak,vector GlobalBreak,vector LocalBreak,
										   int stdev=0,double*Mineg=0);

extern "C" void FexposureAttribution(size_t n,size_t nl,vector FLOAD,vector x,
											   size_t nsect,size_t* sectdef,size_t nfgroup,
											   size_t* fgroupdef,vector TotalExp,
											   vector TotalBreak);
extern "C" void MCTR_Beta(char** Modelnames,size_t mn,char** names,size_t n,size_t nf,
									vector FFC,vector FLOAD,vector SSV,vector w,vector benchmark,
									vector MMCTR,vector Bbeta);
extern "C" int SOCPopt1(size_t n,size_t m,size_t *md,vector c,vector A,vector b,vector w,
								 double delt=1e-2,double nu=10);
extern "C" int SOCPopt(size_t n,size_t m,size_t *md,vector c,vector A,vector b,vector w_opt,
double delt=1e-2,double nu=1.1,size_t maxiter=1000,double RR=2,double gapconv=1e-8,int log=0);
extern "C" int SOCPgenopt(size_t n,size_t m,size_t *md,vector c,vector A,vector b,
									vector w,size_t nb,vector z,double delt=1e-2,double nu=10,
									size_t maxiter=1000,double gapconv=1e-8,int log=0);
extern "C" void testSOCPinf();
extern "C" void SOCPinfeasHomogtDUMP(size_t n,size_t m,int *ncone,vector c,vector A,
										 vector b,vector x,vector y,vector s,double *tau,
										 double *kappa,size_t maxit,double beta,double delta,double ccomp=1e-6,
										 double cgap=1e-6,int signtest=0,double changeratio=4,
										 double rhoconv=1e-8,int log=0,char*outfile=0,char*SOCPdump=0);
extern "C" short SOCPinfeasHomogt(size_t n,size_t m,int *ncone,vector c,vector A,
										 vector b,vector x,vector y,vector s,double *tau,
										 double *kappa,size_t maxit=100,double beta=1e-8,double delta=.5,
										 double ccomp=1e-8,double cgap=1e-8,int signtest=0,
										 double changeratio=4.0,double rhoconv=1e-8,int log=0,
										 char*outfile=0,char*SOCPdump=0);
extern "C" void RootProcessQ(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQ(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQgram(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" void RootQold(size_t n,vector Q,vector RQ,vector RQm1);
extern "C" int fixA(size_t n,vector A,short_scl*p,int overite=0);
extern "C" void DroppingOut(size_t N,size_t n,vector Q,vector initial,double *modVar,
									  vector centre_shift);

extern "C" short SOCPlstest(size_t n,size_t m,vector w_opt,vector AAA,vector Q,
									 vector alpha,int full,double rmin,double rmax,
									 vector L,vector U,double val,double TopRisk,
									 vector dalpha,double MaxDalpha,size_t nabs,vector Abs_A,
									 vector Uabs,vector bench=0,vector initial=0);
extern "C" short SOCPRobust(size_t n,size_t m,vector w_opt,vector AAA,vector L,vector U,
									  long nf,vector SSV,vector FLOAD,vector FFC,vector alpha,
									  vector meanFE,vector covFE,double maxmeanFE,
									  double maxstderrorFE,double gamma,double maxRisk=-1,
									  vector bench=0,vector initial=0,int mFE=1,int rFE=1,
									  vector sectors=0);
extern "C" short SOCPlsRobust(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
									 vector alpha,int full,double rmin,double rmax,
									 vector L,vector U,double val,double TopRisk,
									 vector dalpha,double MaxDalpha,vector covalpha,double MaxValpha,
									 size_t nabs,vector Abs_A,
									 vector Uabs,vector bench,vector initialm,
									 vector initials,int signtest=0,int fast=0);
extern "C" short SOCPlsRobustl(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
										vector alpha,int full,double rmin,double rmax,
										vector L,vector U,double val,double TopRisk,
										vector dalpha,double MaxDalpha,vector covalpha,double MaxValpha,
										size_t nabs,vector Abs_A,vector Labs,
										vector Uabs,
										vector bench,vector initialm,vector initials,
										int signtest,int fast=0,int maxrobust=0,char*SOCPdump=0);
extern "C" short SOCPlsRobustlC(size_t n,size_t m,vector w_opt,vector AAA,
										long nf,vector SSV,vector FLOAD,vector FFC,
										vector alpha,int full,double rmin,double rmax,
										vector L,vector U,double val,double TopRisk,
										vector dalpha,double MaxDalpha,
										size_t nabs,vector Abs_A,vector Labs,
										vector Uabs,
										vector bench,vector initial,
										int signtest,int fast=0,int maxrobust=0,
										char*SOCPdump=0,size_t ncomp=0,vector Composites=0,
										double mintrade=-1);
extern "C" void Projection(size_t n,size_t m,vector A,vector x,vector s,vector M);
extern "C" void CovarianceInverter(size_t n,vector C,vector QFIX,vector y=0,vector Qm1d=0);
extern "C" void RankingConstraints(size_t n,vector Q,vector rank,vector A,long nf=-1,vector FL=0,
									vector SV=0);
extern "C" short SOCPRanked(size_t n,size_t m,vector w_opt,vector A,vector L,
									vector U,long nf,vector SV,vector FL,vector FC,
									vector alpha,double maxRisk,
									vector bench=0,int justalpha=0);
extern "C" int dsptrf(char *uplo, size_t n, double *ap, short_scl*
	ipiv);
extern "C" int dsptrs(char *uplo, size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyA(char *uplo, size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyrootA(size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" int applyinverserootA(size_t n, size_t nrhs, 
	double *ap, short_scl* ipiv, double *b, size_t ldb);
extern "C" void ReorderNames(size_t n, size_t* order,char** stocklist);
extern "C" short LPinterior(size_t n,size_t m,vector x,vector y,vector s,vector c,
			vector AAA,vector b,int*sign=0,int homo=1,vector L=0,double eps=1e-8,
			size_t nn=0,size_t mm=0,size_t ncnc=0,size_t nce=0,size_t nsns=0,
			size_t*cmap=0,size_t*ccmap=0,size_t*wmap=0,size_t*wwmap=0,
			pHmul Qxmul=0,void *Hinfo=0,vector Q=0,vector A=0);
extern "C" short QPopt(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,vector Q,pHmul Qwmul,void *Hinfo=0,
							  double eps=1e-8,double toobig=1e10,short homog=1);
extern "C" short LPopt(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,double eps=1e-8,double toobig=1e10,short homog=1);
extern "C" short QPbySeqLP(size_t n,size_t m,vector w_opt,vector c,vector AAA,
							  vector L,vector U,vector Q,pHmul Qwmul,void *Hinfo=0,
							  double lpeps=1e-8,double toobig=1e10,double qpeps=1e-5,short homog=1);
extern "C" short QPinterior(size_t n,size_t m,vector x,vector y,vector s,vector c,
			vector AAA,vector b,int*sign=0,int homo=1,vector L=0,double eps=1e-8,
			size_t nn=0,size_t mm=0,size_t ncnc=0,size_t nce=0,size_t nsns=0,
			size_t*cmap=0,size_t*ccmap=0,size_t*wmap=0,size_t*wwmap=0,
			pHmul Qxmul=0,void *Hinfo=0,vector Q=0,vector A=0);
extern "C" void	facmul(size_t n,size_t nf,double *H,vector x,vector w_opt);
extern "C" void	facmuli(size_t n,size_t nf,double *H,vector x,vector w_opt);
extern "C" void FastInverseFactorModelProcess(size_t n,size_t nf,vector FLOAD,vector FFC,vector SSV,vector QMATRIX);
extern "C" void MakeUU(size_t n,vector M,vector UU);
extern "C" void fastInverse(size_t n,vector M,vector DIAG,vector x,vector y);
extern "C" short OmegaOpt(size_t n,size_t tlen,double*DATA,char** stocknames,vector w_opt,
			double C,double R,double Low=0,double*Gain=0,double*Loss=0,int log=0);
extern "C" double FindR(size_t n,size_t tlen,double*DATA,char** stocknames,
								 double Low);
extern "C" short RobustOpt(size_t n,size_t m,vector w_opt,vector alpha,vector A,
				vector L,vector U,
				int full,double rmin,double rmax,double val,
				size_t nabs,vector Aabs,vector Labs,vector Uabs,
				int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
				vector centres,size_t ncomp=0,vector Composites=0,int fillin=1);
extern "C" short RobustOptU(size_t n,size_t m,vector w_opt,vector alpha,vector A,
				vector L,vector U,
				int full,double rmin,double rmax,double val,
				size_t nabs,vector Aabs,vector Labs,vector Uabs,
				int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
				vector centres,size_t ncomp=0,vector Composites=0,int fillin=1,vector Ualpha=0);
extern "C" void QuadCVals(size_t n,vector w,vector alpha,double*areturn,size_t nquad,int*qtype,vector cov,vector Uq,
									 vector centres,vector U,
									 size_t ncomp=0,vector Composites=0,int fillin=1);
extern "C" void IncreaseL(size_t n,size_t m,size_t ncomp,vector L,vector Composites);
extern "C" short OmegaSVOpt(size_t n,size_t tlen,double*DATA,char** stocknames,vector w_opt,
									double C,double R,double Low,double*Gain,double*SVar,int log);
extern "C" short OmegaGeneral(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double R,vector L,vector U,vector AAA,double*Top,double*Bot,
									double*Prob,int log=0,
									int useSV=0,char*outfile=0,double gpower=1.0,double lpower=1.0);
extern "C" short OmegaGeneralP(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double p,vector L,vector U,vector AAA,
									double*Top,double*Bot,double* Prob,double*Rbase,
									int log=0,int useSV=0,char*outfile=0);
extern "C" void OmegaGeneralPDump(size_t n,size_t tlen,size_t m,double*Omega_DATA,char** stocknames,vector w_opt,
									double C,double p,vector L,vector U,vector AAA,
									double*Top,double*Bot,double* Prob,double*Rbase,
									int log=0,int useSV=0,char*outfile=0);
extern "C" void OmegaProps(size_t n,size_t tlen,vector Omega_DATA,
									 vector w,double R,double* Prob,
									 double* Top,double* Bot,vector gains,
									 vector losses,vector isolated_gains=0,vector isolated_losses=0);
extern "C" short QPbySOCP(size_t n,size_t m,vector w_opt,vector A,vector L,vector U,
						  vector alpha,vector Q,vector S,double tRad);
extern "C" void OmegaH(size_t n,size_t tlen,vector DATA,vector w,double R,double*Omega,vector Grad,vector H);
extern "C" void clean_w(size_t n,vector w);
extern "C" double trace(size_t n,vector Q);
extern "C" short anneal(size_t n,vector w_opt,vector L,vector U,vector step,
								  pUtility calcfx,void*info,double t=5.0,double rt=.5,int ns=20);
extern "C" void ThetaMulti(size_t n,long nfac,size_t m,char**stocknames,size_t T,vector alpha,vector benchmark,
vector Initial,vector gamma,vector delta,vector L,vector U,vector A,vector FC,vector FL,vector SV,vector d,vector Th);
extern "C" void Lsmooth(size_t n,size_t  m,vector w_opt,vector a,vector A,vector b,double gamma=1,double eps=1e-6,int*sign=0,vector L=0,vector Q=0,size_t nfac=0,vector FL=0,vector FC=0,vector SV=0);
extern "C" void SemiVar(size_t n,size_t tlen,vector Omega_DATA,
									 vector w,double R,double* Prob,
									 double* Top,double* areturn,double* Bot);
extern "C" short GeneralLongOpt(size_t n,size_t m,char**stocknames,vector w_opt,vector AAA,vector L,vector U,
	pUtility f_val,pModC g_val,pModQ h_val,void *fvinfo,void *gvinfo,void *hvinfo,int log=0);
extern "C" short LPhelper(size_t n,size_t m,vector w_opt,vector AAA,vector c,vector L,vector U,int log=1,char*logfile=0);
extern "C" short LPgeneral(size_t n,size_t m,vector w_opt,vector AAA,vector c,vector L,vector U,size_t nabs,
									 vector Aabs,vector Labs,vector Uabs,vector initial,vector buy,vector sell,
									 double delta,double LVU=-1,double LVL=-1,double rmin=-1,double rmax=-1,int log=1,char*logfile=0,
									 double rmin_base=-1,double rmax_base=-1);
extern "C" void RobustOptDump(size_t n,size_t m,vector w,vector alpha,vector A,
									 vector L,vector U,
									 int full,double rmin,double rmax,double val,
									 size_t nabs,vector Aabs,vector Labs,vector Uabs,
									 int signtest,size_t nquad,int*qtype,vector cov,vector Uq,
									 vector centres,size_t ncomp,vector Comps,int fillin,char*outfile);
extern "C" short LPFullNewton(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector b,double xci=1,double tau=0.125,double eps=0);
extern "C" short LPbySOCPp(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector b);
extern "C" short LPbySOCP(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector L,vector U);
extern "C" short LPstraight(size_t n,size_t m,vector w_opt,vector c,vector AAA,vector L,vector U);
extern "C" short GainLossOpt(size_t n,size_t tlen,double*DATA,double*R,double C,double llambda,vector w_opt,size_t m,double*L,double*U,vector AAA,double gpower=1,double lpower=1,
									char**stocknames=0,double*alpha=0,long nf=-1,double*SV=0,double*FC=0,double*FL=0);
extern "C" short GainLossOptGen(size_t n,size_t tlen,double*DATA,double*R,double C,double llambda,vector w_opt,size_t m,double*L,double*U,vector AAA,double gpower=1,double lpower=1,
									char**stocknames=0,double*alpha=0,long nf=-1,double*SV=0,double*FC=0,double*FL=0);
extern "C" short  GLOptimise(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L);
extern "C" short  GLOptimiseR(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double*gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" short  GLOptimiseRC(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double C,double lambda,
				  double gpower,double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,int costs,double kappa,vector buy,vector sell,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double*gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" void GLProp(dimen n,char** stocknames,size_t tlen,double*DATA,double*R,
								 double gpower,double lpower,double*prob,double*Gain,double*Loss,vector w,vector MargGain,vector MargLoss);
extern "C" short_scl bunchf(short_scl n,double*C,short_scl*piv);
extern "C" short  MVLOptimise(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L);
extern "C" short  MVLOptimiseg(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									real min_holding,real min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double* gammaback);
extern "C" short  MVLOptimiseR(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double* gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" short  MVLOptimiseRC(dimen n,long nfac,char** stocknames,size_t tlen,double*DATA,double*R,double lambda,
				  double lpower,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector Q,real gamma,vector initial,
									real delta,long basket,long trades,int revise,int costs,double kappa,vector buy,vector sell,
									vector min_holding,vector min_trade,int m_LS,int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,vector FC,vector FL,vector SV,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minRisk,double maxRisk,double* gammaback,double five=-1,double ten=-1,double forty=-1,int*issues=0);
extern "C" void GLO_internal_model(size_t n,size_t tlen,double*DATA,vector QBACK,vector alphaback);
extern "C" short CvarOptimise(size_t n,size_t tlen,double*DATA,size_t number_included,double CVar_averse,double getRisk,
				   char** stocknames,vector w_opt,size_t m,vector AAA,vector L,vector U,vector alpha,vector benchmark,
		vector Q,double gamma,vector initial,double delta,long basket,long trades,int revise,
		vector min_holding,vector min_trade,int m_LS,int Fully_Invested,double Rmin,double Rmax,int round,vector min_lot,vector size_lot,int*shake,
		double LSValue,size_t nabs,vector Abs_A,size_t mabs,dimen* I_A,
		vector Abs_U,double*ogamma,vector mask,int log,
		char* logfile,long longbasket,long shortbasket,double LSValuel,vector Abs_L);
extern "C" short CvarOptimiseC(size_t n,size_t tlen,double*DATA,size_t number_included,double CVar_averse,double getRisk,
				   char** stocknames,vector w_opt,size_t m,vector AAA,vector L,vector U,vector alpha,vector benchmark,
		vector Q,double gamma,vector initial,double delta,long basket,long trades,int revise,
		vector min_holding,vector min_trade,int m_LS,int Fully_Invested,double Rmin,double Rmax,int round,vector min_lot,vector size_lot,int*shake,
		double LSValue,size_t nabs,vector Abs_A,size_t mabs,dimen* I_A,
		vector Abs_U,double*ogamma,vector mask,int log,
		char* logfile,long longbasket,long shortbasket,double LSValuel,vector Abs_L,int costs,vector buy,vector sell,int CVar_constraint,
		double CVarMin,double CVarMax);
extern "C" double SemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark=0);
extern "C" void GradSemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark,vector gback);
extern "C" void HessSemiVariance(size_t n,size_t tlen,double*DATA,vector w,vector benchmark,vector QBACK);
extern "C" short  SemiVarOptimise(dimen n,char** stocknames,size_t tlen,double*DATA,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,
									int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minSV=-1,double maxSV=-1,
									double* gammaback=0,double five=-1,double ten=-1,double forty=-1,
									int*issues=0);
extern "C" short  SemiVarOptimiseT(dimen n,char** stocknames,size_t tlen,double*DATA,
				  vector w_opt,dimen m,vector AAA,vector L,vector U,vector alpha,
									vector benchmark,real gamma,vector initial,
									real delta,long basket,long trades,int revise,
									vector min_holding,vector min_trade,int m_LS,
									int Fully_Invested,real Rmin,real Rmax,
									real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,
									vector Abs_U,
									vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									double LSValuel,vector Abs_L,double minSV=-1,double maxSV=-1,
									double* gammaback=0,double five=-1,double ten=-1,double forty=-1,
									int*issues=0);
extern "C" double CVarValue(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" void  CVarGrad(size_t n,size_t tlen,double*DATA,size_t number_included,vector w,vector grad);
extern "C" double CVarValueO(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" double CVarValuen(size_t n,size_t tlen,double*DATA,size_t number_included,vector w);
extern "C" short OptCVar(dimen nstocks,dimen m,dimen t,double beta,vector w_opt,vector DATA,vector lower,vector upper,vector A,int log=0,double*CVaR=0,double*VaR=0);
extern "C" short OptGL(dimen nstocks,dimen m,dimen t,vector R,vector w_opt,vector DATA,vector lower,vector upper,vector A,double C,int log=0,double*Gain=0,double *Loss=0);
extern "C" int AQAmake(size_t n,size_t m,vector A,vector Q,vector X,vector S,vector MAT);
extern  "C" int FixedAtEnd(size_t n,vector L,vector U,size_t *order);
extern "C" short SOCPportfolio(size_t n,size_t m,vector w_opt,vector L,vector U,vector AAA,vector alpha,
		vector benchmark=0,vector initial=0,vector buy=0,vector sell=0,int costs=0,double delta=-1,
		double psum=-1,double psumL=-1,double nsum=1,double nsumU=-1,double rmax=-1,double rmin=-1,
		size_t mabs=0,vector A_abs=0,vector L_abs=0,
		vector U_abs=0,vector FC=0,long nfac=-1,vector FL=0,vector SV=0,double maxrisk=-1,double maxarisk=-1,
		int meanstd=0,double meanstdl=0,double*lambda1=0,double* lambda2=0,double* lambda3=0,double*optvalue=0,
		char*inputData=0,int log=1,char*logfile=0,vector min_trade=0,vector min_hold=0,long basket=-1,long trades=-1,
		vector minlot=0,vector sizelot=0,double five=-1,double ten=-1,double forty=-1,int* issues=0);
extern "C" void getmacaddress();
extern "C" int remtime();
extern "C" short  Optimise_Entropy(dimen n,long nfac,char** stocknames,vector w_opt,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real gamma,real kappa,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Composite,real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,vector Abs_U,
									vector FFC,vector FLOAD,vector SSV,double minRisk,double maxRisk,
									double* ogamma,vector mask,int log,char* logfile,
									long longbasket,long shortbasket,
									long tradebuy,long tradesell,
									double LSValuel,vector Abs_L);
extern "C" void	EntropyUtility(dimen n,long nfac,char** stocknames,vector w,
									  vector benchmark,vector initial,
									  vector Q,real gamma,real kappa,
									  vector alpha,real *tcost,real *utility,
									  vector gradutility,
									  dimen ncomp,
									  vector Composite);
extern "C" short  Optimise_EntropyU(dimen n,long nfac,char** stocknames,vector w_opt,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real MVlambda,real entropy_gamma,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_LS,int Fully_Invested,real Rmin,real Rmax,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									dimen ncomp,vector Composite,real LSValue,
									dimen nabs,vector Abs_A,dimen mabs,dimen* I_A,vector Abs_U,
									vector FFC,vector FLOAD,vector SSV,double MVUmin,double MVUmax,
									double* ogamma,vector mask,int lg,char* logfile,
									long longbasket,long shortbasket,
									long tradebuy,long tradesell,
									double LSValuel,vector Abs_L);
extern "C" short OptimiseCrossEntropy(dimen n,long nfac,char** stocknames,vector w_out,dimen m,
									vector AAA,vector L,vector U,vector alpha,
									vector benchmark,vector QMATRIX,real MVlambda,real entropy_gamma,vector initial,
									real delta,long basket,
									long trades,int revise,vector min_holding,
									vector min_trade,
									int m_Round,vector min_lot,vector size_lot,int* shake,
									vector FFC,vector FLOAD,vector SSV,double MVUmin,double MVUmax,
									double* ogamma,vector mask,int lg,char* logfile);
extern "C" void SDPsvec(size_t n,vector S,vector v);
extern "C" void SDPsMat(size_t n,vector v,vector S);
extern "C" int nullA(size_t m,size_t n,double *A,double*Z);
extern "C" short LPQN(size_t n,size_t m, vector w_opt,vector A,vector b,vector c);
extern "C" short GAUSS_NEWTON_Optimiser(size_t ncone,size_t*cone,size_t*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,vector c);
extern "C" void packed2symm(Integer n,double*a);
extern "C" void symm2packed(Integer n,double*a);
extern "C" short Conic_General(size_t ncone,int*cone,int*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,vector c,vector tau,vector kappa,double comptoll=1e-8,double gaptoll=1e-8,double stepmax=2e-2,int straight=0,int fastbreak=1,int log=0,char*outfile=0,int method=0);
extern "C" void get_w(size_t n,vector s,vector x,vector w);
extern "C" void WtransSDP(size_t n,vector A,vector w,vector WA,bool inv=false,bool squared=false);
extern "C" void applyXSDP(size_t n,vector x,vector a,vector xa);
extern "C" void applyXm1SDP(size_t n,vector x,vector a,vector xa);
extern "C" void SDPsymm2MCAR(size_t n,size_t nc,vector Q,vector A);
extern "C" void factor_model_process_inverse(dimen n,dimen nfac,vector Q,vector QMATRIX);
extern "C" void facmul_and_inv(dimen n,dimen nfac,vector Q,vector x,vector w_opt,int inv=0);
extern "C" double small_round(double eps);
extern "C" void make_indexM(Integer n,double*a,Integer*ia,Integer*ja,Integer*zerorank=0);
extern "C" int pull_BITA(Integer *n,double *dn,Integer *iju,Integer *ju,Integer *iu,double *un,Integer *il,Integer *jl,double *x,double *tolpiv,Integer *flag__,double *sign,Integer*pivot_nzp,Integer*pivot_nju);
extern "C" int sns_BITA(Integer *n,Integer *p,double *d__,Integer *iju,Integer *ju,Integer *iu,double *u,double *z__,double *b,double *tmp,Integer*pivot_nzp,Integer*pivot_nju);
extern "C" int ssf_BITA(Integer *mua,Integer *n,Integer *p,Integer *ip,Integer *ia,Integer *ja,
			Integer *iju,Integer *ju,Integer *iu,Integer *jumax,Integer *q,Integer *jl,
			Integer *flag__,Integer *lenju,Integer *lenu);
extern "C"	void A2U(Integer n,Integer*iu,Integer*ju,Integer*iju,double*a,double*U,Integer*p);
extern "C" void UseSparseCh(Integer n,double* M,double*b);
extern "C" short Conic_VeryGeneral(size_t ncone,int*cone,int*typecone,size_t m,vector x,vector s,vector y,vector A,vector b,
										 vector c,vector tau,vector kappa,double comptoll,double gaptoll,double stepmax,int straight,int fastbreak,
										 int log,char*outfile,int method,int homog,long nf,vector SV,vector FL,vector FC,size_t fcone);
extern "C" void	lowrank_facmul_and_inv(dimen n,dimen nfac,vector LL,vector A,vector x,vector y,int inv=0,short_scl*Apiv=0);
extern "C" void process_lowrank_plus_symm_inverse(dimen n,dimen nfac,vector LL,vector A,vector LLm1,short_scl*Apiv);
extern "C" void W2trans(size_t ncone,vector A,vector w,vector W2A);
extern "C" void Wtrans(size_t ncone,vector A,vector w,vector WA);
extern "C" void SDPwsymm2MCAR(size_t n,size_t nc,double wc,vector Q,vector A);
extern "C" void SDPvec2MCAR(size_t n,size_t nc,vector Qnci,vector A);
extern "C" short RiskParityOpt(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,double*lambda,int longonly=0,
										 int*rank=0,int do_parity=1,int fastbreak=0,int link_extra=0,int alpha_extra=0,double*sos_check=0,double budget=1);
extern "C" short RiskParitySolveF(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,vector first=0,size_t nasme=0,double*conc=0,int BFGS=0,int DiffGrad=0);
extern "C" short RiskParitySolve(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,int BFGS=0,int DiffGrad=0);
extern "C" short RiskParitySolve2(dimen n,dimen nsect,long nf,vector w_opt,vector alpha,
										 vector sectors,vector SV,vector FC,vector FL,double*conc,int BFGS=0,int DiffGrad=0,int seq=0,double lower=0.0,double gamma=0.0);
extern "C" short SharpOpt(dimen n,dimen m,long nfac,vector w_opt,vector benchmark,vector alpha,vector L,vector U,
											vector A,vector FC,vector SV,vector FL,int no_opt=0,int BFGS=0,int DiffGrad=0,int log=0);
extern "C" short OptimiseGeneral(dimen n,vector w_opt,dimen m,vector AAA,vector L,vector U,vector c,vector H,pUtility Gen_U=0,pModC Gen_Grad=0,pModQ Gen_Hess=0,
	void *Gen_U_Info=0,void *Gen_Grad_info=0,void *Gen_Hess_info=0);
extern "C" int CanCastAsInteger(double *d, double xmin, double xmax);
extern "C" int dgetrf_BITA(Integer *m, Integer *n, double *a, Integer *
	lda, Integer *ipiv, Integer *info);
extern "C"  int dgetri_BITA(Integer *n, double *a, Integer *lda, Integer 
	*ipiv, double *work, Integer *lwork, Integer *info);
extern "C" int dgetrs_BITA(char *trans, Integer *n, Integer *nrhs, 
	double *a, Integer *lda, Integer *ipiv, double *b, Integer *
	ldb, Integer *info);
extern "C" short Accumulation5_10_40(void*ACCinfo,dimen basket,dimen trades,int way);
extern "C" double EndRound(double a);
extern "C" short OptimiseGeneralBarrier(dimen n,vector x,vector y,vector z,dimen m,vector A,vector b,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double nu=1000,double mudec=.5,double beta=.9,double e0=.001,int*iter=0);
extern "C" short OptimiseNLC(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,double nu=100,double mudec=.96,double Mc=1000.0,double mexp=1.267,double shape=0,int*iter=0,int iprint=0,int conventional=0);
extern "C" short OptimiseNLC1(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,int*iter=0,int iprint=0,double rho=0.9,double theta=10.0,double nu=1.0,double stepmin=0.2);
extern "C" short OptimiseNLC_Seq(dimen n,vector x,vector y,vector z,dimen m,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,double tol=1e-11,int*iter=0,int iprint=0,double nu=1.0,vector lower=0,vector upper=0);
extern "C" short gramS(dimen n,vector Q,vector basevectors,vector basevalues,bool* sparse=0);
extern "C" void inverseT(dimen n,vector e,vector basevectors);
extern "C" void solveT(dimen n,vector e,vector x);
extern "C" void solveTt(dimen n,vector e,vector x);
extern "C" void multT(dimen n,vector e,vector x);
extern "C" void multTt(dimen n,vector e,vector x);
extern "C" bool FixGram(dimen n,vector QFIX);
extern "C" size_t Arnoldi(dimen n,vector A,vector q,vector H=0,int transpose=0);
extern "C" void pattern6(size_t n, vector w_opt, double *f, 
	vector g, vector hess, pUtility calcfx, void*info,vector w, double 
	dfn, vector xm, double hh, double eps, unsigned long mode, 
	unsigned long maxfn, unsigned long iprint, int*iexit,int repeat);
extern "C" void setunitHess(size_t n,vector H);
extern "C" size_t findzero(size_t n,vector w);
extern "C" bool parity_check(size_t n,long nfac,vector w,vector alpha,vector Q,vector FL,vector FC,vector SV,size_t nsect=0,vector sectors=0);
extern "C" short OptimiseNLCAL(dimen n,vector w,dimen m,vector A,dimen mAL,pConstraintFunc Bar_Ab=0,void* Abinfo=0,pUtility Bar_U=0,pModC Bar_Grad=0,pModQ Bar_Hess=0,
void *Bar_U_Info=0,void *Bar_Grad_Info=0,void *Bar_Hess_Info=0,vector L=0,vector U=0);



SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_NUMBER_VALUE(obj);

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) SWIGV8_INTEGER_VALUE(obj);

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = SWIGV8_INTEGER_VALUE(valRef);

  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long long longVal = (long long) SWIGV8_NUMBER_VALUE(obj);

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


SWIGINTERN int
SWIG_AsVal_short (v8::Handle<v8::Value> obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = SWIGV8_TO_STRING(valRef);

    size_t len = SWIGV8_UTF8_LENGTH(js_str) + 1;
    char* cstr = new char[len];
    SWIGV8_WRITE_UTF8(js_str, cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = SWIGV8_TO_OBJECT(valRef);
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long_SS_long  (long long value)
{
  return SWIGV8_NUMBER_NEW(value);
}
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = SWIGV8_BOOLEAN_VALUE(obj);
  return SWIG_OK;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#define SWIGV8_INIT safe_initialize


SWIGV8_ClientData _exports_Base_Optimise_clientData;
SWIGV8_ClientData _exports_Optimise_clientData;
SWIGV8_ClientData _exports_FOptimise_clientData;


static SwigV8ReturnValue _wrap_MCAR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  unsigned long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MCAR.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MCAR" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MCAR" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MCAR(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FX_get(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  unsigned long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FX_get.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FX_get" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FX_get" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  FX_get(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SimpleOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned long arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  double *arg15 = (double *) 0 ;
  double arg16 ;
  double arg17 ;
  double arg18 ;
  double arg19 ;
  double arg20 ;
  char **arg21 = (char **) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned long val9 ;
  int ecode9 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  short result;
  
  if(args.Length() != 21) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SimpleOpt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SimpleOpt" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleOpt" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SimpleOpt" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SimpleOpt" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_unsigned_SS_long(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SimpleOpt" "', argument " "9"" of type '" "unsigned long""'");
  } 
  arg9 = static_cast< unsigned long >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SimpleOpt" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SimpleOpt" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SimpleOpt" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SimpleOpt" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "SimpleOpt" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SimpleOpt" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  {
    arg21 = 0;
    
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()){
        arg21 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg21[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  result = (short)SimpleOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg21[i]));
      }
    }
  }
  
  
  
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  
  
  
  
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_testchars(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  char **arg3 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_testchars.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "testchars" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  testchars(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_test2dlist(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_test2dlist.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "test2dlist" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "test2dlist" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  test2dlist(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Sym_mult(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Sym_mult.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Sym_mult" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Sym_mult(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GetOrder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  double *arg2 = (double *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  int arg4 = (int) 0 ;
  unsigned char *arg5 = (unsigned char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GetOrder.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetOrder" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GetOrder" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  res5 = SWIG_ConvertPtr(args[4], &argp5,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "GetOrder" "', argument " "5"" of type '" "unsigned char *""'"); 
  }
  arg5 = reinterpret_cast< unsigned char * >(argp5);
  GetOrder(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PatternMin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  short arg8 = (short) 1 ;
  unsigned long arg9 = (unsigned long) 20 ;
  short arg10 = (short) 2 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  short val8 ;
  int ecode8 = 0 ;
  unsigned long val9 ;
  int ecode9 = 0 ;
  short val10 ;
  int ecode10 = 0 ;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PatternMin.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PatternMin" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PatternMin" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "PatternMin" "', argument " "6"" of type '" "pUtility""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PatternMin" "', argument " "6"" of type '" "pUtility""'");
    } else {
      arg6 = *(reinterpret_cast< pUtility * >(argp6));
    }
  }
  {
    
  }
  ecode8 = SWIG_AsVal_short(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PatternMin" "', argument " "8"" of type '" "short""'");
  } 
  arg8 = static_cast< short >(val8);
  ecode9 = SWIG_AsVal_unsigned_SS_long(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PatternMin" "', argument " "9"" of type '" "unsigned long""'");
  } 
  arg9 = static_cast< unsigned long >(val9);
  ecode10 = SWIG_AsVal_short(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PatternMin" "', argument " "10"" of type '" "short""'");
  } 
  arg10 = static_cast< short >(val10);
  PatternMin(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dumpvec(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  char *arg4 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dumpvec.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dumpvec" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dumpvec" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dumpvec" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  dumpvec(arg1,(char const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    //We musn't free this arg3 input=args[2] arg=$arg result=$result
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dumpsvec(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  char *arg4 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dumpsvec.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dumpsvec" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dumpsvec" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "dumpsvec" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  dumpsvec(arg1,(char const *)arg2,arg3,(char const *)arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ReorderS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReorderS.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReorderS" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ReorderS(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ReorderSquare(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReorderSquare.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReorderSquare" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ReorderSquare(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reorder(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reorder.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Reorder" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Reorder(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Reorder_mult(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Reorder_mult.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Reorder_mult" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Reorder_mult" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  Reorder_mult(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getBIMcov(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getBIMcov.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getBIMcov" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getBIMcov" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  getBIMcov(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_procBIMcov(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_procBIMcov.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procBIMcov" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procBIMcov" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procBIMcov" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  procBIMcov(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_procBIMmod(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_procBIMmod.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "procBIMmod" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "procBIMmod" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(args[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "procBIMmod" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(args[3], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "procBIMmod" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(args[4], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "procBIMmod" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  procBIMmod(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_digitise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_digitise.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "digitise" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  digitise(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_roundcount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_roundcount.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "roundcount" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = roundcount(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fix_covariancem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fix_covariancem.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fix_covariancem" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)fix_covariancem(arg1,arg2);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_InvQ_d(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  short result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_InvQ_d.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "InvQ_d" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)InvQ_d(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ConstrRegress(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ConstrRegress.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ConstrRegress" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConstrRegress" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)ConstrRegress(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pickout(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  dimen arg3 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pickout.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pickout" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pickout" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)pickout(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pickoutstrings(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  dimen arg3 ;
  char **arg4 = (char **) 0 ;
  char **arg5 = (char **) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pickoutstrings.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pickoutstrings" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pickoutstrings" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg5 = 0;
    
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()){
        arg5 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg5[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)pickoutstrings(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Return_Message(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Return_Message.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Return_Message" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (char *)Return_Message(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MultiStageMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MultiStageMessage.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MultiStageMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (char *)MultiStageMessage(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPlstestMessage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPlstestMessage.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPlstestMessage" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  result = (char *)SOCPlstestMessage(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_eigendecomp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  dimen arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  short result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_eigendecomp.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "eigendecomp" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "eigendecomp" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  result = (short)eigendecomp(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dldlfactNULL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dldlfactNULL.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dldlfactNULL" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  dldlfactNULL(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_expire_date(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_expire_date.");
  
  {
    arg1=new char[500];//asetup
  }
  result = (char *)expire_date(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  delete[] result;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_version(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_version.");
  
  {
    arg1=new char[500];//asetup
  }
  result = (char *)version(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  delete[] result;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cversion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cversion.");
  
  {
    arg1=new char[500];//asetup
  }
  result = (char *)cversion(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  delete[] result;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_component_key(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_component_key.");
  
  {
    arg1=new char[500];//asetup
  }
  result = (char *)component_key(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  delete[] result;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_days_left(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_days_left.");
  
  {
    arg1 = 0;
    
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()){
        arg1 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg1[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  result = (int)days_left(arg1);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg1[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Extract_Factor_Information(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  char **arg6 = (char **) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  char **arg9 = (char **) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Extract_Factor_Information.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Extract_Factor_Information" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Extract_Factor_Information" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Extract_Factor_Information" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()){
        arg6 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg6[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()){
        arg9 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg9[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  Extract_Factor_Information(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg9[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CurrencyProcessFL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CurrencyProcessFL.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CurrencyProcessFL" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CurrencyProcessFL" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  CurrencyProcessFL(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_winsorise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_winsorise.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "winsorise" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "winsorise" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "winsorise" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  winsorise(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_percentile(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_percentile.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "percentile" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "percentile" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  result = (double)percentile(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_average(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_average.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "average" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)average(arg1,arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_stddev(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_stddev.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "stddev" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)stddev(arg1,arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_covariance1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double *arg1 = (double *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_covariance1.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "covariance1" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  result = (double)covariance1(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mAve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mAve.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mAve" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mAve" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mAve" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mAve(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mSum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mSum.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mSum" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mSum" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mSum" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mSum(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mProd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mProd.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mProd" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mProd" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mProd" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mProd(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mCovar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  double *arg6 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mCovar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mCovar" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mCovar" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mCovar" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = static_cast< unsigned long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mCovar(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mCorrel(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  unsigned long arg5 ;
  double *arg6 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned long val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mCorrel.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mCorrel" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mCorrel" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mCorrel" "', argument " "5"" of type '" "unsigned long""'");
  } 
  arg5 = static_cast< unsigned long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mCorrel(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mVar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mVar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mVar" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mVar" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mVar" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mVar(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mStddev(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_mStddev.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mStddev" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mStddev" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mStddev" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  mStddev(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cAve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cAve.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cAve" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cAve" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cAve(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cSum(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cSum.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cSum" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cSum" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cSum(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cProd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cProd.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cProd" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cProd" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cProd(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cCovar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cCovar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cCovar" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cCovar" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cCovar(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cCorrel(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long arg4 ;
  double *arg5 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cCorrel.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cCorrel" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_long(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cCorrel" "', argument " "4"" of type '" "unsigned long""'");
  } 
  arg4 = static_cast< unsigned long >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cCorrel(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cVar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cVar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cVar" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cVar" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cVar(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_cStddev(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  unsigned long arg3 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_cStddev.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "cStddev" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cStddev" "', argument " "3"" of type '" "unsigned long""'");
  } 
  arg3 = static_cast< unsigned long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  cStddev(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_prodArrays(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_prodArrays.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "prodArrays" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  prodArrays(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_wAve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_wAve.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wAve" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)wAve(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_wAveProd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_wAveProd.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wAveProd" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)wAveProd(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_wCovar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_wCovar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "wCovar" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)wCovar(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ddotvec(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned long arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ddotvec.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ddotvec" "', argument " "1"" of type '" "unsigned long""'");
  } 
  arg1 = static_cast< unsigned long >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)ddotvec(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_genmult(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_genmult.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "genmult" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "genmult" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  genmult(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getFSF(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getFSF.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getFSF" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getFSF" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  getFSF(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DOT(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DOT.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DOT" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)DOT(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_combineS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_combineS.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "combineS" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  combineS(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_symm_inverse_x(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_symm_inverse_x.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "symm_inverse_x" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  symm_inverse_x(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vec2symm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vec2symm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vec2symm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  vec2symm(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_symmsymm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_symmsymm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "symmsymm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  symmsymm(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Sinv_X(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Sinv_X.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Sinv_X" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Sinv_X(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_A1MA2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_A1MA2.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "A1MA2" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)A1MA2(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_square2symm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_square2symm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "square2symm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  square2symm(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_square2sqsymm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_square2sqsymm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "square2sqsymm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  square2sqsymm(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_gensymm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_gensymm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gensymm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  gensymm(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Sinv_M(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Sinv_M.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Sinv_M" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Sinv_M(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AdotSiAX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AdotSiAX.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AdotSiAX" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)AdotSiAX(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AdotSi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AdotSi.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AdotSi" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)AdotSi(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SiAX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SiAX.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SiAX" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SiAX(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Sisymm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Sisymm.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Sisymm" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Sisymm(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptSemi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptSemi.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptSemi" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptSemi" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptSemi(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptSemiGen(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t arg7 = (size_t) 100 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val7 ;
  int ecode7 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptSemiGen.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptSemiGen" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptSemiGen" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_size_t(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OptSemiGen" "', argument " "7"" of type '" "size_t""'");
  } 
  arg7 = static_cast< size_t >(val7);
  result = (short)OptSemiGen(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_vecvec2symmat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_vecvec2symmat.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "vecvec2symmat" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  vecvec2symmat(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Amake(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double arg4 ;
  vector arg5 = (vector) 0 ;
  double arg6 = (double) 10.0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Amake.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Amake" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Amake" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Amake" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  Amake(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptFundClass(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  double arg4 ;
  double arg5 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 0.25 ;
  int arg8 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  short result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptFundClass.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptFundClass" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptFundClass" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OptFundClass" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptFundClass" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OptFundClass" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OptFundClass" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  result = (short)OptFundClass(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Factor2Cov(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Factor2Cov.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Factor2Cov" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor2Cov" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Factor2Cov(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Factor2Var(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Factor2Var.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Factor2Var" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Factor2Var" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Factor2Var(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_opt_fix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  int arg4 = (int) 0 ;
  double arg5 = (double) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  int result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_opt_fix.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "opt_fix" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "opt_fix" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "opt_fix" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (int)opt_fix(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_eig_fix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_eig_fix.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "eig_fix" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)eig_fix(arg1,arg2);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_quad_fix(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_quad_fix.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quad_fix" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)quad_fix(arg1,arg2,arg3);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_basic_factor_global_local_attribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  double *arg22 = (double *) 0 ;
  int arg23 = (int) 0 ;
  vector arg24 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val23 ;
  int ecode23 = 0 ;
  
  if(args.Length() != 24) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_basic_factor_global_local_attribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "basic_factor_global_local_attribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basic_factor_global_local_attribution" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "basic_factor_global_local_attribution" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode23 = SWIG_AsVal_int(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "basic_factor_global_local_attribution" "', argument " "23"" of type '" "int""'");
  } 
  arg23 = static_cast< int >(val23);
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  basic_factor_global_local_attribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_basic_factor_global_local_attribution1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  double *arg19 = (double *) 0 ;
  int arg20 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  
  if(args.Length() != 20) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_basic_factor_global_local_attribution1.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "basic_factor_global_local_attribution1" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "basic_factor_global_local_attribution1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "basic_factor_global_local_attribution1" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "basic_factor_global_local_attribution1" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  basic_factor_global_local_attribution1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_xCx(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_xCx.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xCx" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)xCx(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_gausspdf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 = (double) 0 ;
  double arg2 = (double) 1 ;
  size_t arg3 = (size_t) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_gausspdf.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gausspdf" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "gausspdf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "gausspdf" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (double)gausspdf(arg1,arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_resampfront(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  dimen arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  int arg13 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  dimen arg17 ;
  vector arg18 = (vector) 0 ;
  int arg19 ;
  char *arg20 = (char *) 0 ;
  double arg21 ;
  size_t arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  size_t arg25 = (size_t) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  unsigned int val17 ;
  int ecode17 = 0 ;
  int val19 ;
  int ecode19 = 0 ;
  int res20 ;
  char *buf20 = 0 ;
  int alloc20 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  size_t val22 ;
  int ecode22 = 0 ;
  size_t val25 ;
  int ecode25 = 0 ;
  
  if(args.Length() != 28) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_resampfront.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "resampfront" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "resampfront" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "resampfront" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "resampfront" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "resampfront" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_unsigned_SS_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "resampfront" "', argument " "17"" of type '" "dimen""'");
  } 
  arg17 = static_cast< dimen >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_int(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "resampfront" "', argument " "19"" of type '" "int""'");
  } 
  arg19 = static_cast< int >(val19);
  res20 = SWIG_AsCharPtrAndSize(args[19], &buf20, NULL, &alloc20);
  if (!SWIG_IsOK(res20)) {
    SWIG_exception_fail(SWIG_ArgError(res20), "in method '" "resampfront" "', argument " "20"" of type '" "char *""'");
  }
  arg20 = reinterpret_cast< char * >(buf20);
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "resampfront" "', argument " "21"" of type '" "double""'");
  } 
  arg21 = static_cast< double >(val21);
  ecode22 = SWIG_AsVal_size_t(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "resampfront" "', argument " "22"" of type '" "size_t""'");
  } 
  arg22 = static_cast< size_t >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode25 = SWIG_AsVal_size_t(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "resampfront" "', argument " "25"" of type '" "size_t""'");
  } 
  arg25 = static_cast< size_t >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  resampfront(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg28[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      delete[] arg28;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_manyVars(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 = (size_t) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_manyVars.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "manyVars" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "manyVars" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  manyVars(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ManyVarsD(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 = (size_t) 0 ;
  size_t *arg6 = (size_t *) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ManyVarsD.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ManyVarsD" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ManyVarsD" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ManyVarsD(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_manyVarsX(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 = (size_t) 0 ;
  size_t *arg7 = (size_t *) 0 ;
  vector arg8 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_manyVarsX.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "manyVarsX" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "manyVarsX" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "manyVarsX" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  manyVarsX(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dmxtmulv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dmxtmulv.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dmxtmulv" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dmxtmulv" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  dmxtmulv(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dmxmulv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dmxmulv.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dmxmulv" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dmxmulv" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  dmxmulv(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dmxtmultv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dmxtmultv.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dmxtmultv" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dmxtmultv" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  dmxtmultv(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BITA_dgemv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double arg4 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  double *arg7 = (double *) 0 ;
  size_t arg8 ;
  double arg9 ;
  double *arg10 = (double *) 0 ;
  size_t arg11 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  size_t val11 ;
  int ecode11 = 0 ;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BITA_dgemv.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BITA_dgemv" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BITA_dgemv" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BITA_dgemv" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BITA_dgemv" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "BITA_dgemv" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "BITA_dgemv" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "BITA_dgemv" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_size_t(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "BITA_dgemv" "', argument " "11"" of type '" "size_t""'");
  } 
  arg11 = static_cast< size_t >(val11);
  BITA_dgemv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  {
    //We musn't free this arg7 input=args[6] arg=$arg result=$result
  }
  
  
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SriskAttribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SriskAttribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SriskAttribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SriskAttribution" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SriskAttribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SvarianceAttribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t arg4 ;
  size_t *arg5 = (size_t *) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SvarianceAttribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SvarianceAttribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SvarianceAttribution" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SvarianceAttribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FriskAttribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 ;
  size_t *arg7 = (size_t *) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 ;
  size_t *arg12 = (size_t *) 0 ;
  size_t arg13 ;
  size_t *arg14 = (size_t *) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  size_t val11 ;
  int ecode11 = 0 ;
  size_t val13 ;
  int ecode13 = 0 ;
  
  if(args.Length() != 20) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FriskAttribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FriskAttribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FriskAttribution" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FriskAttribution" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FriskAttribution" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_size_t(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "FriskAttribution" "', argument " "11"" of type '" "size_t""'");
  } 
  arg11 = static_cast< size_t >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_size_t(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "FriskAttribution" "', argument " "13"" of type '" "size_t""'");
  } 
  arg13 = static_cast< size_t >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  FriskAttribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg12[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FvarianceAttribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t arg6 ;
  size_t *arg7 = (size_t *) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 ;
  size_t *arg12 = (size_t *) 0 ;
  size_t arg13 ;
  size_t *arg14 = (size_t *) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 = (int) 0 ;
  double *arg22 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  size_t val11 ;
  int ecode11 = 0 ;
  size_t val13 ;
  int ecode13 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  size_t result;
  
  if(args.Length() != 22) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FvarianceAttribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FvarianceAttribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FvarianceAttribution" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FvarianceAttribution" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "FvarianceAttribution" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_size_t(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "FvarianceAttribution" "', argument " "11"" of type '" "size_t""'");
  } 
  arg11 = static_cast< size_t >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_size_t(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "FvarianceAttribution" "', argument " "13"" of type '" "size_t""'");
  } 
  arg13 = static_cast< size_t >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FvarianceAttribution" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = FvarianceAttribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg12[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22){
      delete[] arg22;arg22=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FexposureAttribution(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t arg5 ;
  size_t *arg6 = (size_t *) 0 ;
  size_t arg7 ;
  size_t *arg8 = (size_t *) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FexposureAttribution.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FexposureAttribution" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FexposureAttribution" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FexposureAttribution" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_size_t(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FexposureAttribution" "', argument " "7"" of type '" "size_t""'");
  } 
  arg7 = static_cast< size_t >(val7);
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  FexposureAttribution(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MCTR_Beta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  size_t arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MCTR_Beta.");
  
  {
    arg1 = 0;
    
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()){
        arg1 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg1[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MCTR_Beta" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MCTR_Beta" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MCTR_Beta" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MCTR_Beta(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg1[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPopt1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-2 ;
  double arg9 = (double) 10 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int result;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPopt1.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPopt1" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPopt1" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SOCPopt1" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SOCPopt1" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (int)SOCPopt1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPopt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-2 ;
  double arg9 = (double) 1.1 ;
  size_t arg10 = (size_t) 1000 ;
  double arg11 = (double) 2 ;
  double arg12 = (double) 1e-8 ;
  int arg13 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  size_t val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  int result;
  
  if(args.Length() != 13) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPopt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPopt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPopt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SOCPopt" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SOCPopt" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_size_t(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SOCPopt" "', argument " "10"" of type '" "size_t""'");
  } 
  arg10 = static_cast< size_t >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SOCPopt" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPopt" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPopt" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  result = (int)SOCPopt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPgenopt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t *arg3 = (size_t *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  double arg10 = (double) 1e-2 ;
  double arg11 = (double) 10 ;
  size_t arg12 = (size_t) 1000 ;
  double arg13 = (double) 1e-8 ;
  int arg14 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  int result;
  
  if(args.Length() != 14) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPgenopt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPgenopt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPgenopt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SOCPgenopt" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SOCPgenopt" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SOCPgenopt" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPgenopt" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPgenopt" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPgenopt" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  result = (int)SOCPgenopt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_testSOCPinf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_testSOCPinf.");
  
  testSOCPinf();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPinfeasHomogtDUMP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  size_t arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 = (double) 1e-6 ;
  double arg16 = (double) 1e-6 ;
  int arg17 = (int) 0 ;
  double arg18 = (double) 4 ;
  double arg19 = (double) 1e-8 ;
  int arg20 = (int) 0 ;
  char *arg21 = (char *) 0 ;
  char *arg22 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int res21 ;
  char *buf21 = 0 ;
  int alloc21 = 0 ;
  int res22 ;
  char *buf22 = 0 ;
  int alloc22 = 0 ;
  
  if(args.Length() != 22) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPinfeasHomogtDUMP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  res21 = SWIG_AsCharPtrAndSize(args[20], &buf21, NULL, &alloc21);
  if (!SWIG_IsOK(res21)) {
    SWIG_exception_fail(SWIG_ArgError(res21), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "21"" of type '" "char *""'");
  }
  arg21 = reinterpret_cast< char * >(buf21);
  res22 = SWIG_AsCharPtrAndSize(args[21], &buf22, NULL, &alloc22);
  if (!SWIG_IsOK(res22)) {
    SWIG_exception_fail(SWIG_ArgError(res22), "in method '" "SOCPinfeasHomogtDUMP" "', argument " "22"" of type '" "char *""'");
  }
  arg22 = reinterpret_cast< char * >(buf22);
  SOCPinfeasHomogtDUMP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  
  
  
  
  
  
  
  
  
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPinfeasHomogt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  int *arg3 = (int *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  size_t arg12 = (size_t) 100 ;
  double arg13 = (double) 1e-8 ;
  double arg14 = (double) .5 ;
  double arg15 = (double) 1e-8 ;
  double arg16 = (double) 1e-8 ;
  int arg17 = (int) 0 ;
  double arg18 = (double) 4.0 ;
  double arg19 = (double) 1e-8 ;
  int arg20 = (int) 0 ;
  char *arg21 = (char *) 0 ;
  char *arg22 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int res21 ;
  char *buf21 = 0 ;
  int alloc21 = 0 ;
  int res22 ;
  char *buf22 = 0 ;
  int alloc22 = 0 ;
  short result;
  
  if(args.Length() != 22) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPinfeasHomogt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPinfeasHomogt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPinfeasHomogt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPinfeasHomogt" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPinfeasHomogt" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPinfeasHomogt" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPinfeasHomogt" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPinfeasHomogt" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SOCPinfeasHomogt" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPinfeasHomogt" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "SOCPinfeasHomogt" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPinfeasHomogt" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  res21 = SWIG_AsCharPtrAndSize(args[20], &buf21, NULL, &alloc21);
  if (!SWIG_IsOK(res21)) {
    SWIG_exception_fail(SWIG_ArgError(res21), "in method '" "SOCPinfeasHomogt" "', argument " "21"" of type '" "char *""'");
  }
  arg21 = reinterpret_cast< char * >(buf21);
  res22 = SWIG_AsCharPtrAndSize(args[21], &buf22, NULL, &alloc22);
  if (!SWIG_IsOK(res22)) {
    SWIG_exception_fail(SWIG_ArgError(res22), "in method '" "SOCPinfeasHomogt" "', argument " "22"" of type '" "char *""'");
  }
  arg22 = reinterpret_cast< char * >(buf22);
  result = (short)SOCPinfeasHomogt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  
  
  
  
  
  
  
  
  
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RootProcessQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RootProcessQ.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RootProcessQ" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  RootProcessQ(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RootQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RootQ.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RootQ" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  RootQ(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RootQgram(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RootQgram.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RootQgram" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  RootQgram(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RootQold(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RootQold.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RootQold" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  RootQold(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fixA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  short_scl *arg3 = (short_scl *) 0 ;
  int arg4 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fixA.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fixA" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "fixA" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (int)fixA(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_DroppingOut(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double *arg5 = (double *) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_DroppingOut.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DroppingOut" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DroppingOut" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  DroppingOut(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPlstest(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  int arg7 ;
  double arg8 ;
  double arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  double arg13 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  size_t arg16 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  size_t val16 ;
  int ecode16 = 0 ;
  short result;
  
  if(args.Length() != 20) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPlstest.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPlstest" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPlstest" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SOCPlstest" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "SOCPlstest" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "SOCPlstest" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPlstest" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPlstest" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPlstest" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_size_t(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPlstest" "', argument " "16"" of type '" "size_t""'");
  } 
  arg16 = static_cast< size_t >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)SOCPlstest(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPRobust(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  long arg7 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  double arg17 = (double) -1 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 = (int) 1 ;
  int arg21 = (int) 1 ;
  vector arg22 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  short result;
  
  if(args.Length() != 22) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPRobust.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPRobust" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPRobust" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SOCPRobust" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPRobust" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPRobust" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPRobust" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SOCPRobust" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPRobust" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "SOCPRobust" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)SOCPRobust(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPlsRobust(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  vector arg19 = (vector) 0 ;
  double arg20 ;
  size_t arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  int arg27 = (int) 0 ;
  int arg28 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  size_t val21 ;
  int ecode21 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  short result;
  
  if(args.Length() != 28) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPlsRobust.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPlsRobust" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPlsRobust" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SOCPlsRobust" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SOCPlsRobust" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SOCPlsRobust" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPlsRobust" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPlsRobust" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPlsRobust" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPlsRobust" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPlsRobust" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  ecode21 = SWIG_AsVal_size_t(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "SOCPlsRobust" "', argument " "21"" of type '" "size_t""'");
  } 
  arg21 = static_cast< size_t >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode27 = SWIG_AsVal_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "SOCPlsRobust" "', argument " "27"" of type '" "int""'");
  } 
  arg27 = static_cast< int >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "SOCPlsRobust" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  result = (short)SOCPlsRobust(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPlsRobustl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  vector arg19 = (vector) 0 ;
  double arg20 ;
  size_t arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int arg28 ;
  int arg29 = (int) 0 ;
  int arg30 = (int) 0 ;
  char *arg31 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  size_t val21 ;
  int ecode21 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  int val30 ;
  int ecode30 = 0 ;
  int res31 ;
  char *buf31 = 0 ;
  int alloc31 = 0 ;
  short result;
  
  if(args.Length() != 31) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPlsRobustl.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPlsRobustl" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPlsRobustl" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SOCPlsRobustl" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SOCPlsRobustl" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SOCPlsRobustl" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPlsRobustl" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPlsRobustl" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPlsRobustl" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPlsRobustl" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPlsRobustl" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  ecode21 = SWIG_AsVal_size_t(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "SOCPlsRobustl" "', argument " "21"" of type '" "size_t""'");
  } 
  arg21 = static_cast< size_t >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "SOCPlsRobustl" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "SOCPlsRobustl" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "SOCPlsRobustl" "', argument " "30"" of type '" "int""'");
  } 
  arg30 = static_cast< int >(val30);
  res31 = SWIG_AsCharPtrAndSize(args[30], &buf31, NULL, &alloc31);
  if (!SWIG_IsOK(res31)) {
    SWIG_exception_fail(SWIG_ArgError(res31), "in method '" "SOCPlsRobustl" "', argument " "31"" of type '" "char *""'");
  }
  arg31 = reinterpret_cast< char * >(buf31);
  result = (short)SOCPlsRobustl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  
  
  
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPlsRobustlC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 ;
  double arg11 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  size_t arg19 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  int arg25 ;
  int arg26 = (int) 0 ;
  int arg27 = (int) 0 ;
  char *arg28 = (char *) 0 ;
  size_t arg29 = (size_t) 0 ;
  vector arg30 = (vector) 0 ;
  double arg31 = (double) -1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  size_t val19 ;
  int ecode19 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int res28 ;
  char *buf28 = 0 ;
  int alloc28 = 0 ;
  size_t val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  short result;
  
  if(args.Length() != 31) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPlsRobustlC.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPlsRobustlC" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPlsRobustlC" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SOCPlsRobustlC" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "SOCPlsRobustlC" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "SOCPlsRobustlC" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPlsRobustlC" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPlsRobustlC" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPlsRobustlC" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPlsRobustlC" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_size_t(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "SOCPlsRobustlC" "', argument " "19"" of type '" "size_t""'");
  } 
  arg19 = static_cast< size_t >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "SOCPlsRobustlC" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "SOCPlsRobustlC" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "SOCPlsRobustlC" "', argument " "27"" of type '" "int""'");
  } 
  arg27 = static_cast< int >(val27);
  res28 = SWIG_AsCharPtrAndSize(args[27], &buf28, NULL, &alloc28);
  if (!SWIG_IsOK(res28)) {
    SWIG_exception_fail(SWIG_ArgError(res28), "in method '" "SOCPlsRobustlC" "', argument " "28"" of type '" "char *""'");
  }
  arg28 = reinterpret_cast< char * >(buf28);
  ecode29 = SWIG_AsVal_size_t(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "SOCPlsRobustlC" "', argument " "29"" of type '" "size_t""'");
  } 
  arg29 = static_cast< size_t >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "SOCPlsRobustlC" "', argument " "31"" of type '" "double""'");
  } 
  arg31 = static_cast< double >(val31);
  result = (short)SOCPlsRobustlC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  
  
  {
    if(arg28 && args[27]->IsArray()) {
      delete[] arg28;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Projection(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Projection.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Projection" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Projection" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Projection(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CovarianceInverter(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CovarianceInverter.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CovarianceInverter" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  CovarianceInverter(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RankingConstraints(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  long arg5 = (long) -1 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RankingConstraints.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RankingConstraints" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_long(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RankingConstraints" "', argument " "5"" of type '" "long""'");
  } 
  arg5 = static_cast< long >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  RankingConstraints(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPRanked(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  long arg7 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  int arg14 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  short result;
  
  if(args.Length() != 14) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPRanked.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPRanked" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPRanked" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "SOCPRanked" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPRanked" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPRanked" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  result = (short)SOCPRanked(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dsptrf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dsptrf.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dsptrf" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dsptrf" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)dsptrf(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dsptrs(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  short_scl *arg5 = (short_scl *) 0 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val7 ;
  int ecode7 = 0 ;
  int result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dsptrs.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dsptrs" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dsptrs" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "dsptrs" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_size_t(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "dsptrs" "', argument " "7"" of type '" "size_t""'");
  } 
  arg7 = static_cast< size_t >(val7);
  result = (int)dsptrs(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_applyA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  short_scl *arg5 = (short_scl *) 0 ;
  double *arg6 = (double *) 0 ;
  size_t arg7 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val7 ;
  int ecode7 = 0 ;
  int result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_applyA.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "applyA" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "applyA" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "applyA" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_size_t(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "applyA" "', argument " "7"" of type '" "size_t""'");
  } 
  arg7 = static_cast< size_t >(val7);
  result = (int)applyA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_applyrootA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  int result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_applyrootA.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "applyrootA" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "applyrootA" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "applyrootA" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  result = (int)applyrootA(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_applyinverserootA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  short_scl *arg4 = (short_scl *) 0 ;
  double *arg5 = (double *) 0 ;
  size_t arg6 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val6 ;
  int ecode6 = 0 ;
  int result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_applyinverserootA.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "applyinverserootA" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "applyinverserootA" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_size_t(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "applyinverserootA" "', argument " "6"" of type '" "size_t""'");
  } 
  arg6 = static_cast< size_t >(val6);
  result = (int)applyinverserootA(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ReorderNames(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  char **arg3 = (char **) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ReorderNames.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ReorderNames" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ReorderNames(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPinterior(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 = (int) 1 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1e-8 ;
  size_t arg13 = (size_t) 0 ;
  size_t arg14 = (size_t) 0 ;
  size_t arg15 = (size_t) 0 ;
  size_t arg16 = (size_t) 0 ;
  size_t arg17 = (size_t) 0 ;
  size_t *arg18 = (size_t *) 0 ;
  size_t *arg19 = (size_t *) 0 ;
  size_t *arg20 = (size_t *) 0 ;
  size_t *arg21 = (size_t *) 0 ;
  pHmul arg22 = (pHmul) 0 ;
  void *arg23 = (void *) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  size_t val13 ;
  int ecode13 = 0 ;
  size_t val14 ;
  int ecode14 = 0 ;
  size_t val15 ;
  int ecode15 = 0 ;
  size_t val16 ;
  int ecode16 = 0 ;
  size_t val17 ;
  int ecode17 = 0 ;
  void *argp22 ;
  int res22 = 0 ;
  short result;
  
  if(args.Length() != 24) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPinterior.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPinterior" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPinterior" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "LPinterior" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "LPinterior" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_size_t(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "LPinterior" "', argument " "13"" of type '" "size_t""'");
  } 
  arg13 = static_cast< size_t >(val13);
  ecode14 = SWIG_AsVal_size_t(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "LPinterior" "', argument " "14"" of type '" "size_t""'");
  } 
  arg14 = static_cast< size_t >(val14);
  ecode15 = SWIG_AsVal_size_t(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "LPinterior" "', argument " "15"" of type '" "size_t""'");
  } 
  arg15 = static_cast< size_t >(val15);
  ecode16 = SWIG_AsVal_size_t(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "LPinterior" "', argument " "16"" of type '" "size_t""'");
  } 
  arg16 = static_cast< size_t >(val16);
  ecode17 = SWIG_AsVal_size_t(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "LPinterior" "', argument " "17"" of type '" "size_t""'");
  } 
  arg17 = static_cast< size_t >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res22 = SWIG_ConvertPtr(args[21], &argp22, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res22)) {
      SWIG_exception_fail(SWIG_ArgError(res22), "in method '" "LPinterior" "', argument " "22"" of type '" "pHmul""'"); 
    }  
    if (!argp22) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LPinterior" "', argument " "22"" of type '" "pHmul""'");
    } else {
      arg22 = *(reinterpret_cast< pHmul * >(argp22));
    }
  }
  {
    
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)LPinterior(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg21[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  
  
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QPopt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pHmul arg9 ;
  void *arg10 = (void *) 0 ;
  double arg11 = (double) 1e-8 ;
  double arg12 = (double) 1e10 ;
  short arg13 = (short) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  short val13 ;
  int ecode13 = 0 ;
  short result;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QPopt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QPopt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QPopt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "QPopt" "', argument " "9"" of type '" "pHmul""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QPopt" "', argument " "9"" of type '" "pHmul""'");
    } else {
      arg9 = *(reinterpret_cast< pHmul * >(argp9));
    }
  }
  {
    
  }
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "QPopt" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "QPopt" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_short(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "QPopt" "', argument " "13"" of type '" "short""'");
  } 
  arg13 = static_cast< short >(val13);
  result = (short)QPopt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPopt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double arg8 = (double) 1e-8 ;
  double arg9 = (double) 1e10 ;
  short arg10 = (short) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  short val10 ;
  int ecode10 = 0 ;
  short result;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPopt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPopt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPopt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "LPopt" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "LPopt" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_short(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "LPopt" "', argument " "10"" of type '" "short""'");
  } 
  arg10 = static_cast< short >(val10);
  result = (short)LPopt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QPbySeqLP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pHmul arg9 ;
  void *arg10 = (void *) 0 ;
  double arg11 = (double) 1e-8 ;
  double arg12 = (double) 1e10 ;
  double arg13 = (double) 1e-5 ;
  short arg14 = (short) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  short val14 ;
  int ecode14 = 0 ;
  short result;
  
  if(args.Length() != 13) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QPbySeqLP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QPbySeqLP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QPbySeqLP" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "QPbySeqLP" "', argument " "9"" of type '" "pHmul""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QPbySeqLP" "', argument " "9"" of type '" "pHmul""'");
    } else {
      arg9 = *(reinterpret_cast< pHmul * >(argp9));
    }
  }
  {
    
  }
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "QPbySeqLP" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "QPbySeqLP" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "QPbySeqLP" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_short(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "QPbySeqLP" "', argument " "14"" of type '" "short""'");
  } 
  arg14 = static_cast< short >(val14);
  result = (short)QPbySeqLP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QPinterior(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  int *arg9 = (int *) 0 ;
  int arg10 = (int) 1 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1e-8 ;
  size_t arg13 = (size_t) 0 ;
  size_t arg14 = (size_t) 0 ;
  size_t arg15 = (size_t) 0 ;
  size_t arg16 = (size_t) 0 ;
  size_t arg17 = (size_t) 0 ;
  size_t *arg18 = (size_t *) 0 ;
  size_t *arg19 = (size_t *) 0 ;
  size_t *arg20 = (size_t *) 0 ;
  size_t *arg21 = (size_t *) 0 ;
  pHmul arg22 = (pHmul) 0 ;
  void *arg23 = (void *) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  size_t val13 ;
  int ecode13 = 0 ;
  size_t val14 ;
  int ecode14 = 0 ;
  size_t val15 ;
  int ecode15 = 0 ;
  size_t val16 ;
  int ecode16 = 0 ;
  size_t val17 ;
  int ecode17 = 0 ;
  void *argp22 ;
  int res22 = 0 ;
  short result;
  
  if(args.Length() != 24) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QPinterior.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QPinterior" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QPinterior" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "QPinterior" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "QPinterior" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_size_t(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "QPinterior" "', argument " "13"" of type '" "size_t""'");
  } 
  arg13 = static_cast< size_t >(val13);
  ecode14 = SWIG_AsVal_size_t(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "QPinterior" "', argument " "14"" of type '" "size_t""'");
  } 
  arg14 = static_cast< size_t >(val14);
  ecode15 = SWIG_AsVal_size_t(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "QPinterior" "', argument " "15"" of type '" "size_t""'");
  } 
  arg15 = static_cast< size_t >(val15);
  ecode16 = SWIG_AsVal_size_t(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "QPinterior" "', argument " "16"" of type '" "size_t""'");
  } 
  arg16 = static_cast< size_t >(val16);
  ecode17 = SWIG_AsVal_size_t(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "QPinterior" "', argument " "17"" of type '" "size_t""'");
  } 
  arg17 = static_cast< size_t >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res22 = SWIG_ConvertPtr(args[21], &argp22, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res22)) {
      SWIG_exception_fail(SWIG_ArgError(res22), "in method '" "QPinterior" "', argument " "22"" of type '" "pHmul""'"); 
    }  
    if (!argp22) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QPinterior" "', argument " "22"" of type '" "pHmul""'");
    } else {
      arg22 = *(reinterpret_cast< pHmul * >(argp22));
    }
  }
  {
    
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)QPinterior(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg21[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  
  
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19){
      delete[] arg19;arg19=0;
    }
  }
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  {
    if(arg21){
      delete[] arg21;arg21=0;
    }
  }
  
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_facmul(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_facmul.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "facmul" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "facmul" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  facmul(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    //We musn't free this arg3 input=args[2] arg=$arg result=$result
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_facmuli(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_facmuli.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "facmuli" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "facmuli" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  facmuli(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    //We musn't free this arg3 input=args[2] arg=$arg result=$result
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FastInverseFactorModelProcess(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FastInverseFactorModelProcess.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FastInverseFactorModelProcess" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FastInverseFactorModelProcess" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  FastInverseFactorModelProcess(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MakeUU(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MakeUU.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MakeUU" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MakeUU(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_fastInverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_fastInverse.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fastInverse" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  fastInverse(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 = (double) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  short result;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaOpt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaOpt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaOpt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "OmegaOpt" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OmegaOpt" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OmegaOpt" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "OmegaOpt" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  result = (short)OmegaOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FindR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  double arg5 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FindR.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FindR" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FindR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FindR" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (double)FindR(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RobustOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 = (size_t) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 = (int) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  size_t val17 ;
  int ecode17 = 0 ;
  size_t val22 ;
  int ecode22 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  short result;
  
  if(args.Length() != 24) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RobustOpt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RobustOpt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RobustOpt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RobustOpt" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RobustOpt" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "RobustOpt" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RobustOpt" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RobustOpt" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "RobustOpt" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_size_t(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "RobustOpt" "', argument " "17"" of type '" "size_t""'");
  } 
  arg17 = static_cast< size_t >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode22 = SWIG_AsVal_size_t(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "RobustOpt" "', argument " "22"" of type '" "size_t""'");
  } 
  arg22 = static_cast< size_t >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "RobustOpt" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  result = (short)RobustOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RobustOptU(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 = (size_t) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 = (int) 1 ;
  vector arg25 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  size_t val17 ;
  int ecode17 = 0 ;
  size_t val22 ;
  int ecode22 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  short result;
  
  if(args.Length() != 25) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RobustOptU.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RobustOptU" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RobustOptU" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RobustOptU" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RobustOptU" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "RobustOptU" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RobustOptU" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RobustOptU" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "RobustOptU" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_size_t(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "RobustOptU" "', argument " "17"" of type '" "size_t""'");
  } 
  arg17 = static_cast< size_t >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode22 = SWIG_AsVal_size_t(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "RobustOptU" "', argument " "22"" of type '" "size_t""'");
  } 
  arg22 = static_cast< size_t >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "RobustOptU" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)RobustOptU(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QuadCVals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  double *arg4 = (double *) 0 ;
  size_t arg5 ;
  int *arg6 = (int *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 = (size_t) 0 ;
  vector arg12 = (vector) 0 ;
  int arg13 = (int) 1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  size_t val11 ;
  int ecode11 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  
  if(args.Length() != 13) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QuadCVals.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QuadCVals" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "QuadCVals" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_size_t(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "QuadCVals" "', argument " "11"" of type '" "size_t""'");
  } 
  arg11 = static_cast< size_t >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "QuadCVals" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  QuadCVals(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_IncreaseL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_IncreaseL.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "IncreaseL" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IncreaseL" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IncreaseL" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  IncreaseL(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaSVOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  char **arg4 = (char **) 0 ;
  vector arg5 = (vector) 0 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  short result;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaSVOpt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaSVOpt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaSVOpt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "OmegaSVOpt" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OmegaSVOpt" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OmegaSVOpt" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "OmegaSVOpt" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  result = (short)OmegaSVOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaGeneral(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  char *arg17 = (char *) 0 ;
  double arg18 = (double) 1.0 ;
  double arg19 = (double) 1.0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int res17 ;
  char *buf17 = 0 ;
  int alloc17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  short result;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaGeneral.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaGeneral" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaGeneral" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OmegaGeneral" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()){
        arg5 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg5[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OmegaGeneral" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OmegaGeneral" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_int(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "OmegaGeneral" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OmegaGeneral" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  res17 = SWIG_AsCharPtrAndSize(args[16], &buf17, NULL, &alloc17);
  if (!SWIG_IsOK(res17)) {
    SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "OmegaGeneral" "', argument " "17"" of type '" "char *""'");
  }
  arg17 = reinterpret_cast< char * >(buf17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "OmegaGeneral" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "OmegaGeneral" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  result = (short)OmegaGeneral(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaGeneralP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  char *arg18 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int res18 ;
  char *buf18 = 0 ;
  int alloc18 = 0 ;
  short result;
  
  if(args.Length() != 18) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaGeneralP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaGeneralP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaGeneralP" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OmegaGeneralP" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()){
        arg5 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg5[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OmegaGeneralP" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OmegaGeneralP" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OmegaGeneralP" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OmegaGeneralP" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  res18 = SWIG_AsCharPtrAndSize(args[17], &buf18, NULL, &alloc18);
  if (!SWIG_IsOK(res18)) {
    SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "OmegaGeneralP" "', argument " "18"" of type '" "char *""'");
  }
  arg18 = reinterpret_cast< char * >(buf18);
  result = (short)OmegaGeneralP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaGeneralPDump(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  char **arg5 = (char **) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  double *arg14 = (double *) 0 ;
  double *arg15 = (double *) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  char *arg18 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int res18 ;
  char *buf18 = 0 ;
  int alloc18 = 0 ;
  
  if(args.Length() != 18) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaGeneralPDump.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaGeneralPDump" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaGeneralPDump" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OmegaGeneralPDump" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()){
        arg5 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg5[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "OmegaGeneralPDump" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "OmegaGeneralPDump" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OmegaGeneralPDump" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OmegaGeneralPDump" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  res18 = SWIG_AsCharPtrAndSize(args[17], &buf18, NULL, &alloc18);
  if (!SWIG_IsOK(res18)) {
    SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "OmegaGeneralPDump" "', argument " "18"" of type '" "char *""'");
  }
  arg18 = reinterpret_cast< char * >(buf18);
  OmegaGeneralPDump(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaProps(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaProps.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaProps" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaProps" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OmegaProps" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  OmegaProps(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QPbySOCP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double arg10 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  short result;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QPbySOCP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QPbySOCP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QPbySOCP" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "QPbySOCP" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  result = (short)QPbySOCP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OmegaH(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OmegaH.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OmegaH" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OmegaH" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OmegaH" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  OmegaH(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_clean_w(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_clean_w.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clean_w" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  clean_w(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_trace(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_trace.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "trace" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)trace(arg1,arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_anneal(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  double arg8 = (double) 5.0 ;
  double arg9 = (double) .5 ;
  int arg10 = (int) 20 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  short result;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_anneal.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "anneal" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "anneal" "', argument " "6"" of type '" "pUtility""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "anneal" "', argument " "6"" of type '" "pUtility""'");
    } else {
      arg6 = *(reinterpret_cast< pUtility * >(argp6));
    }
  }
  {
    
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "anneal" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "anneal" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "anneal" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  result = (short)anneal(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ThetaMulti(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  long arg2 ;
  size_t arg3 ;
  char **arg4 = (char **) 0 ;
  size_t arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  size_t val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 18) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ThetaMulti.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ThetaMulti" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ThetaMulti" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ThetaMulti" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()){
        arg4 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg4[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_size_t(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ThetaMulti" "', argument " "5"" of type '" "size_t""'");
  } 
  arg5 = static_cast< size_t >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ThetaMulti(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  
  
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Lsmooth(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1 ;
  double arg8 = (double) 1e-6 ;
  int *arg9 = (int *) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  size_t arg12 = (size_t) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Lsmooth.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Lsmooth" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Lsmooth" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Lsmooth" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Lsmooth" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Lsmooth" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Lsmooth(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SemiVar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SemiVar.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SemiVar" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SemiVar" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "SemiVar" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SemiVar(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GeneralLongOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  pUtility arg8 ;
  pModC arg9 ;
  pModQ arg10 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  int arg14 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  short result;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GeneralLongOpt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GeneralLongOpt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GeneralLongOpt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "GeneralLongOpt" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralLongOpt" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "GeneralLongOpt" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralLongOpt" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "GeneralLongOpt" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GeneralLongOpt" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "GeneralLongOpt" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  result = (short)GeneralLongOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPhelper(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 = (int) 1 ;
  char *arg9 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  short result;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPhelper.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPhelper" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPhelper" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "LPhelper" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  res9 = SWIG_AsCharPtrAndSize(args[8], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "LPhelper" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (short)LPhelper(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPgeneral(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 = (double) -1 ;
  double arg17 = (double) -1 ;
  double arg18 = (double) -1 ;
  double arg19 = (double) -1 ;
  int arg20 = (int) 1 ;
  char *arg21 = (char *) 0 ;
  double arg22 = (double) -1 ;
  double arg23 = (double) -1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int res21 ;
  char *buf21 = 0 ;
  int alloc21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  short result;
  
  if(args.Length() != 23) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPgeneral.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPgeneral" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPgeneral" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "LPgeneral" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "LPgeneral" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "LPgeneral" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "LPgeneral" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "LPgeneral" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "LPgeneral" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "LPgeneral" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  res21 = SWIG_AsCharPtrAndSize(args[20], &buf21, NULL, &alloc21);
  if (!SWIG_IsOK(res21)) {
    SWIG_exception_fail(SWIG_ArgError(res21), "in method '" "LPgeneral" "', argument " "21"" of type '" "char *""'");
  }
  arg21 = reinterpret_cast< char * >(buf21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "LPgeneral" "', argument " "22"" of type '" "double""'");
  } 
  arg22 = static_cast< double >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "LPgeneral" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  result = (short)LPgeneral(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  
  
  
  
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RobustOptDump(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  int arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  size_t arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  int arg16 ;
  size_t arg17 ;
  int *arg18 = (int *) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  size_t arg22 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  char *arg25 = (char *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  size_t val12 ;
  int ecode12 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  size_t val17 ;
  int ecode17 = 0 ;
  size_t val22 ;
  int ecode22 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int res25 ;
  char *buf25 = 0 ;
  int alloc25 = 0 ;
  
  if(args.Length() != 25) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RobustOptDump.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RobustOptDump" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RobustOptDump" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RobustOptDump" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "RobustOptDump" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "RobustOptDump" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RobustOptDump" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_size_t(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RobustOptDump" "', argument " "12"" of type '" "size_t""'");
  } 
  arg12 = static_cast< size_t >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "RobustOptDump" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_size_t(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "RobustOptDump" "', argument " "17"" of type '" "size_t""'");
  } 
  arg17 = static_cast< size_t >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode22 = SWIG_AsVal_size_t(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "RobustOptDump" "', argument " "22"" of type '" "size_t""'");
  } 
  arg22 = static_cast< size_t >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "RobustOptDump" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  res25 = SWIG_AsCharPtrAndSize(args[24], &buf25, NULL, &alloc25);
  if (!SWIG_IsOK(res25)) {
    SWIG_exception_fail(SWIG_ArgError(res25), "in method '" "RobustOptDump" "', argument " "25"" of type '" "char *""'");
  }
  arg25 = reinterpret_cast< char * >(buf25);
  RobustOptDump(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPFullNewton(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1 ;
  double arg8 = (double) 0.125 ;
  double arg9 = (double) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  short result;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPFullNewton.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPFullNewton" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPFullNewton" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "LPFullNewton" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "LPFullNewton" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "LPFullNewton" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  result = (short)LPFullNewton(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPbySOCPp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPbySOCPp.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPbySOCPp" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPbySOCPp" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)LPbySOCPp(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPbySOCP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPbySOCP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPbySOCP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPbySOCP" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)LPbySOCP(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPstraight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPstraight.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPstraight" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPstraight" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)LPstraight(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GainLossOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1 ;
  double arg13 = (double) 1 ;
  char **arg14 = (char **) 0 ;
  double *arg15 = (double *) 0 ;
  long arg16 = (long) -1 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  short result;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GainLossOpt.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GainLossOpt" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GainLossOpt" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GainLossOpt" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GainLossOpt" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "GainLossOpt" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "GainLossOpt" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "GainLossOpt" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    arg14 = 0;
    
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()){
        arg14 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg14[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "GainLossOpt" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GainLossOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  {
    //We musn't free this arg17 input=args[16] arg=$arg result=$result
  }
  {
    //We musn't free this arg18 input=args[17] arg=$arg result=$result
  }
  {
    //We musn't free this arg19 input=args[18] arg=$arg result=$result
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GainLossOptGen(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  vector arg7 = (vector) 0 ;
  size_t arg8 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 = (double) 1 ;
  double arg13 = (double) 1 ;
  char **arg14 = (char **) 0 ;
  double *arg15 = (double *) 0 ;
  long arg16 = (long) -1 ;
  double *arg17 = (double *) 0 ;
  double *arg18 = (double *) 0 ;
  double *arg19 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  size_t val8 ;
  int ecode8 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  short result;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GainLossOptGen.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GainLossOptGen" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GainLossOptGen" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "GainLossOptGen" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GainLossOptGen" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_size_t(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "GainLossOptGen" "', argument " "8"" of type '" "size_t""'");
  } 
  arg8 = static_cast< size_t >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "GainLossOptGen" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "GainLossOptGen" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    arg14 = 0;
    
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()){
        arg14 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg14[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "GainLossOptGen" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GainLossOptGen(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  {
    //We musn't free this arg17 input=args[16] arg=$arg result=$result
  }
  {
    //We musn't free this arg18 input=args[17] arg=$arg result=$result
  }
  {
    //We musn't free this arg19 input=args[18] arg=$arg result=$result
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GLOptimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  real arg25 ;
  real arg26 ;
  int arg27 ;
  int arg28 ;
  real arg29 ;
  real arg30 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  int arg41 ;
  char *arg42 = (char *) 0 ;
  long arg43 ;
  long arg44 ;
  double arg45 ;
  vector arg46 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  unsigned int val12 ;
  int ecode12 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  double val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  int val41 ;
  int ecode41 = 0 ;
  int res42 ;
  char *buf42 = 0 ;
  int alloc42 = 0 ;
  long val43 ;
  int ecode43 = 0 ;
  long val44 ;
  int ecode44 = 0 ;
  double val45 ;
  int ecode45 = 0 ;
  short result;
  
  if(args.Length() != 46) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GLOptimise.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GLOptimise" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLOptimise" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GLOptimise" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GLOptimise" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "GLOptimise" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "GLOptimise" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "GLOptimise" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_unsigned_SS_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "GLOptimise" "', argument " "12"" of type '" "dimen""'");
  } 
  arg12 = static_cast< dimen >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "GLOptimise" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "GLOptimise" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "GLOptimise" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "GLOptimise" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "GLOptimise" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_double(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "GLOptimise" "', argument " "25"" of type '" "real""'");
  } 
  arg25 = static_cast< real >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "GLOptimise" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "GLOptimise" "', argument " "27"" of type '" "int""'");
  } 
  arg27 = static_cast< int >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "GLOptimise" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "GLOptimise" "', argument " "29"" of type '" "real""'");
  } 
  arg29 = static_cast< real >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "GLOptimise" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "GLOptimise" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "GLOptimise" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "GLOptimise" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode41 = SWIG_AsVal_int(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "GLOptimise" "', argument " "41"" of type '" "int""'");
  } 
  arg41 = static_cast< int >(val41);
  res42 = SWIG_AsCharPtrAndSize(args[41], &buf42, NULL, &alloc42);
  if (!SWIG_IsOK(res42)) {
    SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "GLOptimise" "', argument " "42"" of type '" "char *""'");
  }
  arg42 = reinterpret_cast< char * >(buf42);
  ecode43 = SWIG_AsVal_long(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "GLOptimise" "', argument " "43"" of type '" "long""'");
  } 
  arg43 = static_cast< long >(val43);
  ecode44 = SWIG_AsVal_long(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "GLOptimise" "', argument " "44"" of type '" "long""'");
  } 
  arg44 = static_cast< long >(val44);
  ecode45 = SWIG_AsVal_double(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "GLOptimise" "', argument " "45"" of type '" "double""'");
  } 
  arg45 = static_cast< double >(val45);
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GLOptimise(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  
  
  
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GLOptimiseR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  int arg27 ;
  int arg28 ;
  real arg29 ;
  real arg30 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  int arg41 ;
  char *arg42 = (char *) 0 ;
  long arg43 ;
  long arg44 ;
  double arg45 ;
  vector arg46 = (vector) 0 ;
  double arg47 ;
  double arg48 ;
  double *arg49 = (double *) 0 ;
  double arg50 = (double) -1 ;
  double arg51 = (double) -1 ;
  double arg52 = (double) -1 ;
  int *arg53 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  unsigned int val12 ;
  int ecode12 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  int val41 ;
  int ecode41 = 0 ;
  int res42 ;
  char *buf42 = 0 ;
  int alloc42 = 0 ;
  long val43 ;
  int ecode43 = 0 ;
  long val44 ;
  int ecode44 = 0 ;
  double val45 ;
  int ecode45 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  double val48 ;
  int ecode48 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  double val51 ;
  int ecode51 = 0 ;
  double val52 ;
  int ecode52 = 0 ;
  short result;
  
  if(args.Length() != 53) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GLOptimiseR.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GLOptimiseR" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLOptimiseR" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GLOptimiseR" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GLOptimiseR" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "GLOptimiseR" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "GLOptimiseR" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "GLOptimiseR" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_unsigned_SS_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "GLOptimiseR" "', argument " "12"" of type '" "dimen""'");
  } 
  arg12 = static_cast< dimen >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "GLOptimiseR" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "GLOptimiseR" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "GLOptimiseR" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "GLOptimiseR" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "GLOptimiseR" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode27 = SWIG_AsVal_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "GLOptimiseR" "', argument " "27"" of type '" "int""'");
  } 
  arg27 = static_cast< int >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "GLOptimiseR" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "GLOptimiseR" "', argument " "29"" of type '" "real""'");
  } 
  arg29 = static_cast< real >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "GLOptimiseR" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "GLOptimiseR" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "GLOptimiseR" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "GLOptimiseR" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode41 = SWIG_AsVal_int(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "GLOptimiseR" "', argument " "41"" of type '" "int""'");
  } 
  arg41 = static_cast< int >(val41);
  res42 = SWIG_AsCharPtrAndSize(args[41], &buf42, NULL, &alloc42);
  if (!SWIG_IsOK(res42)) {
    SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "GLOptimiseR" "', argument " "42"" of type '" "char *""'");
  }
  arg42 = reinterpret_cast< char * >(buf42);
  ecode43 = SWIG_AsVal_long(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "GLOptimiseR" "', argument " "43"" of type '" "long""'");
  } 
  arg43 = static_cast< long >(val43);
  ecode44 = SWIG_AsVal_long(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "GLOptimiseR" "', argument " "44"" of type '" "long""'");
  } 
  arg44 = static_cast< long >(val44);
  ecode45 = SWIG_AsVal_double(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "GLOptimiseR" "', argument " "45"" of type '" "double""'");
  } 
  arg45 = static_cast< double >(val45);
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "GLOptimiseR" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  ecode48 = SWIG_AsVal_double(args[47], &val48);
  if (!SWIG_IsOK(ecode48)) {
    SWIG_exception_fail(SWIG_ArgError(ecode48), "in method '" "GLOptimiseR" "', argument " "48"" of type '" "double""'");
  } 
  arg48 = static_cast< double >(val48);
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "GLOptimiseR" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  ecode51 = SWIG_AsVal_double(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "GLOptimiseR" "', argument " "51"" of type '" "double""'");
  } 
  arg51 = static_cast< double >(val51);
  ecode52 = SWIG_AsVal_double(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "GLOptimiseR" "', argument " "52"" of type '" "double""'");
  } 
  arg52 = static_cast< double >(val52);
  {
    arg53 = 0;
    if(args[52]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[52]);
      if(arr->Length()) {
        arg53 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg53[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GLOptimiseR(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg53 && args[52]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[52]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg53[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  
  
  
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  
  
  {
    if(arg49){
      delete[] arg49;arg49=0;
    }
  }
  
  
  
  {
    if(arg53){
      delete[] arg53;arg53=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GLOptimiseRC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  vector arg11 = (vector) 0 ;
  dimen arg12 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  int arg32 ;
  real arg33 ;
  real arg34 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  int arg45 ;
  char *arg46 = (char *) 0 ;
  long arg47 ;
  long arg48 ;
  double arg49 ;
  vector arg50 = (vector) 0 ;
  double arg51 ;
  double arg52 ;
  double *arg53 = (double *) 0 ;
  double arg54 = (double) -1 ;
  double arg55 = (double) -1 ;
  double arg56 = (double) -1 ;
  int *arg57 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  unsigned int val12 ;
  int ecode12 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  int val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  double val33 ;
  int ecode33 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  double val35 ;
  int ecode35 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  int val45 ;
  int ecode45 = 0 ;
  int res46 ;
  char *buf46 = 0 ;
  int alloc46 = 0 ;
  long val47 ;
  int ecode47 = 0 ;
  long val48 ;
  int ecode48 = 0 ;
  double val49 ;
  int ecode49 = 0 ;
  double val51 ;
  int ecode51 = 0 ;
  double val52 ;
  int ecode52 = 0 ;
  double val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  double val56 ;
  int ecode56 = 0 ;
  short result;
  
  if(args.Length() != 57) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GLOptimiseRC.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GLOptimiseRC" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLOptimiseRC" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GLOptimiseRC" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GLOptimiseRC" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "GLOptimiseRC" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "GLOptimiseRC" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "GLOptimiseRC" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_unsigned_SS_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "GLOptimiseRC" "', argument " "12"" of type '" "dimen""'");
  } 
  arg12 = static_cast< dimen >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "GLOptimiseRC" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "GLOptimiseRC" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "GLOptimiseRC" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "GLOptimiseRC" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "GLOptimiseRC" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "GLOptimiseRC" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "GLOptimiseRC" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_int(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "GLOptimiseRC" "', argument " "31"" of type '" "int""'");
  } 
  arg31 = static_cast< int >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "GLOptimiseRC" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  ecode33 = SWIG_AsVal_double(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "GLOptimiseRC" "', argument " "33"" of type '" "real""'");
  } 
  arg33 = static_cast< real >(val33);
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "GLOptimiseRC" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_double(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "GLOptimiseRC" "', argument " "35"" of type '" "real""'");
  } 
  arg35 = static_cast< real >(val35);
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "GLOptimiseRC" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "GLOptimiseRC" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode45 = SWIG_AsVal_int(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "GLOptimiseRC" "', argument " "45"" of type '" "int""'");
  } 
  arg45 = static_cast< int >(val45);
  res46 = SWIG_AsCharPtrAndSize(args[45], &buf46, NULL, &alloc46);
  if (!SWIG_IsOK(res46)) {
    SWIG_exception_fail(SWIG_ArgError(res46), "in method '" "GLOptimiseRC" "', argument " "46"" of type '" "char *""'");
  }
  arg46 = reinterpret_cast< char * >(buf46);
  ecode47 = SWIG_AsVal_long(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "GLOptimiseRC" "', argument " "47"" of type '" "long""'");
  } 
  arg47 = static_cast< long >(val47);
  ecode48 = SWIG_AsVal_long(args[47], &val48);
  if (!SWIG_IsOK(ecode48)) {
    SWIG_exception_fail(SWIG_ArgError(ecode48), "in method '" "GLOptimiseRC" "', argument " "48"" of type '" "long""'");
  } 
  arg48 = static_cast< long >(val48);
  ecode49 = SWIG_AsVal_double(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "GLOptimiseRC" "', argument " "49"" of type '" "double""'");
  } 
  arg49 = static_cast< double >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_double(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "GLOptimiseRC" "', argument " "51"" of type '" "double""'");
  } 
  arg51 = static_cast< double >(val51);
  ecode52 = SWIG_AsVal_double(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "GLOptimiseRC" "', argument " "52"" of type '" "double""'");
  } 
  arg52 = static_cast< double >(val52);
  {
    arg53 = 0;
    if(args[52]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[52]);
      if(arr->Length()) {
        arg53 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg53[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode54 = SWIG_AsVal_double(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "GLOptimiseRC" "', argument " "54"" of type '" "double""'");
  } 
  arg54 = static_cast< double >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "GLOptimiseRC" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_double(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "GLOptimiseRC" "', argument " "56"" of type '" "double""'");
  } 
  arg56 = static_cast< double >(val56);
  {
    arg57 = 0;
    if(args[56]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[56]);
      if(arr->Length()) {
        arg57 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg57[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GLOptimiseRC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg28[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg53 && args[52]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[52]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg53[i]));
      }
    }
  }
  {
    if(arg57 && args[56]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[56]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg57[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      delete[] arg28;
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  
  
  
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  
  {
    if(arg53){
      delete[] arg53;arg53=0;
    }
  }
  
  
  
  {
    if(arg57){
      delete[] arg57;arg57=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GLProp(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double arg6 ;
  double arg7 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 13) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GLProp.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GLProp" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "GLProp" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GLProp" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "GLProp" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  GLProp(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_bunchf(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  short_scl arg1 ;
  double *arg2 = (double *) 0 ;
  short_scl *arg3 = (short_scl *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  short_scl result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_bunchf.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bunchf" "', argument " "1"" of type '" "short_scl""'");
  } 
  arg1 = static_cast< short_scl >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short_scl)bunchf(arg1,arg2,arg3);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MVLOptimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  unsigned int val30 ;
  int ecode30 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  int val39 ;
  int ecode39 = 0 ;
  int res40 ;
  char *buf40 = 0 ;
  int alloc40 = 0 ;
  long val41 ;
  int ecode41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  short result;
  
  if(args.Length() != 44) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MVLOptimise.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MVLOptimise" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MVLOptimise" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MVLOptimise" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "MVLOptimise" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MVLOptimise" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MVLOptimise" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "MVLOptimise" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "MVLOptimise" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "MVLOptimise" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MVLOptimise" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "MVLOptimise" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MVLOptimise" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "MVLOptimise" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "MVLOptimise" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "MVLOptimise" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "MVLOptimise" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "MVLOptimise" "', argument " "28"" of type '" "real""'");
  } 
  arg28 = static_cast< real >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "MVLOptimise" "', argument " "29"" of type '" "real""'");
  } 
  arg29 = static_cast< real >(val29);
  ecode30 = SWIG_AsVal_unsigned_SS_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "MVLOptimise" "', argument " "30"" of type '" "dimen""'");
  } 
  arg30 = static_cast< dimen >(val30);
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "MVLOptimise" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode39 = SWIG_AsVal_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "MVLOptimise" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  res40 = SWIG_AsCharPtrAndSize(args[39], &buf40, NULL, &alloc40);
  if (!SWIG_IsOK(res40)) {
    SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "MVLOptimise" "', argument " "40"" of type '" "char *""'");
  }
  arg40 = reinterpret_cast< char * >(buf40);
  ecode41 = SWIG_AsVal_long(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "MVLOptimise" "', argument " "41"" of type '" "long""'");
  } 
  arg41 = static_cast< long >(val41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "MVLOptimise" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "MVLOptimise" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)MVLOptimise(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      delete[] arg35;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  
  
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MVLOptimiseg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  double *arg45 = (double *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  unsigned int val30 ;
  int ecode30 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  int val39 ;
  int ecode39 = 0 ;
  int res40 ;
  char *buf40 = 0 ;
  int alloc40 = 0 ;
  long val41 ;
  int ecode41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  short result;
  
  if(args.Length() != 45) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MVLOptimiseg.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MVLOptimiseg" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MVLOptimiseg" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MVLOptimiseg" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "MVLOptimiseg" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MVLOptimiseg" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MVLOptimiseg" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "MVLOptimiseg" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "MVLOptimiseg" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "MVLOptimiseg" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MVLOptimiseg" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "MVLOptimiseg" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MVLOptimiseg" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "MVLOptimiseg" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "MVLOptimiseg" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "MVLOptimiseg" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "MVLOptimiseg" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "MVLOptimiseg" "', argument " "28"" of type '" "real""'");
  } 
  arg28 = static_cast< real >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "MVLOptimiseg" "', argument " "29"" of type '" "real""'");
  } 
  arg29 = static_cast< real >(val29);
  ecode30 = SWIG_AsVal_unsigned_SS_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "MVLOptimiseg" "', argument " "30"" of type '" "dimen""'");
  } 
  arg30 = static_cast< dimen >(val30);
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "MVLOptimiseg" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode39 = SWIG_AsVal_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "MVLOptimiseg" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  res40 = SWIG_AsCharPtrAndSize(args[39], &buf40, NULL, &alloc40);
  if (!SWIG_IsOK(res40)) {
    SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "MVLOptimiseg" "', argument " "40"" of type '" "char *""'");
  }
  arg40 = reinterpret_cast< char * >(buf40);
  ecode41 = SWIG_AsVal_long(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "MVLOptimiseg" "', argument " "41"" of type '" "long""'");
  } 
  arg41 = static_cast< long >(val41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "MVLOptimiseg" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "MVLOptimiseg" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)MVLOptimiseg(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      delete[] arg35;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  
  
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MVLOptimiseR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  real arg29 ;
  dimen arg30 ;
  vector arg31 = (vector) 0 ;
  dimen arg32 ;
  dimen *arg33 = (dimen *) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  int arg39 ;
  char *arg40 = (char *) 0 ;
  long arg41 ;
  long arg42 ;
  double arg43 ;
  vector arg44 = (vector) 0 ;
  double arg45 ;
  double arg46 ;
  double *arg47 = (double *) 0 ;
  double arg48 = (double) -1 ;
  double arg49 = (double) -1 ;
  double arg50 = (double) -1 ;
  int *arg51 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  unsigned int val30 ;
  int ecode30 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  int val39 ;
  int ecode39 = 0 ;
  int res40 ;
  char *buf40 = 0 ;
  int alloc40 = 0 ;
  long val41 ;
  int ecode41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val45 ;
  int ecode45 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val48 ;
  int ecode48 = 0 ;
  double val49 ;
  int ecode49 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  short result;
  
  if(args.Length() != 51) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MVLOptimiseR.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MVLOptimiseR" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MVLOptimiseR" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MVLOptimiseR" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "MVLOptimiseR" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MVLOptimiseR" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MVLOptimiseR" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "MVLOptimiseR" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "MVLOptimiseR" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "MVLOptimiseR" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MVLOptimiseR" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "MVLOptimiseR" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "MVLOptimiseR" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "MVLOptimiseR" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "MVLOptimiseR" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "MVLOptimiseR" "', argument " "28"" of type '" "real""'");
  } 
  arg28 = static_cast< real >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "MVLOptimiseR" "', argument " "29"" of type '" "real""'");
  } 
  arg29 = static_cast< real >(val29);
  ecode30 = SWIG_AsVal_unsigned_SS_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "MVLOptimiseR" "', argument " "30"" of type '" "dimen""'");
  } 
  arg30 = static_cast< dimen >(val30);
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "MVLOptimiseR" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode39 = SWIG_AsVal_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "MVLOptimiseR" "', argument " "39"" of type '" "int""'");
  } 
  arg39 = static_cast< int >(val39);
  res40 = SWIG_AsCharPtrAndSize(args[39], &buf40, NULL, &alloc40);
  if (!SWIG_IsOK(res40)) {
    SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "MVLOptimiseR" "', argument " "40"" of type '" "char *""'");
  }
  arg40 = reinterpret_cast< char * >(buf40);
  ecode41 = SWIG_AsVal_long(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "MVLOptimiseR" "', argument " "41"" of type '" "long""'");
  } 
  arg41 = static_cast< long >(val41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "MVLOptimiseR" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "MVLOptimiseR" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode45 = SWIG_AsVal_double(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "MVLOptimiseR" "', argument " "45"" of type '" "double""'");
  } 
  arg45 = static_cast< double >(val45);
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "MVLOptimiseR" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode48 = SWIG_AsVal_double(args[47], &val48);
  if (!SWIG_IsOK(ecode48)) {
    SWIG_exception_fail(SWIG_ArgError(ecode48), "in method '" "MVLOptimiseR" "', argument " "48"" of type '" "double""'");
  } 
  arg48 = static_cast< double >(val48);
  ecode49 = SWIG_AsVal_double(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "MVLOptimiseR" "', argument " "49"" of type '" "double""'");
  } 
  arg49 = static_cast< double >(val49);
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "MVLOptimiseR" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)MVLOptimiseR(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg51[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  
  
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  
  
  
  
  
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      delete[] arg35;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  
  
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  
  
  {
    if(arg47){
      delete[] arg47;arg47=0;
    }
  }
  
  
  
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MVLOptimiseRC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  double arg7 ;
  double arg8 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  vector arg18 = (vector) 0 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  int arg22 ;
  int arg23 ;
  double arg24 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  int arg29 ;
  int arg30 ;
  real arg31 ;
  real arg32 ;
  real arg33 ;
  dimen arg34 ;
  vector arg35 = (vector) 0 ;
  dimen arg36 ;
  dimen *arg37 = (dimen *) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  int arg43 ;
  char *arg44 = (char *) 0 ;
  long arg45 ;
  long arg46 ;
  double arg47 ;
  vector arg48 = (vector) 0 ;
  double arg49 ;
  double arg50 ;
  double *arg51 = (double *) 0 ;
  double arg52 = (double) -1 ;
  double arg53 = (double) -1 ;
  double arg54 = (double) -1 ;
  int *arg55 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  int val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  int val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  double val32 ;
  int ecode32 = 0 ;
  double val33 ;
  int ecode33 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  int val43 ;
  int ecode43 = 0 ;
  int res44 ;
  char *buf44 = 0 ;
  int alloc44 = 0 ;
  long val45 ;
  int ecode45 = 0 ;
  long val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  double val49 ;
  int ecode49 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  double val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  double val54 ;
  int ecode54 = 0 ;
  short result;
  
  if(args.Length() != 55) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MVLOptimiseRC.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MVLOptimiseRC" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MVLOptimiseRC" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MVLOptimiseRC" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "MVLOptimiseRC" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MVLOptimiseRC" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MVLOptimiseRC" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "MVLOptimiseRC" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "MVLOptimiseRC" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "MVLOptimiseRC" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MVLOptimiseRC" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "MVLOptimiseRC" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_int(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MVLOptimiseRC" "', argument " "23"" of type '" "int""'");
  } 
  arg23 = static_cast< int >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "MVLOptimiseRC" "', argument " "24"" of type '" "double""'");
  } 
  arg24 = static_cast< double >(val24);
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "MVLOptimiseRC" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "MVLOptimiseRC" "', argument " "30"" of type '" "int""'");
  } 
  arg30 = static_cast< int >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "MVLOptimiseRC" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_double(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "MVLOptimiseRC" "', argument " "32"" of type '" "real""'");
  } 
  arg32 = static_cast< real >(val32);
  ecode33 = SWIG_AsVal_double(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "MVLOptimiseRC" "', argument " "33"" of type '" "real""'");
  } 
  arg33 = static_cast< real >(val33);
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "MVLOptimiseRC" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "MVLOptimiseRC" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode43 = SWIG_AsVal_int(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "MVLOptimiseRC" "', argument " "43"" of type '" "int""'");
  } 
  arg43 = static_cast< int >(val43);
  res44 = SWIG_AsCharPtrAndSize(args[43], &buf44, NULL, &alloc44);
  if (!SWIG_IsOK(res44)) {
    SWIG_exception_fail(SWIG_ArgError(res44), "in method '" "MVLOptimiseRC" "', argument " "44"" of type '" "char *""'");
  }
  arg44 = reinterpret_cast< char * >(buf44);
  ecode45 = SWIG_AsVal_long(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "MVLOptimiseRC" "', argument " "45"" of type '" "long""'");
  } 
  arg45 = static_cast< long >(val45);
  ecode46 = SWIG_AsVal_long(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "MVLOptimiseRC" "', argument " "46"" of type '" "long""'");
  } 
  arg46 = static_cast< long >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "MVLOptimiseRC" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode49 = SWIG_AsVal_double(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "MVLOptimiseRC" "', argument " "49"" of type '" "double""'");
  } 
  arg49 = static_cast< double >(val49);
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "MVLOptimiseRC" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode52 = SWIG_AsVal_double(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "MVLOptimiseRC" "', argument " "52"" of type '" "double""'");
  } 
  arg52 = static_cast< double >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "MVLOptimiseRC" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_double(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "MVLOptimiseRC" "', argument " "54"" of type '" "double""'");
  } 
  arg54 = static_cast< double >(val54);
  {
    arg55 = 0;
    if(args[54]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[54]);
      if(arr->Length()) {
        arg55 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg55[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)MVLOptimiseRC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg28[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg51[i]));
      }
    }
  }
  {
    if(arg55 && args[54]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[54]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg55[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  
  
  
  
  
  
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      delete[] arg28;
    }
  }
  
  
  
  
  
  
  {
    if(arg35 && args[34]->IsArray()) {
      delete[] arg35;
    }
  }
  
  {
    if(arg37){
      delete[] arg37;arg37=0;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  
  
  
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  
  
  {
    if(arg51){
      delete[] arg51;arg51=0;
    }
  }
  
  
  
  {
    if(arg55){
      delete[] arg55;arg55=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GLO_internal_model(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GLO_internal_model.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GLO_internal_model" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GLO_internal_model" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  GLO_internal_model(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CvarOptimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double arg5 ;
  double arg6 ;
  char **arg7 = (char **) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  long arg19 ;
  long arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  double arg32 ;
  size_t arg33 ;
  vector arg34 = (vector) 0 ;
  size_t arg35 ;
  dimen *arg36 = (dimen *) 0 ;
  vector arg37 = (vector) 0 ;
  double *arg38 = (double *) 0 ;
  vector arg39 = (vector) 0 ;
  int arg40 ;
  char *arg41 = (char *) 0 ;
  long arg42 ;
  long arg43 ;
  double arg44 ;
  vector arg45 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  size_t val9 ;
  int ecode9 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  double val32 ;
  int ecode32 = 0 ;
  size_t val33 ;
  int ecode33 = 0 ;
  size_t val35 ;
  int ecode35 = 0 ;
  int val40 ;
  int ecode40 = 0 ;
  int res41 ;
  char *buf41 = 0 ;
  int alloc41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  long val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short result;
  
  if(args.Length() != 45) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CvarOptimise.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CvarOptimise" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CvarOptimise" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CvarOptimise" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CvarOptimise" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CvarOptimise" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    arg7 = 0;
    
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()){
        arg7 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg7[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_size_t(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CvarOptimise" "', argument " "9"" of type '" "size_t""'");
  } 
  arg9 = static_cast< size_t >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "CvarOptimise" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "CvarOptimise" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "CvarOptimise" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "CvarOptimise" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "CvarOptimise" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "CvarOptimise" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "CvarOptimise" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "CvarOptimise" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "CvarOptimise" "', argument " "27"" of type '" "double""'");
  } 
  arg27 = static_cast< double >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "CvarOptimise" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_double(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "CvarOptimise" "', argument " "32"" of type '" "double""'");
  } 
  arg32 = static_cast< double >(val32);
  ecode33 = SWIG_AsVal_size_t(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "CvarOptimise" "', argument " "33"" of type '" "size_t""'");
  } 
  arg33 = static_cast< size_t >(val33);
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode35 = SWIG_AsVal_size_t(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "CvarOptimise" "', argument " "35"" of type '" "size_t""'");
  } 
  arg35 = static_cast< size_t >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "CvarOptimise" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  res41 = SWIG_AsCharPtrAndSize(args[40], &buf41, NULL, &alloc41);
  if (!SWIG_IsOK(res41)) {
    SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "CvarOptimise" "', argument " "41"" of type '" "char *""'");
  }
  arg41 = reinterpret_cast< char * >(buf41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "CvarOptimise" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  ecode43 = SWIG_AsVal_long(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "CvarOptimise" "', argument " "43"" of type '" "long""'");
  } 
  arg43 = static_cast< long >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "CvarOptimise" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)CvarOptimise(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  
  
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CvarOptimiseC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  double arg5 ;
  double arg6 ;
  char **arg7 = (char **) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  double arg16 ;
  vector arg17 = (vector) 0 ;
  double arg18 ;
  long arg19 ;
  long arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  double arg32 ;
  size_t arg33 ;
  vector arg34 = (vector) 0 ;
  size_t arg35 ;
  dimen *arg36 = (dimen *) 0 ;
  vector arg37 = (vector) 0 ;
  double *arg38 = (double *) 0 ;
  vector arg39 = (vector) 0 ;
  int arg40 ;
  char *arg41 = (char *) 0 ;
  long arg42 ;
  long arg43 ;
  double arg44 ;
  vector arg45 = (vector) 0 ;
  int arg46 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  int arg49 ;
  double arg50 ;
  double arg51 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  size_t val9 ;
  int ecode9 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  double val32 ;
  int ecode32 = 0 ;
  size_t val33 ;
  int ecode33 = 0 ;
  size_t val35 ;
  int ecode35 = 0 ;
  int val40 ;
  int ecode40 = 0 ;
  int res41 ;
  char *buf41 = 0 ;
  int alloc41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  long val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  int val46 ;
  int ecode46 = 0 ;
  int val49 ;
  int ecode49 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  double val51 ;
  int ecode51 = 0 ;
  short result;
  
  if(args.Length() != 51) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CvarOptimiseC.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CvarOptimiseC" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CvarOptimiseC" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CvarOptimiseC" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CvarOptimiseC" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CvarOptimiseC" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    arg7 = 0;
    
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()){
        arg7 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg7[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_size_t(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "CvarOptimiseC" "', argument " "9"" of type '" "size_t""'");
  } 
  arg9 = static_cast< size_t >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "CvarOptimiseC" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "CvarOptimiseC" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "CvarOptimiseC" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "CvarOptimiseC" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "CvarOptimiseC" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "CvarOptimiseC" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "CvarOptimiseC" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "CvarOptimiseC" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "CvarOptimiseC" "', argument " "27"" of type '" "double""'");
  } 
  arg27 = static_cast< double >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "CvarOptimiseC" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_double(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "CvarOptimiseC" "', argument " "32"" of type '" "double""'");
  } 
  arg32 = static_cast< double >(val32);
  ecode33 = SWIG_AsVal_size_t(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "CvarOptimiseC" "', argument " "33"" of type '" "size_t""'");
  } 
  arg33 = static_cast< size_t >(val33);
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode35 = SWIG_AsVal_size_t(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "CvarOptimiseC" "', argument " "35"" of type '" "size_t""'");
  } 
  arg35 = static_cast< size_t >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "CvarOptimiseC" "', argument " "40"" of type '" "int""'");
  } 
  arg40 = static_cast< int >(val40);
  res41 = SWIG_AsCharPtrAndSize(args[40], &buf41, NULL, &alloc41);
  if (!SWIG_IsOK(res41)) {
    SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "CvarOptimiseC" "', argument " "41"" of type '" "char *""'");
  }
  arg41 = reinterpret_cast< char * >(buf41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "CvarOptimiseC" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  ecode43 = SWIG_AsVal_long(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "CvarOptimiseC" "', argument " "43"" of type '" "long""'");
  } 
  arg43 = static_cast< long >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "CvarOptimiseC" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_int(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "CvarOptimiseC" "', argument " "46"" of type '" "int""'");
  } 
  arg46 = static_cast< int >(val46);
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode49 = SWIG_AsVal_int(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "CvarOptimiseC" "', argument " "49"" of type '" "int""'");
  } 
  arg49 = static_cast< int >(val49);
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "CvarOptimiseC" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  ecode51 = SWIG_AsVal_double(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "CvarOptimiseC" "', argument " "51"" of type '" "double""'");
  } 
  arg51 = static_cast< double >(val51);
  result = (short)CvarOptimiseC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  
  
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  
  {
    if(arg36){
      delete[] arg36;arg36=0;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38){
      delete[] arg38;arg38=0;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  
  
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SemiVariance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SemiVariance.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SemiVariance" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SemiVariance" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)SemiVariance(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GradSemiVariance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GradSemiVariance.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GradSemiVariance" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GradSemiVariance" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  GradSemiVariance(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_HessSemiVariance(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_HessSemiVariance.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "HessSemiVariance" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HessSemiVariance" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  HessSemiVariance(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SemiVarOptimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  long arg15 ;
  long arg16 ;
  int arg17 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  real arg24 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  dimen arg27 ;
  dimen *arg28 = (dimen *) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  char *arg32 = (char *) 0 ;
  long arg33 ;
  long arg34 ;
  double arg35 ;
  vector arg36 = (vector) 0 ;
  double arg37 = (double) -1 ;
  double arg38 = (double) -1 ;
  double *arg39 = (double *) 0 ;
  double arg40 = (double) -1 ;
  double arg41 = (double) -1 ;
  double arg42 = (double) -1 ;
  int *arg43 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  long val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  unsigned int val25 ;
  int ecode25 = 0 ;
  unsigned int val27 ;
  int ecode27 = 0 ;
  int val31 ;
  int ecode31 = 0 ;
  int res32 ;
  char *buf32 = 0 ;
  int alloc32 = 0 ;
  long val33 ;
  int ecode33 = 0 ;
  long val34 ;
  int ecode34 = 0 ;
  double val35 ;
  int ecode35 = 0 ;
  double val37 ;
  int ecode37 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  double val40 ;
  int ecode40 = 0 ;
  double val41 ;
  int ecode41 = 0 ;
  double val42 ;
  int ecode42 = 0 ;
  short result;
  
  if(args.Length() != 43) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SemiVarOptimise.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SemiVarOptimise" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SemiVarOptimise" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SemiVarOptimise" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SemiVarOptimise" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SemiVarOptimise" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_long(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SemiVarOptimise" "', argument " "15"" of type '" "long""'");
  } 
  arg15 = static_cast< long >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SemiVarOptimise" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SemiVarOptimise" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SemiVarOptimise" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "SemiVarOptimise" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "SemiVarOptimise" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "SemiVarOptimise" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "SemiVarOptimise" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_unsigned_SS_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "SemiVarOptimise" "', argument " "25"" of type '" "dimen""'");
  } 
  arg25 = static_cast< dimen >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode27 = SWIG_AsVal_unsigned_SS_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "SemiVarOptimise" "', argument " "27"" of type '" "dimen""'");
  } 
  arg27 = static_cast< dimen >(val27);
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_int(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "SemiVarOptimise" "', argument " "31"" of type '" "int""'");
  } 
  arg31 = static_cast< int >(val31);
  res32 = SWIG_AsCharPtrAndSize(args[31], &buf32, NULL, &alloc32);
  if (!SWIG_IsOK(res32)) {
    SWIG_exception_fail(SWIG_ArgError(res32), "in method '" "SemiVarOptimise" "', argument " "32"" of type '" "char *""'");
  }
  arg32 = reinterpret_cast< char * >(buf32);
  ecode33 = SWIG_AsVal_long(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "SemiVarOptimise" "', argument " "33"" of type '" "long""'");
  } 
  arg33 = static_cast< long >(val33);
  ecode34 = SWIG_AsVal_long(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "SemiVarOptimise" "', argument " "34"" of type '" "long""'");
  } 
  arg34 = static_cast< long >(val34);
  ecode35 = SWIG_AsVal_double(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "SemiVarOptimise" "', argument " "35"" of type '" "double""'");
  } 
  arg35 = static_cast< double >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode37 = SWIG_AsVal_double(args[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "SemiVarOptimise" "', argument " "37"" of type '" "double""'");
  } 
  arg37 = static_cast< double >(val37);
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "SemiVarOptimise" "', argument " "38"" of type '" "double""'");
  } 
  arg38 = static_cast< double >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_double(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "SemiVarOptimise" "', argument " "40"" of type '" "double""'");
  } 
  arg40 = static_cast< double >(val40);
  ecode41 = SWIG_AsVal_double(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "SemiVarOptimise" "', argument " "41"" of type '" "double""'");
  } 
  arg41 = static_cast< double >(val41);
  ecode42 = SWIG_AsVal_double(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "SemiVarOptimise" "', argument " "42"" of type '" "double""'");
  } 
  arg42 = static_cast< double >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)SemiVarOptimise(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg43[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  {
    if(arg32 && args[31]->IsArray()) {
      delete[] arg32;
    }
  }
  
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  
  
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  
  
  
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SemiVarOptimiseT(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  char **arg2 = (char **) 0 ;
  size_t arg3 ;
  double *arg4 = (double *) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  long arg15 ;
  long arg16 ;
  int arg17 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  real arg24 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  dimen arg27 ;
  dimen *arg28 = (dimen *) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int arg31 ;
  char *arg32 = (char *) 0 ;
  long arg33 ;
  long arg34 ;
  double arg35 ;
  vector arg36 = (vector) 0 ;
  double arg37 = (double) -1 ;
  double arg38 = (double) -1 ;
  double *arg39 = (double *) 0 ;
  double arg40 = (double) -1 ;
  double arg41 = (double) -1 ;
  double arg42 = (double) -1 ;
  int *arg43 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  long val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  unsigned int val25 ;
  int ecode25 = 0 ;
  unsigned int val27 ;
  int ecode27 = 0 ;
  int val31 ;
  int ecode31 = 0 ;
  int res32 ;
  char *buf32 = 0 ;
  int alloc32 = 0 ;
  long val33 ;
  int ecode33 = 0 ;
  long val34 ;
  int ecode34 = 0 ;
  double val35 ;
  int ecode35 = 0 ;
  double val37 ;
  int ecode37 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  double val40 ;
  int ecode40 = 0 ;
  double val41 ;
  int ecode41 = 0 ;
  double val42 ;
  int ecode42 = 0 ;
  short result;
  
  if(args.Length() != 43) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SemiVarOptimiseT.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SemiVarOptimiseT" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()){
        arg2 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg2[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SemiVarOptimiseT" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "SemiVarOptimiseT" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SemiVarOptimiseT" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SemiVarOptimiseT" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_long(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SemiVarOptimiseT" "', argument " "15"" of type '" "long""'");
  } 
  arg15 = static_cast< long >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SemiVarOptimiseT" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SemiVarOptimiseT" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SemiVarOptimiseT" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "SemiVarOptimiseT" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "SemiVarOptimiseT" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "SemiVarOptimiseT" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "SemiVarOptimiseT" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_unsigned_SS_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "SemiVarOptimiseT" "', argument " "25"" of type '" "dimen""'");
  } 
  arg25 = static_cast< dimen >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode27 = SWIG_AsVal_unsigned_SS_int(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "SemiVarOptimiseT" "', argument " "27"" of type '" "dimen""'");
  } 
  arg27 = static_cast< dimen >(val27);
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_int(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "SemiVarOptimiseT" "', argument " "31"" of type '" "int""'");
  } 
  arg31 = static_cast< int >(val31);
  res32 = SWIG_AsCharPtrAndSize(args[31], &buf32, NULL, &alloc32);
  if (!SWIG_IsOK(res32)) {
    SWIG_exception_fail(SWIG_ArgError(res32), "in method '" "SemiVarOptimiseT" "', argument " "32"" of type '" "char *""'");
  }
  arg32 = reinterpret_cast< char * >(buf32);
  ecode33 = SWIG_AsVal_long(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "SemiVarOptimiseT" "', argument " "33"" of type '" "long""'");
  } 
  arg33 = static_cast< long >(val33);
  ecode34 = SWIG_AsVal_long(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "SemiVarOptimiseT" "', argument " "34"" of type '" "long""'");
  } 
  arg34 = static_cast< long >(val34);
  ecode35 = SWIG_AsVal_double(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "SemiVarOptimiseT" "', argument " "35"" of type '" "double""'");
  } 
  arg35 = static_cast< double >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode37 = SWIG_AsVal_double(args[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "SemiVarOptimiseT" "', argument " "37"" of type '" "double""'");
  } 
  arg37 = static_cast< double >(val37);
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "SemiVarOptimiseT" "', argument " "38"" of type '" "double""'");
  } 
  arg38 = static_cast< double >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_double(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "SemiVarOptimiseT" "', argument " "40"" of type '" "double""'");
  } 
  arg40 = static_cast< double >(val40);
  ecode41 = SWIG_AsVal_double(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "SemiVarOptimiseT" "', argument " "41"" of type '" "double""'");
  } 
  arg41 = static_cast< double >(val41);
  ecode42 = SWIG_AsVal_double(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "SemiVarOptimiseT" "', argument " "42"" of type '" "double""'");
  } 
  arg42 = static_cast< double >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)SemiVarOptimiseT(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg43[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  {
    if(arg32 && args[31]->IsArray()) {
      delete[] arg32;
    }
  }
  
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  
  
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  
  
  
  {
    if(arg43){
      delete[] arg43;arg43=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CVarValue(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CVarValue.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CVarValue" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVarValue" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CVarValue" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)CVarValue(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CVarGrad(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CVarGrad.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CVarGrad" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVarGrad" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CVarGrad" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  CVarGrad(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CVarValueO(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CVarValueO.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CVarValueO" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVarValueO" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CVarValueO" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)CVarValueO(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CVarValuen(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CVarValuen.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CVarValuen" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CVarValuen" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CVarValuen" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (double)CVarValuen(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptCVar(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  double arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  int arg10 = (int) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  short result;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptCVar.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptCVar" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptCVar" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptCVar" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "OptCVar" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "OptCVar" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptCVar(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  
  
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptGL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double arg10 ;
  int arg11 = (int) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  short result;
  
  if(args.Length() != 13) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptGL.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptGL" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptGL" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptGL" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_double(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "OptGL" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "OptGL" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptGL(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_AQAmake(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_AQAmake.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "AQAmake" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AQAmake" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)AQAmake(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FixedAtEnd(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FixedAtEnd.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FixedAtEnd" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)FixedAtEnd(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SOCPportfolio(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  int arg12 = (int) 0 ;
  double arg13 = (double) -1 ;
  double arg14 = (double) -1 ;
  double arg15 = (double) -1 ;
  double arg16 = (double) 1 ;
  double arg17 = (double) -1 ;
  double arg18 = (double) -1 ;
  double arg19 = (double) -1 ;
  size_t arg20 = (size_t) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  long arg25 = (long) -1 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  double arg28 = (double) -1 ;
  double arg29 = (double) -1 ;
  int arg30 = (int) 0 ;
  double arg31 = (double) 0 ;
  double *arg32 = (double *) 0 ;
  double *arg33 = (double *) 0 ;
  double *arg34 = (double *) 0 ;
  double *arg35 = (double *) 0 ;
  char *arg36 = (char *) 0 ;
  int arg37 = (int) 1 ;
  char *arg38 = (char *) 0 ;
  vector arg39 = (vector) 0 ;
  vector arg40 = (vector) 0 ;
  long arg41 = (long) -1 ;
  long arg42 = (long) -1 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  double arg45 = (double) -1 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  int *arg48 = (int *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  size_t val20 ;
  int ecode20 = 0 ;
  long val25 ;
  int ecode25 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  int val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int res36 ;
  char *buf36 = 0 ;
  int alloc36 = 0 ;
  int val37 ;
  int ecode37 = 0 ;
  int res38 ;
  char *buf38 = 0 ;
  int alloc38 = 0 ;
  long val41 ;
  int ecode41 = 0 ;
  long val42 ;
  int ecode42 = 0 ;
  double val45 ;
  int ecode45 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  short result;
  
  if(args.Length() != 48) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SOCPportfolio.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SOCPportfolio" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SOCPportfolio" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "SOCPportfolio" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SOCPportfolio" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SOCPportfolio" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SOCPportfolio" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SOCPportfolio" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "SOCPportfolio" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "SOCPportfolio" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "SOCPportfolio" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_size_t(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "SOCPportfolio" "', argument " "20"" of type '" "size_t""'");
  } 
  arg20 = static_cast< size_t >(val20);
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode25 = SWIG_AsVal_long(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "SOCPportfolio" "', argument " "25"" of type '" "long""'");
  } 
  arg25 = static_cast< long >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "SOCPportfolio" "', argument " "28"" of type '" "double""'");
  } 
  arg28 = static_cast< double >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "SOCPportfolio" "', argument " "29"" of type '" "double""'");
  } 
  arg29 = static_cast< double >(val29);
  ecode30 = SWIG_AsVal_int(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "SOCPportfolio" "', argument " "30"" of type '" "int""'");
  } 
  arg30 = static_cast< int >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "SOCPportfolio" "', argument " "31"" of type '" "double""'");
  } 
  arg31 = static_cast< double >(val31);
  {
    arg32 = 0;
    if(args[31]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      if(arr->Length()) {
        arg32 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg32[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  res36 = SWIG_AsCharPtrAndSize(args[35], &buf36, NULL, &alloc36);
  if (!SWIG_IsOK(res36)) {
    SWIG_exception_fail(SWIG_ArgError(res36), "in method '" "SOCPportfolio" "', argument " "36"" of type '" "char *""'");
  }
  arg36 = reinterpret_cast< char * >(buf36);
  ecode37 = SWIG_AsVal_int(args[36], &val37);
  if (!SWIG_IsOK(ecode37)) {
    SWIG_exception_fail(SWIG_ArgError(ecode37), "in method '" "SOCPportfolio" "', argument " "37"" of type '" "int""'");
  } 
  arg37 = static_cast< int >(val37);
  res38 = SWIG_AsCharPtrAndSize(args[37], &buf38, NULL, &alloc38);
  if (!SWIG_IsOK(res38)) {
    SWIG_exception_fail(SWIG_ArgError(res38), "in method '" "SOCPportfolio" "', argument " "38"" of type '" "char *""'");
  }
  arg38 = reinterpret_cast< char * >(buf38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode41 = SWIG_AsVal_long(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "SOCPportfolio" "', argument " "41"" of type '" "long""'");
  } 
  arg41 = static_cast< long >(val41);
  ecode42 = SWIG_AsVal_long(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "SOCPportfolio" "', argument " "42"" of type '" "long""'");
  } 
  arg42 = static_cast< long >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode45 = SWIG_AsVal_double(args[44], &val45);
  if (!SWIG_IsOK(ecode45)) {
    SWIG_exception_fail(SWIG_ArgError(ecode45), "in method '" "SOCPportfolio" "', argument " "45"" of type '" "double""'");
  } 
  arg45 = static_cast< double >(val45);
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "SOCPportfolio" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "SOCPportfolio" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)SOCPportfolio(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg32 && args[31]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg32[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg48[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  
  
  
  
  
  
  
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  
  
  
  
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  {
    if(arg33){
      delete[] arg33;arg33=0;
    }
  }
  {
    if(arg34){
      delete[] arg34;arg34=0;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getmacaddress(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getmacaddress.");
  
  getmacaddress();
  jsresult = SWIGV8_UNDEFINED();
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_remtime(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_remtime.");
  
  result = (int)remtime();
  jsresult = SWIG_From_int(static_cast< int >(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_Entropy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  double arg40 ;
  double arg41 ;
  double *arg42 = (double *) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 ;
  char *arg45 = (char *) 0 ;
  long arg46 ;
  long arg47 ;
  long arg48 ;
  long arg49 ;
  double arg50 ;
  vector arg51 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  double val40 ;
  int ecode40 = 0 ;
  double val41 ;
  int ecode41 = 0 ;
  int val44 ;
  int ecode44 = 0 ;
  int res45 ;
  char *buf45 = 0 ;
  int alloc45 = 0 ;
  long val46 ;
  int ecode46 = 0 ;
  long val47 ;
  int ecode47 = 0 ;
  long val48 ;
  int ecode48 = 0 ;
  long val49 ;
  int ecode49 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  short result;
  
  if(args.Length() != 51) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_Entropy.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_Entropy" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_Entropy" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_Entropy" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_Entropy" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Optimise_Entropy" "', argument " "13"" of type '" "real""'");
  } 
  arg13 = static_cast< real >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_Entropy" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_Entropy" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_Entropy" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_Entropy" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_Entropy" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_Entropy" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_Entropy" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_Entropy" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_Entropy" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_Entropy" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_Entropy" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_Entropy" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_Entropy" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_double(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_Entropy" "', argument " "40"" of type '" "double""'");
  } 
  arg40 = static_cast< double >(val40);
  ecode41 = SWIG_AsVal_double(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "Optimise_Entropy" "', argument " "41"" of type '" "double""'");
  } 
  arg41 = static_cast< double >(val41);
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_Entropy" "', argument " "44"" of type '" "int""'");
  } 
  arg44 = static_cast< int >(val44);
  res45 = SWIG_AsCharPtrAndSize(args[44], &buf45, NULL, &alloc45);
  if (!SWIG_IsOK(res45)) {
    SWIG_exception_fail(SWIG_ArgError(res45), "in method '" "Optimise_Entropy" "', argument " "45"" of type '" "char *""'");
  }
  arg45 = reinterpret_cast< char * >(buf45);
  ecode46 = SWIG_AsVal_long(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_Entropy" "', argument " "46"" of type '" "long""'");
  } 
  arg46 = static_cast< long >(val46);
  ecode47 = SWIG_AsVal_long(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_Entropy" "', argument " "47"" of type '" "long""'");
  } 
  arg47 = static_cast< long >(val47);
  ecode48 = SWIG_AsVal_long(args[47], &val48);
  if (!SWIG_IsOK(ecode48)) {
    SWIG_exception_fail(SWIG_ArgError(ecode48), "in method '" "Optimise_Entropy" "', argument " "48"" of type '" "long""'");
  } 
  arg48 = static_cast< long >(val48);
  ecode49 = SWIG_AsVal_long(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_Entropy" "', argument " "49"" of type '" "long""'");
  } 
  arg49 = static_cast< long >(val49);
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_Entropy" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_Entropy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg51[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  
  
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EntropyUtility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  vector arg10 = (vector) 0 ;
  real *arg11 = (real *) 0 ;
  real *arg12 = (real *) 0 ;
  vector arg13 = (vector) 0 ;
  dimen arg14 ;
  vector arg15 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val14 ;
  int ecode14 = 0 ;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EntropyUtility.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EntropyUtility" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "EntropyUtility" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "EntropyUtility" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "EntropyUtility" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_unsigned_SS_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "EntropyUtility" "', argument " "14"" of type '" "dimen""'");
  } 
  arg14 = static_cast< dimen >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  EntropyUtility(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_EntropyU(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  double arg40 ;
  double arg41 ;
  double *arg42 = (double *) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 ;
  char *arg45 = (char *) 0 ;
  long arg46 ;
  long arg47 ;
  long arg48 ;
  long arg49 ;
  double arg50 ;
  vector arg51 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  double val40 ;
  int ecode40 = 0 ;
  double val41 ;
  int ecode41 = 0 ;
  int val44 ;
  int ecode44 = 0 ;
  int res45 ;
  char *buf45 = 0 ;
  int alloc45 = 0 ;
  long val46 ;
  int ecode46 = 0 ;
  long val47 ;
  int ecode47 = 0 ;
  long val48 ;
  int ecode48 = 0 ;
  long val49 ;
  int ecode49 = 0 ;
  double val50 ;
  int ecode50 = 0 ;
  short result;
  
  if(args.Length() != 51) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_EntropyU.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_EntropyU" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_EntropyU" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_EntropyU" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_EntropyU" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Optimise_EntropyU" "', argument " "13"" of type '" "real""'");
  } 
  arg13 = static_cast< real >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_EntropyU" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_EntropyU" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_EntropyU" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_EntropyU" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_EntropyU" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_EntropyU" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_EntropyU" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_EntropyU" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_EntropyU" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_EntropyU" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_EntropyU" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_EntropyU" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_EntropyU" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_double(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_EntropyU" "', argument " "40"" of type '" "double""'");
  } 
  arg40 = static_cast< double >(val40);
  ecode41 = SWIG_AsVal_double(args[40], &val41);
  if (!SWIG_IsOK(ecode41)) {
    SWIG_exception_fail(SWIG_ArgError(ecode41), "in method '" "Optimise_EntropyU" "', argument " "41"" of type '" "double""'");
  } 
  arg41 = static_cast< double >(val41);
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_EntropyU" "', argument " "44"" of type '" "int""'");
  } 
  arg44 = static_cast< int >(val44);
  res45 = SWIG_AsCharPtrAndSize(args[44], &buf45, NULL, &alloc45);
  if (!SWIG_IsOK(res45)) {
    SWIG_exception_fail(SWIG_ArgError(res45), "in method '" "Optimise_EntropyU" "', argument " "45"" of type '" "char *""'");
  }
  arg45 = reinterpret_cast< char * >(buf45);
  ecode46 = SWIG_AsVal_long(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_EntropyU" "', argument " "46"" of type '" "long""'");
  } 
  arg46 = static_cast< long >(val46);
  ecode47 = SWIG_AsVal_long(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_EntropyU" "', argument " "47"" of type '" "long""'");
  } 
  arg47 = static_cast< long >(val47);
  ecode48 = SWIG_AsVal_long(args[47], &val48);
  if (!SWIG_IsOK(ecode48)) {
    SWIG_exception_fail(SWIG_ArgError(ecode48), "in method '" "Optimise_EntropyU" "', argument " "48"" of type '" "long""'");
  } 
  arg48 = static_cast< long >(val48);
  ecode49 = SWIG_AsVal_long(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_EntropyU" "', argument " "49"" of type '" "long""'");
  } 
  arg49 = static_cast< long >(val49);
  ecode50 = SWIG_AsVal_double(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_EntropyU" "', argument " "50"" of type '" "double""'");
  } 
  arg50 = static_cast< double >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_EntropyU(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg51[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg42){
      delete[] arg42;arg42=0;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  
  
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseCrossEntropy(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  real arg13 ;
  vector arg14 = (vector) 0 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int *arg24 = (int *) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  double arg28 ;
  double arg29 ;
  double *arg30 = (double *) 0 ;
  vector arg31 = (vector) 0 ;
  int arg32 ;
  char *arg33 = (char *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  double val29 ;
  int ecode29 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  int res33 ;
  char *buf33 = 0 ;
  int alloc33 = 0 ;
  short result;
  
  if(args.Length() != 33) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseCrossEntropy.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseCrossEntropy" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OptimiseCrossEntropy" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseCrossEntropy" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "OptimiseCrossEntropy" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "OptimiseCrossEntropy" "', argument " "13"" of type '" "real""'");
  } 
  arg13 = static_cast< real >(val13);
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "OptimiseCrossEntropy" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OptimiseCrossEntropy" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OptimiseCrossEntropy" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "OptimiseCrossEntropy" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "OptimiseCrossEntropy" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "OptimiseCrossEntropy" "', argument " "28"" of type '" "double""'");
  } 
  arg28 = static_cast< double >(val28);
  ecode29 = SWIG_AsVal_double(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "OptimiseCrossEntropy" "', argument " "29"" of type '" "double""'");
  } 
  arg29 = static_cast< double >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "OptimiseCrossEntropy" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  res33 = SWIG_AsCharPtrAndSize(args[32], &buf33, NULL, &alloc33);
  if (!SWIG_IsOK(res33)) {
    SWIG_exception_fail(SWIG_ArgError(res33), "in method '" "OptimiseCrossEntropy" "', argument " "33"" of type '" "char *""'");
  }
  arg33 = reinterpret_cast< char * >(buf33);
  result = (short)OptimiseCrossEntropy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24){
      delete[] arg24;arg24=0;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  
  
  {
    if(arg30){
      delete[] arg30;arg30=0;
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SDPsvec(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SDPsvec.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SDPsvec" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SDPsvec(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SDPsMat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SDPsMat.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SDPsMat" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SDPsMat(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_nullA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_nullA.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nullA" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nullA" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)nullA(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  
  {
    //We musn't free this arg3 input=args[2] arg=$arg result=$result
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_LPQN(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  short result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_LPQN.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "LPQN" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LPQN" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)LPQN(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GAUSS_NEWTON_Optimiser(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t *arg2 = (size_t *) 0 ;
  size_t *arg3 = (size_t *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  short result;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GAUSS_NEWTON_Optimiser.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GAUSS_NEWTON_Optimiser" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "GAUSS_NEWTON_Optimiser" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)GAUSS_NEWTON_Optimiser(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_packed2symm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_packed2symm.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "packed2symm" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  packed2symm(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_symm2packed(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_symm2packed.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "symm2packed" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  symm2packed(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_General(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  double arg13 = (double) 1e-8 ;
  double arg14 = (double) 1e-8 ;
  double arg15 = (double) 2e-2 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 1 ;
  int arg18 = (int) 0 ;
  char *arg19 = (char *) 0 ;
  int arg20 = (int) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int res19 ;
  char *buf19 = 0 ;
  int alloc19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  short result;
  
  if(args.Length() != 20) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_General.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Conic_General" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Conic_General" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Conic_General" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Conic_General" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Conic_General" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Conic_General" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Conic_General" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Conic_General" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  res19 = SWIG_AsCharPtrAndSize(args[18], &buf19, NULL, &alloc19);
  if (!SWIG_IsOK(res19)) {
    SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "Conic_General" "', argument " "19"" of type '" "char *""'");
  }
  arg19 = reinterpret_cast< char * >(buf19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Conic_General" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  result = (short)Conic_General(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_w(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_w.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "get_w" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  get_w(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_WtransSDP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  bool arg5 = (bool) false ;
  bool arg6 = (bool) false ;
  size_t val1 ;
  int ecode1 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_WtransSDP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "WtransSDP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_bool(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "WtransSDP" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "WtransSDP" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  WtransSDP(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_applyXSDP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_applyXSDP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "applyXSDP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  applyXSDP(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_applyXm1SDP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_applyXm1SDP.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "applyXm1SDP" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  applyXm1SDP(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SDPsymm2MCAR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SDPsymm2MCAR.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SDPsymm2MCAR" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SDPsymm2MCAR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SDPsymm2MCAR(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_factor_model_process_inverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_factor_model_process_inverse.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "factor_model_process_inverse" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "factor_model_process_inverse" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  factor_model_process_inverse(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_facmul_and_inv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  int arg6 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_facmul_and_inv.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "facmul_and_inv" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "facmul_and_inv" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "facmul_and_inv" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  facmul_and_inv(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_small_round(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_small_round.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "small_round" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)small_round(arg1);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_make_indexM(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_make_indexM.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "make_indexM" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  make_indexM(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pull_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer *arg1 = (Integer *) 0 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  double *arg6 = (double *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  double *arg12 = (double *) 0 ;
  Integer *arg13 = (Integer *) 0 ;
  Integer *arg14 = (Integer *) 0 ;
  int result;
  
  if(args.Length() != 14) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pull_BITA.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)pull_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg14[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    //We musn't free this arg9 input=args[8] arg=$arg result=$result
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_sns_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  double *arg3 = (double *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  Integer *arg12 = (Integer *) 0 ;
  int result;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_sns_BITA.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)sns_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg12[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_ssf_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  Integer *arg9 = (Integer *) 0 ;
  Integer *arg10 = (Integer *) 0 ;
  Integer *arg11 = (Integer *) 0 ;
  Integer *arg12 = (Integer *) 0 ;
  Integer *arg13 = (Integer *) 0 ;
  Integer *arg14 = (Integer *) 0 ;
  Integer *arg15 = (Integer *) 0 ;
  int result;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ssf_BITA.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)ssf_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg15[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_A2U(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer arg1 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_A2U.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "A2U" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  A2U(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_UseSparseCh(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_UseSparseCh.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "UseSparseCh" "', argument " "1"" of type '" "Integer""'");
  } 
  arg1 = static_cast< Integer >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  UseSparseCh(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Conic_VeryGeneral(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  size_t arg4 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  int arg16 ;
  int arg17 ;
  int arg18 ;
  char *arg19 = (char *) 0 ;
  int arg20 ;
  int arg21 ;
  long arg22 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  size_t arg26 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int res19 ;
  char *buf19 = 0 ;
  int alloc19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  size_t val26 ;
  int ecode26 = 0 ;
  short result;
  
  if(args.Length() != 26) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Conic_VeryGeneral.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Conic_VeryGeneral" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Conic_VeryGeneral" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_double(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "Conic_VeryGeneral" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Conic_VeryGeneral" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Conic_VeryGeneral" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Conic_VeryGeneral" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Conic_VeryGeneral" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Conic_VeryGeneral" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  res19 = SWIG_AsCharPtrAndSize(args[18], &buf19, NULL, &alloc19);
  if (!SWIG_IsOK(res19)) {
    SWIG_exception_fail(SWIG_ArgError(res19), "in method '" "Conic_VeryGeneral" "', argument " "19"" of type '" "char *""'");
  }
  arg19 = reinterpret_cast< char * >(buf19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Conic_VeryGeneral" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Conic_VeryGeneral" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Conic_VeryGeneral" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode26 = SWIG_AsVal_size_t(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Conic_VeryGeneral" "', argument " "26"" of type '" "size_t""'");
  } 
  arg26 = static_cast< size_t >(val26);
  result = (short)Conic_VeryGeneral(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  
  
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_lowrank_facmul_and_inv(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  int arg7 = (int) 0 ;
  short_scl *arg8 = (short_scl *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_lowrank_facmul_and_inv.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "lowrank_facmul_and_inv" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "lowrank_facmul_and_inv" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "lowrank_facmul_and_inv" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  lowrank_facmul_and_inv(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg8[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_process_lowrank_plus_symm_inverse(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  short_scl *arg6 = (short_scl *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_process_lowrank_plus_symm_inverse.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "process_lowrank_plus_symm_inverse" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "process_lowrank_plus_symm_inverse" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new short_scl[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (short_scl) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  process_lowrank_plus_symm_inverse(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_W2trans(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_W2trans.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "W2trans" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  W2trans(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Wtrans(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Wtrans.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Wtrans" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Wtrans(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SDPwsymm2MCAR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  double arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SDPwsymm2MCAR.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SDPwsymm2MCAR" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SDPwsymm2MCAR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SDPwsymm2MCAR" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SDPwsymm2MCAR(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SDPvec2MCAR(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SDPvec2MCAR.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SDPvec2MCAR" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SDPvec2MCAR" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  SDPvec2MCAR(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RiskParityOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  int arg12 = (int) 0 ;
  int *arg13 = (int *) 0 ;
  int arg14 = (int) 1 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  int arg17 = (int) 0 ;
  double *arg18 = (double *) 0 ;
  double arg19 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  short result;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RiskParityOpt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RiskParityOpt" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RiskParityOpt" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RiskParityOpt" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RiskParityOpt" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "RiskParityOpt" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  ecode15 = SWIG_AsVal_int(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "RiskParityOpt" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "RiskParityOpt" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "RiskParityOpt" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "RiskParityOpt" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  result = (short)RiskParityOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg13[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  
  
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RiskParitySolveF(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  size_t arg11 = (size_t) 0 ;
  double *arg12 = (double *) 0 ;
  int arg13 = (int) 0 ;
  int arg14 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  size_t val11 ;
  int ecode11 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  short result;
  
  if(args.Length() != 14) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RiskParitySolveF.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RiskParitySolveF" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RiskParitySolveF" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RiskParitySolveF" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_size_t(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RiskParitySolveF" "', argument " "11"" of type '" "size_t""'");
  } 
  arg11 = static_cast< size_t >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "RiskParitySolveF" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "RiskParitySolveF" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  result = (short)RiskParitySolveF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RiskParitySolve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  int arg12 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  short result;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RiskParitySolve.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RiskParitySolve" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RiskParitySolve" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RiskParitySolve" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RiskParitySolve" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  ecode12 = SWIG_AsVal_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RiskParitySolve" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  result = (short)RiskParitySolve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_RiskParitySolve2(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  double *arg10 = (double *) 0 ;
  int arg11 = (int) 0 ;
  int arg12 = (int) 0 ;
  int arg13 = (int) 0 ;
  double arg14 = (double) 0.0 ;
  double arg15 = (double) 0.0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val11 ;
  int ecode11 = 0 ;
  int val12 ;
  int ecode12 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  short result;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_RiskParitySolve2.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RiskParitySolve2" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RiskParitySolve2" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RiskParitySolve2" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "RiskParitySolve2" "', argument " "11"" of type '" "int""'");
  } 
  arg11 = static_cast< int >(val11);
  ecode12 = SWIG_AsVal_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "RiskParitySolve2" "', argument " "12"" of type '" "int""'");
  } 
  arg12 = static_cast< int >(val12);
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "RiskParitySolve2" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "RiskParitySolve2" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "RiskParitySolve2" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  result = (short)RiskParitySolve2(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_SharpOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  long arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  int arg13 = (int) 0 ;
  int arg14 = (int) 0 ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val13 ;
  int ecode13 = 0 ;
  int val14 ;
  int ecode14 = 0 ;
  int val15 ;
  int ecode15 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  short result;
  
  if(args.Length() != 16) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_SharpOpt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SharpOpt" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SharpOpt" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_long(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SharpOpt" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode13 = SWIG_AsVal_int(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "SharpOpt" "', argument " "13"" of type '" "int""'");
  } 
  arg13 = static_cast< int >(val13);
  ecode14 = SWIG_AsVal_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "SharpOpt" "', argument " "14"" of type '" "int""'");
  } 
  arg14 = static_cast< int >(val14);
  ecode15 = SWIG_AsVal_int(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "SharpOpt" "', argument " "15"" of type '" "int""'");
  } 
  arg15 = static_cast< int >(val15);
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "SharpOpt" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  result = (short)SharpOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseGeneral(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  pUtility arg9 = (pUtility) 0 ;
  pModC arg10 = (pModC) 0 ;
  pModQ arg11 = (pModQ) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  void *arg14 = (void *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  void *argp11 ;
  int res11 = 0 ;
  short result;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseGeneral.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseGeneral" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimiseGeneral" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseGeneral" "', argument " "9"" of type '" "pUtility""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneral" "', argument " "9"" of type '" "pUtility""'");
    } else {
      arg9 = *(reinterpret_cast< pUtility * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseGeneral" "', argument " "10"" of type '" "pModC""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneral" "', argument " "10"" of type '" "pModC""'");
    } else {
      arg10 = *(reinterpret_cast< pModC * >(argp10));
    }
  }
  {
    res11 = SWIG_ConvertPtr(args[10], &argp11, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "OptimiseGeneral" "', argument " "11"" of type '" "pModQ""'"); 
    }  
    if (!argp11) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneral" "', argument " "11"" of type '" "pModQ""'");
    } else {
      arg11 = *(reinterpret_cast< pModQ * >(argp11));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  result = (short)OptimiseGeneral(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_CanCastAsInteger(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double *arg1 = (double *) 0 ;
  double arg2 ;
  double arg3 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_CanCastAsInteger.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CanCastAsInteger" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CanCastAsInteger" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (int)CanCastAsInteger(arg1,arg2,arg3);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg1[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dgetrf_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer *arg1 = (Integer *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  double *arg3 = (double *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  int result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dgetrf_BITA.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)dgetrf_BITA(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dgetri_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Integer *arg1 = (Integer *) 0 ;
  double *arg2 = (double *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  Integer *arg4 = (Integer *) 0 ;
  double *arg5 = (double *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  Integer *arg7 = (Integer *) 0 ;
  int result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dgetri_BITA.");
  
  {
    arg1 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg1 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg1[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)dgetri_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg1[i]));
      }
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg7[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dgetrs_BITA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  Integer *arg2 = (Integer *) 0 ;
  Integer *arg3 = (Integer *) 0 ;
  double *arg4 = (double *) 0 ;
  Integer *arg5 = (Integer *) 0 ;
  Integer *arg6 = (Integer *) 0 ;
  double *arg7 = (double *) 0 ;
  Integer *arg8 = (Integer *) 0 ;
  Integer *arg9 = (Integer *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(args.Length() != 9) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dgetrs_BITA.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dgetrs_BITA" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new Integer[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (Integer) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (int)dgetrs_BITA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_int(static_cast< int >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Accumulation5_10_40(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  int arg4 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  short result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Accumulation5_10_40.");
  
  {
    
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Accumulation5_10_40" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Accumulation5_10_40" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_int(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Accumulation5_10_40" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  result = (short)Accumulation5_10_40(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_short(static_cast< short >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_EndRound(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_EndRound.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "EndRound" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  result = (double)EndRound(arg1);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseGeneralBarrier(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1000 ;
  double arg15 = (double) .5 ;
  double arg16 = (double) .9 ;
  double arg17 = (double) .001 ;
  int *arg18 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  short result;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseGeneralBarrier.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseGeneralBarrier" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseGeneralBarrier" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OptimiseGeneralBarrier" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneralBarrier" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseGeneralBarrier" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneralBarrier" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseGeneralBarrier" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseGeneralBarrier" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "OptimiseGeneralBarrier" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "OptimiseGeneralBarrier" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OptimiseGeneralBarrier" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OptimiseGeneralBarrier" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptimiseGeneralBarrier(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg18[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  
  
  
  
  {
    if(arg18){
      delete[] arg18;arg18=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseNLC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  double arg15 = (double) 100 ;
  double arg16 = (double) .96 ;
  double arg17 = (double) 1000.0 ;
  double arg18 = (double) 1.267 ;
  double arg19 = (double) 0 ;
  int *arg20 = (int *) 0 ;
  int arg21 = (int) 0 ;
  int arg22 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  short result;
  
  if(args.Length() != 18) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseNLC.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseNLC" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseNLC" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pConstraintFunc,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OptimiseNLC" "', argument " "6"" of type '" "pConstraintFunc""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC" "', argument " "6"" of type '" "pConstraintFunc""'");
    } else {
      arg6 = *(reinterpret_cast< pConstraintFunc * >(argp6));
    }
  }
  {
    
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OptimiseNLC" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseNLC" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseNLC" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "OptimiseNLC" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "OptimiseNLC" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OptimiseNLC" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OptimiseNLC" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "OptimiseNLC" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "OptimiseNLC" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "OptimiseNLC" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "OptimiseNLC" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  result = (short)OptimiseNLC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg20[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg20){
      delete[] arg20;arg20=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseNLC1(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  int *arg15 = (int *) 0 ;
  int arg16 = (int) 0 ;
  double arg17 = (double) 0.9 ;
  double arg18 = (double) 10.0 ;
  double arg19 = (double) 1.0 ;
  double arg20 = (double) 0.2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  short result;
  
  if(args.Length() != 16) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseNLC1.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseNLC1" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseNLC1" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pConstraintFunc,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OptimiseNLC1" "', argument " "6"" of type '" "pConstraintFunc""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC1" "', argument " "6"" of type '" "pConstraintFunc""'");
    } else {
      arg6 = *(reinterpret_cast< pConstraintFunc * >(argp6));
    }
  }
  {
    
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OptimiseNLC1" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC1" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseNLC1" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC1" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseNLC1" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC1" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "OptimiseNLC1" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OptimiseNLC1" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OptimiseNLC1" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "OptimiseNLC1" "', argument " "18"" of type '" "double""'");
  } 
  arg18 = static_cast< double >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "OptimiseNLC1" "', argument " "19"" of type '" "double""'");
  } 
  arg19 = static_cast< double >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "OptimiseNLC1" "', argument " "20"" of type '" "double""'");
  } 
  arg20 = static_cast< double >(val20);
  result = (short)OptimiseNLC1(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg15[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  
  
  
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseNLC_Seq(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  double arg14 = (double) 1e-11 ;
  int *arg15 = (int *) 0 ;
  int arg16 = (int) 0 ;
  double arg17 = (double) 1.0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  int val16 ;
  int ecode16 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  short result;
  
  if(args.Length() != 15) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseNLC_Seq.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseNLC_Seq" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseNLC_Seq" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pConstraintFunc,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OptimiseNLC_Seq" "', argument " "6"" of type '" "pConstraintFunc""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC_Seq" "', argument " "6"" of type '" "pConstraintFunc""'");
    } else {
      arg6 = *(reinterpret_cast< pConstraintFunc * >(argp6));
    }
  }
  {
    
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OptimiseNLC_Seq" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC_Seq" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseNLC_Seq" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC_Seq" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseNLC_Seq" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLC_Seq" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "OptimiseNLC_Seq" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_int(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "OptimiseNLC_Seq" "', argument " "16"" of type '" "int""'");
  } 
  arg16 = static_cast< int >(val16);
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "OptimiseNLC_Seq" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptimiseNLC_Seq(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg15[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  
  
  
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  
  
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_gramS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  bool *arg5 = (bool *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  short result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_gramS.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "gramS" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  res5 = SWIG_ConvertPtr(args[4], &argp5,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "gramS" "', argument " "5"" of type '" "bool *""'"); 
  }
  arg5 = reinterpret_cast< bool * >(argp5);
  result = (short)gramS(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_inverseT(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_inverseT.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inverseT" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  inverseT(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_solveT(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_solveT.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveT" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  solveT(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_solveTt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_solveTt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "solveTt" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  solveTt(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_multT(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_multT.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multT" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  multT(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_multTt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_multTt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multTt" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  multTt(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FixGram(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FixGram.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FixGram" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (bool)FixGram(arg1,arg2);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Arnoldi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  int arg5 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  size_t result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Arnoldi.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Arnoldi" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Arnoldi" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  result = Arnoldi(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pattern6(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  vector arg8 = (vector) 0 ;
  double arg9 ;
  vector arg10 = (vector) 0 ;
  double arg11 ;
  double arg12 ;
  unsigned long arg13 ;
  unsigned long arg14 ;
  unsigned long arg15 ;
  int *arg16 = (int *) 0 ;
  int arg17 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  unsigned long val13 ;
  int ecode13 = 0 ;
  unsigned long val14 ;
  int ecode14 = 0 ;
  unsigned long val15 ;
  int ecode15 = 0 ;
  int val17 ;
  int ecode17 = 0 ;
  
  if(args.Length() != 16) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pattern6.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pattern6" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "pattern6" "', argument " "6"" of type '" "pUtility""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pattern6" "', argument " "6"" of type '" "pUtility""'");
    } else {
      arg6 = *(reinterpret_cast< pUtility * >(argp6));
    }
  }
  {
    
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "pattern6" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "pattern6" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "pattern6" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_unsigned_SS_long(args[12], &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "pattern6" "', argument " "13"" of type '" "unsigned long""'");
  } 
  arg13 = static_cast< unsigned long >(val13);
  ecode14 = SWIG_AsVal_unsigned_SS_long(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "pattern6" "', argument " "14"" of type '" "unsigned long""'");
  } 
  arg14 = static_cast< unsigned long >(val14);
  ecode15 = SWIG_AsVal_unsigned_SS_long(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "pattern6" "', argument " "15"" of type '" "unsigned long""'");
  } 
  arg15 = static_cast< unsigned long >(val15);
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "pattern6" "', argument " "17"" of type '" "int""'");
  } 
  arg17 = static_cast< int >(val17);
  pattern6(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg16[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  
  
  
  
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_setunitHess(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_setunitHess.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setunitHess" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  setunitHess(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_findzero(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_findzero.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "findzero" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = findzero(arg1,arg2);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_parity_check(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  size_t arg9 = (size_t) 0 ;
  vector arg10 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  size_t val9 ;
  int ecode9 = 0 ;
  bool result;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_parity_check.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "parity_check" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "parity_check" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_size_t(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "parity_check" "', argument " "9"" of type '" "size_t""'");
  } 
  arg9 = static_cast< size_t >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (bool)parity_check(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  jsresult = SWIG_From_bool(static_cast< bool >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_OptimiseNLCAL(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  pConstraintFunc arg6 = (pConstraintFunc) 0 ;
  void *arg7 = (void *) 0 ;
  pUtility arg8 = (pUtility) 0 ;
  pModC arg9 = (pModC) 0 ;
  pModQ arg10 = (pModQ) 0 ;
  void *arg11 = (void *) 0 ;
  void *arg12 = (void *) 0 ;
  void *arg13 = (void *) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  void *argp8 ;
  int res8 = 0 ;
  void *argp9 ;
  int res9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  short result;
  
  if(args.Length() != 11) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_OptimiseNLCAL.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "OptimiseNLCAL" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "OptimiseNLCAL" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "OptimiseNLCAL" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pConstraintFunc,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "OptimiseNLCAL" "', argument " "6"" of type '" "pConstraintFunc""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLCAL" "', argument " "6"" of type '" "pConstraintFunc""'");
    } else {
      arg6 = *(reinterpret_cast< pConstraintFunc * >(argp6));
    }
  }
  {
    
  }
  {
    res8 = SWIG_ConvertPtr(args[7], &argp8, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "OptimiseNLCAL" "', argument " "8"" of type '" "pUtility""'"); 
    }  
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLCAL" "', argument " "8"" of type '" "pUtility""'");
    } else {
      arg8 = *(reinterpret_cast< pUtility * >(argp8));
    }
  }
  {
    res9 = SWIG_ConvertPtr(args[8], &argp9, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "OptimiseNLCAL" "', argument " "9"" of type '" "pModC""'"); 
    }  
    if (!argp9) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLCAL" "', argument " "9"" of type '" "pModC""'");
    } else {
      arg9 = *(reinterpret_cast< pModC * >(argp9));
    }
  }
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "OptimiseNLCAL" "', argument " "10"" of type '" "pModQ""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OptimiseNLCAL" "', argument " "10"" of type '" "pModQ""'");
    } else {
      arg10 = *(reinterpret_cast< pModQ * >(argp10));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)OptimiseNLCAL(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  
  
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_QuasiNewton(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  int arg3 ;
  size_t arg4 ;
  double *arg5 = (double *) 0 ;
  pUtility arg6 ;
  void *arg7 = (void *) 0 ;
  double arg8 = (double) 1e-12 ;
  int arg9 = (int) 1 ;
  int arg10 = (int) 0 ;
  double arg11 = (double) 1e+8 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  int val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  short result;
  
  if(args.Length() != 10) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_QuasiNewton.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "QuasiNewton" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "QuasiNewton" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_size_t(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "QuasiNewton" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "QuasiNewton" "', argument " "6"" of type '" "pUtility""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QuasiNewton" "', argument " "6"" of type '" "pUtility""'");
    } else {
      arg6 = *(reinterpret_cast< pUtility * >(argp6));
    }
  }
  {
    
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "QuasiNewton" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_int(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "QuasiNewton" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  ecode10 = SWIG_AsVal_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "QuasiNewton" "', argument " "10"" of type '" "int""'");
  } 
  arg10 = static_cast< int >(val10);
  ecode11 = SWIG_AsVal_double(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "QuasiNewton" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  result = (short)QuasiNewton(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_multistage(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  char **arg12 = (char **) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  double arg15 ;
  double arg16 ;
  dimen *arg17 = (dimen *) 0 ;
  size_t arg18 = (size_t) 1 ;
  size_t arg19 = (size_t) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  size_t val18 ;
  int ecode18 = 0 ;
  size_t val19 ;
  int ecode19 = 0 ;
  size_t result;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_multistage.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multistage" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multistage" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()){
        arg12 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg12[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "multistage" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "multistage" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_size_t(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "multistage" "', argument " "18"" of type '" "size_t""'");
  } 
  arg18 = static_cast< size_t >(val18);
  ecode19 = SWIG_AsVal_size_t(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "multistage" "', argument " "19"" of type '" "size_t""'");
  } 
  arg19 = static_cast< size_t >(val19);
  result = multistage(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg17[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  
  
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_BasicQpOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  unsigned char arg9 ;
  pHmul arg10 = (pHmul) 0 ;
  long arg11 = (long) -1 ;
  dimen arg12 = (dimen) 0 ;
  vector arg13 = (vector) 0 ;
  long arg14 = (long) -1 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  dimen arg17 = (dimen) 0 ;
  dimen arg18 = (dimen) 1 ;
  dimen arg19 = (dimen) 0 ;
  vector arg20 = (vector) 0 ;
  pUtility arg21 = (pUtility) 0 ;
  pModC arg22 = (pModC) 0 ;
  pModQ arg23 = (pModQ) 0 ;
  void *arg24 = (void *) 0 ;
  void *arg25 = (void *) 0 ;
  void *arg26 = (void *) 0 ;
  void *arg27 = (void *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val9 ;
  int ecode9 = 0 ;
  void *argp10 ;
  int res10 = 0 ;
  long val11 ;
  int ecode11 = 0 ;
  unsigned int val12 ;
  int ecode12 = 0 ;
  long val14 ;
  int ecode14 = 0 ;
  unsigned int val17 ;
  int ecode17 = 0 ;
  unsigned int val18 ;
  int ecode18 = 0 ;
  unsigned int val19 ;
  int ecode19 = 0 ;
  void *argp21 ;
  int res21 = 0 ;
  void *argp22 ;
  int res22 = 0 ;
  void *argp23 ;
  int res23 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 23) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_BasicQpOpt.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "BasicQpOpt" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BasicQpOpt" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode9 = SWIG_AsVal_unsigned_SS_char(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "BasicQpOpt" "', argument " "9"" of type '" "unsigned char""'");
  } 
  arg9 = static_cast< unsigned char >(val9);
  {
    res10 = SWIG_ConvertPtr(args[9], &argp10, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "BasicQpOpt" "', argument " "10"" of type '" "pHmul""'"); 
    }  
    if (!argp10) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BasicQpOpt" "', argument " "10"" of type '" "pHmul""'");
    } else {
      arg10 = *(reinterpret_cast< pHmul * >(argp10));
    }
  }
  ecode11 = SWIG_AsVal_long(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "BasicQpOpt" "', argument " "11"" of type '" "long""'");
  } 
  arg11 = static_cast< long >(val11);
  ecode12 = SWIG_AsVal_unsigned_SS_int(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "BasicQpOpt" "', argument " "12"" of type '" "dimen""'");
  } 
  arg12 = static_cast< dimen >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_long(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "BasicQpOpt" "', argument " "14"" of type '" "long""'");
  } 
  arg14 = static_cast< long >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_unsigned_SS_int(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "BasicQpOpt" "', argument " "17"" of type '" "dimen""'");
  } 
  arg17 = static_cast< dimen >(val17);
  ecode18 = SWIG_AsVal_unsigned_SS_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "BasicQpOpt" "', argument " "18"" of type '" "dimen""'");
  } 
  arg18 = static_cast< dimen >(val18);
  ecode19 = SWIG_AsVal_unsigned_SS_int(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "BasicQpOpt" "', argument " "19"" of type '" "dimen""'");
  } 
  arg19 = static_cast< dimen >(val19);
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res21 = SWIG_ConvertPtr(args[20], &argp21, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res21)) {
      SWIG_exception_fail(SWIG_ArgError(res21), "in method '" "BasicQpOpt" "', argument " "21"" of type '" "pUtility""'"); 
    }  
    if (!argp21) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BasicQpOpt" "', argument " "21"" of type '" "pUtility""'");
    } else {
      arg21 = *(reinterpret_cast< pUtility * >(argp21));
    }
  }
  {
    res22 = SWIG_ConvertPtr(args[21], &argp22, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res22)) {
      SWIG_exception_fail(SWIG_ArgError(res22), "in method '" "BasicQpOpt" "', argument " "22"" of type '" "pModC""'"); 
    }  
    if (!argp22) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BasicQpOpt" "', argument " "22"" of type '" "pModC""'");
    } else {
      arg22 = *(reinterpret_cast< pModC * >(argp22));
    }
  }
  {
    res23 = SWIG_ConvertPtr(args[22], &argp23, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res23)) {
      SWIG_exception_fail(SWIG_ArgError(res23), "in method '" "BasicQpOpt" "', argument " "23"" of type '" "pModQ""'"); 
    }  
    if (!argp23) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BasicQpOpt" "', argument " "23"" of type '" "pModQ""'");
    } else {
      arg23 = *(reinterpret_cast< pModQ * >(argp23));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  {
    
  }
  result = (char *)BasicQpOpt(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27);
  jsresult = SWIG_FromCharPtr((const char *)result);
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  
  
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_simplex(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double *arg6 = (double *) 0 ;
  dimen arg7 ;
  dimen arg8 ;
  dimen *arg9 = (dimen *) 0 ;
  dimen *arg10 = (dimen *) 0 ;
  dimen *arg11 = (dimen *) 0 ;
  pUtility arg12 ;
  void *arg13 = (void *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  unsigned int val7 ;
  int ecode7 = 0 ;
  unsigned int val8 ;
  int ecode8 = 0 ;
  void *argp12 ;
  int res12 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_simplex.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "simplex" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "simplex" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_unsigned_SS_int(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "simplex" "', argument " "7"" of type '" "dimen""'");
  } 
  arg7 = static_cast< dimen >(val7);
  ecode8 = SWIG_AsVal_unsigned_SS_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "simplex" "', argument " "8"" of type '" "dimen""'");
  } 
  arg8 = static_cast< dimen >(val8);
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res12 = SWIG_ConvertPtr(args[11], &argp12, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res12)) {
      SWIG_exception_fail(SWIG_ArgError(res12), "in method '" "simplex" "', argument " "12"" of type '" "pUtility""'"); 
    }  
    if (!argp12) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "simplex" "', argument " "12"" of type '" "pUtility""'");
    } else {
      arg12 = *(reinterpret_cast< pUtility * >(argp12));
    }
  }
  {
    
  }
  simplex(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg11[i]));
      }
    }
  }
  
  {
    if(arg2){
      delete[] arg2;arg2=0;
    }
  }
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  
  
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_factor_model_process(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_factor_model_process.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "factor_model_process" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "factor_model_process" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  factor_model_process(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_apt_model_process(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_apt_model_process.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "apt_model_process" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "apt_model_process" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  apt_model_process(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_NaiveRound(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_NaiveRound.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NaiveRound" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  NaiveRound(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Solve1D(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  p1DFunc arg1 ;
  double arg2 = (double) 0 ;
  double arg3 = (double) .99999 ;
  double arg4 = (double) 1e-8 ;
  void *arg5 = (void *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Solve1D.");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_p1DFunc,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solve1D" "', argument " "1"" of type '" "p1DFunc""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solve1D" "', argument " "1"" of type '" "p1DFunc""'");
    } else {
      arg1 = *(reinterpret_cast< p1DFunc * >(argp1));
    }
  }
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solve1D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solve1D" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solve1D" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    
  }
  result = (double)Solve1D(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PathMin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  p1DFunc arg1 ;
  double arg2 = (double) 0 ;
  double arg3 = (double) .99999 ;
  double arg4 = (double) 1e-8 ;
  void *arg5 = (void *) 0 ;
  int arg6 = (int) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PathMin.");
  
  {
    res1 = SWIG_ConvertPtr(args[0], &argp1, SWIGTYPE_p_p1DFunc,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathMin" "', argument " "1"" of type '" "p1DFunc""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PathMin" "', argument " "1"" of type '" "p1DFunc""'");
    } else {
      arg1 = *(reinterpret_cast< p1DFunc * >(argp1));
    }
  }
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PathMin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PathMin" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    
  }
  ecode6 = SWIG_AsVal_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PathMin" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  result = (double)PathMin(arg1,arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_dmx_transpose(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_dmx_transpose.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "dmx_transpose" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dmx_transpose" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  dmx_transpose(arg1,arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_nfac(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) "modelgen.txt" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_nfac.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_nfac" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = get_nfac(arg1);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getdata(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  size_t arg1 ;
  size_t arg2 ;
  char **arg3 = (char **) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  char *arg7 = (char *) "modelgen.txt" ;
  size_t val1 ;
  int ecode1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getdata.");
  
  ecode1 = SWIG_AsVal_size_t(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getdata" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getdata" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  res7 = SWIG_AsCharPtrAndSize(args[6], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "getdata" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  getdata(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4){
      delete[] arg4;arg4=0;
    }
  }
  {
    if(arg5){
      delete[] arg5;arg5=0;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_stocknames(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) "modelgen.txt" ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_stocknames.");
  
  {
    arg1 = 0;
    
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()){
        arg1 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg1[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_stocknames" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  get_stocknames(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg1[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_nstocks(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) "modelgen.txt" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  size_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_nstocks.");
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "get_nstocks" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = get_nstocks(arg1);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg1 && args[0]->IsArray()) {
      delete[] arg1;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_get_factornames(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  char **arg1 = (char **) 0 ;
  char *arg2 = (char *) "modelgen.txt" ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_get_factornames.");
  
  {
    arg1 = 0;
    
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()){
        arg1 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg1[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  res2 = SWIG_AsCharPtrAndSize(args[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "get_factornames" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  get_factornames(arg1,arg2);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg1 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg1[i]));
      }
    }
  }
  {
    if(arg1){
      delete[] arg1;arg1=0;
    }
  }
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_conj_solve(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 = (dimen) 0 ;
  pHmul arg6 = (pHmul) 0 ;
  void *arg7 = (void *) 0 ;
  int arg8 = (int) 1 ;
  int arg9 = (int) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  void *argp6 ;
  int res6 = 0 ;
  int val8 ;
  int ecode8 = 0 ;
  int val9 ;
  int ecode9 = 0 ;
  short result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_conj_solve.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "conj_solve" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "conj_solve" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    res6 = SWIG_ConvertPtr(args[5], &argp6, SWIGTYPE_p_pHmul,  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "conj_solve" "', argument " "6"" of type '" "pHmul""'"); 
    }  
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "conj_solve" "', argument " "6"" of type '" "pHmul""'");
    } else {
      arg6 = *(reinterpret_cast< pHmul * >(argp6));
    }
  }
  {
    
  }
  ecode8 = SWIG_AsVal_int(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "conj_solve" "', argument " "8"" of type '" "int""'");
  } 
  arg8 = static_cast< int >(val8);
  ecode9 = SWIG_AsVal_int(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "conj_solve" "', argument " "9"" of type '" "int""'");
  } 
  arg9 = static_cast< int >(val9);
  result = (short)conj_solve(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVP(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  double arg12 ;
  vector arg13 = (vector) 0 ;
  double arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  double arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  double arg22 ;
  double arg23 ;
  int arg24 ;
  int arg25 ;
  double arg26 ;
  double arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  double arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  short result;
  
  if(args.Length() != 37) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVP.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVP" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVP" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVP" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVP" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVP" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVP" "', argument " "17"" of type '" "double""'");
  } 
  arg17 = static_cast< double >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVP" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVP" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVP" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVP" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVP" "', argument " "22"" of type '" "double""'");
  } 
  arg22 = static_cast< double >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVP" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVP" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVP" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVP" "', argument " "26"" of type '" "double""'");
  } 
  arg26 = static_cast< double >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVP" "', argument " "27"" of type '" "double""'");
  } 
  arg27 = static_cast< double >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVP" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVP" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVP" "', argument " "34"" of type '" "double""'");
  } 
  arg34 = static_cast< double >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVP" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVP(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcosts(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  short result;
  
  if(args.Length() != 59) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcosts.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcosts" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcosts" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcosts" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcosts" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcosts" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcosts" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcosts" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcosts" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcosts" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAextcosts" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAextcosts" "', argument " "20"" of type '" "real""'");
  } 
  arg20 = static_cast< real >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcosts" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcosts" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcosts" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcosts" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcosts" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcosts" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcosts" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcosts" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcosts" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcosts" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcosts" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcosts" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcosts" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcosts" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcosts" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcosts" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcosts" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcosts" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcosts" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcosts" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcosts" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcosts" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcosts" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcosts" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcosts" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcosts" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcosts" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcosts" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcosts" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcosts" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  result = (short)Optimise_internalCVPAextcosts(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcostsl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  double val63 ;
  int ecode63 = 0 ;
  short result;
  
  if(args.Length() != 61) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcostsl.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "20"" of type '" "real""'");
  } 
  arg20 = static_cast< real >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostsl" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostsl" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostsl" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  ecode63 = SWIG_AsVal_double(args[62], &val63);
  if (!SWIG_IsOK(ecode63)) {
    SWIG_exception_fail(SWIG_ArgError(ecode63), "in method '" "Optimise_internalCVPAextcostsl" "', argument " "63"" of type '" "double""'");
  } 
  arg63 = static_cast< double >(val63);
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostsl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcostslSa(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  double val63 ;
  int ecode63 = 0 ;
  short result;
  
  if(args.Length() != 62) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcostslSa.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "20"" of type '" "real""'");
  } 
  arg20 = static_cast< real >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  ecode63 = SWIG_AsVal_double(args[62], &val63);
  if (!SWIG_IsOK(ecode63)) {
    SWIG_exception_fail(SWIG_ArgError(ecode63), "in method '" "Optimise_internalCVPAextcostslSa" "', argument " "63"" of type '" "double""'");
  } 
  arg63 = static_cast< double >(val63);
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg65[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      delete[] arg65;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcostslSaM(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  double val63 ;
  int ecode63 = 0 ;
  int val66 ;
  int ecode66 = 0 ;
  short result;
  
  if(args.Length() != 64) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcostslSaM.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "20"" of type '" "real""'");
  } 
  arg20 = static_cast< real >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  ecode63 = SWIG_AsVal_double(args[62], &val63);
  if (!SWIG_IsOK(ecode63)) {
    SWIG_exception_fail(SWIG_ArgError(ecode63), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "63"" of type '" "double""'");
  } 
  arg63 = static_cast< double >(val63);
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAextcostslSaM" "', argument " "66"" of type '" "int""'");
  } 
  arg66 = static_cast< int >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSaM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg67[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      delete[] arg65;
    }
  }
  
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcostslSaMS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  real arg19 ;
  real arg20 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  dimen arg68 = (dimen) 0 ;
  double arg69 = (double) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  double val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  double val63 ;
  int ecode63 = 0 ;
  int val66 ;
  int ecode66 = 0 ;
  unsigned int val68 ;
  int ecode68 = 0 ;
  double val69 ;
  int ecode69 = 0 ;
  short result;
  
  if(args.Length() != 66) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcostslSaMS.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_double(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "20"" of type '" "real""'");
  } 
  arg20 = static_cast< real >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  ecode63 = SWIG_AsVal_double(args[62], &val63);
  if (!SWIG_IsOK(ecode63)) {
    SWIG_exception_fail(SWIG_ArgError(ecode63), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "63"" of type '" "double""'");
  } 
  arg63 = static_cast< double >(val63);
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "66"" of type '" "int""'");
  } 
  arg66 = static_cast< int >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode68 = SWIG_AsVal_unsigned_SS_int(args[67], &val68);
  if (!SWIG_IsOK(ecode68)) {
    SWIG_exception_fail(SWIG_ArgError(ecode68), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "68"" of type '" "dimen""'");
  } 
  arg68 = static_cast< dimen >(val68);
  ecode69 = SWIG_AsVal_double(args[68], &val69);
  if (!SWIG_IsOK(ecode69)) {
    SWIG_exception_fail(SWIG_ArgError(ecode69), "in method '" "Optimise_internalCVPAextcostslSaMS" "', argument " "69"" of type '" "double""'");
  } 
  arg69 = static_cast< double >(val69);
  result = (short)Optimise_internalCVPAextcostslSaMS(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg67[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      delete[] arg65;
    }
  }
  
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAextcostslSaMSoft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  real arg15 ;
  long arg16 ;
  long arg17 ;
  int arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  int arg21 ;
  int arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  int *arg28 = (int *) 0 ;
  dimen arg29 ;
  vector arg30 = (vector) 0 ;
  real arg31 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  dimen arg34 ;
  dimen *arg35 = (dimen *) 0 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  vector arg38 = (vector) 0 ;
  vector arg39 = (vector) 0 ;
  pUtility arg40 = (pUtility) 0 ;
  pModC arg41 = (pModC) 0 ;
  pModQ arg42 = (pModQ) 0 ;
  double arg43 = (double) -1 ;
  double arg44 = (double) -1 ;
  double *arg45 = (double *) 0 ;
  void *arg46 = (void *) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  short arg49 = (short) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  char *arg52 = (char *) 0 ;
  short arg53 = (short) 1 ;
  int arg54 = (int) 0 ;
  double arg55 = (double) 3.0 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  long arg58 = (long) -1 ;
  long arg59 = (long) -1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 1 ;
  double arg62 = (double) 1 ;
  double arg63 = (double) 0 ;
  vector arg64 = (vector) 0 ;
  vector arg65 = (vector) 0 ;
  int arg66 = (int) 0 ;
  size_t *arg67 = (size_t *) 0 ;
  dimen arg68 = (dimen) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  long val16 ;
  int ecode16 = 0 ;
  long val17 ;
  int ecode17 = 0 ;
  int val18 ;
  int ecode18 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  unsigned int val29 ;
  int ecode29 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  unsigned int val34 ;
  int ecode34 = 0 ;
  void *argp40 ;
  int res40 = 0 ;
  void *argp41 ;
  int res41 = 0 ;
  void *argp42 ;
  int res42 = 0 ;
  double val43 ;
  int ecode43 = 0 ;
  double val44 ;
  int ecode44 = 0 ;
  short val49 ;
  int ecode49 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  int res52 ;
  char *buf52 = 0 ;
  int alloc52 = 0 ;
  short val53 ;
  int ecode53 = 0 ;
  int val54 ;
  int ecode54 = 0 ;
  double val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  long val58 ;
  int ecode58 = 0 ;
  long val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  double val62 ;
  int ecode62 = 0 ;
  double val63 ;
  int ecode63 = 0 ;
  int val66 ;
  int ecode66 = 0 ;
  unsigned int val68 ;
  int ecode68 = 0 ;
  double val74 ;
  int ecode74 = 0 ;
  double val75 ;
  int ecode75 = 0 ;
  double val76 ;
  int ecode76 = 0 ;
  short result;
  
  if(args.Length() != 74) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAextcostslSaMSoft.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  ecode15 = SWIG_AsVal_double(args[14], &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "15"" of type '" "real""'");
  } 
  arg15 = static_cast< real >(val15);
  ecode16 = SWIG_AsVal_long(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "16"" of type '" "long""'");
  } 
  arg16 = static_cast< long >(val16);
  ecode17 = SWIG_AsVal_long(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "17"" of type '" "long""'");
  } 
  arg17 = static_cast< long >(val17);
  ecode18 = SWIG_AsVal_int(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "18"" of type '" "int""'");
  } 
  arg18 = static_cast< int >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "22"" of type '" "int""'");
  } 
  arg22 = static_cast< int >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode29 = SWIG_AsVal_unsigned_SS_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "29"" of type '" "dimen""'");
  } 
  arg29 = static_cast< dimen >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_unsigned_SS_int(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "34"" of type '" "dimen""'");
  } 
  arg34 = static_cast< dimen >(val34);
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg38 = 0;
    if(args[37]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      if(arr->Length()) {
        arg38 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg38[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res40 = SWIG_ConvertPtr(args[39], &argp40, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res40)) {
      SWIG_exception_fail(SWIG_ArgError(res40), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "40"" of type '" "pUtility""'"); 
    }  
    if (!argp40) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "40"" of type '" "pUtility""'");
    } else {
      arg40 = *(reinterpret_cast< pUtility * >(argp40));
    }
  }
  {
    res41 = SWIG_ConvertPtr(args[40], &argp41, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res41)) {
      SWIG_exception_fail(SWIG_ArgError(res41), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "41"" of type '" "pModC""'"); 
    }  
    if (!argp41) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "41"" of type '" "pModC""'");
    } else {
      arg41 = *(reinterpret_cast< pModC * >(argp41));
    }
  }
  {
    res42 = SWIG_ConvertPtr(args[41], &argp42, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res42)) {
      SWIG_exception_fail(SWIG_ArgError(res42), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "42"" of type '" "pModQ""'"); 
    }  
    if (!argp42) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "42"" of type '" "pModQ""'");
    } else {
      arg42 = *(reinterpret_cast< pModQ * >(argp42));
    }
  }
  ecode43 = SWIG_AsVal_double(args[42], &val43);
  if (!SWIG_IsOK(ecode43)) {
    SWIG_exception_fail(SWIG_ArgError(ecode43), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "43"" of type '" "double""'");
  } 
  arg43 = static_cast< double >(val43);
  ecode44 = SWIG_AsVal_double(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "44"" of type '" "double""'");
  } 
  arg44 = static_cast< double >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode49 = SWIG_AsVal_short(args[48], &val49);
  if (!SWIG_IsOK(ecode49)) {
    SWIG_exception_fail(SWIG_ArgError(ecode49), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "49"" of type '" "short""'");
  } 
  arg49 = static_cast< short >(val49);
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  res52 = SWIG_AsCharPtrAndSize(args[51], &buf52, NULL, &alloc52);
  if (!SWIG_IsOK(res52)) {
    SWIG_exception_fail(SWIG_ArgError(res52), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "52"" of type '" "char *""'");
  }
  arg52 = reinterpret_cast< char * >(buf52);
  ecode53 = SWIG_AsVal_short(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "53"" of type '" "short""'");
  } 
  arg53 = static_cast< short >(val53);
  ecode54 = SWIG_AsVal_int(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "54"" of type '" "int""'");
  } 
  arg54 = static_cast< int >(val54);
  ecode55 = SWIG_AsVal_double(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "55"" of type '" "double""'");
  } 
  arg55 = static_cast< double >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_long(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "58"" of type '" "long""'");
  } 
  arg58 = static_cast< long >(val58);
  ecode59 = SWIG_AsVal_long(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "59"" of type '" "long""'");
  } 
  arg59 = static_cast< long >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  ecode62 = SWIG_AsVal_double(args[61], &val62);
  if (!SWIG_IsOK(ecode62)) {
    SWIG_exception_fail(SWIG_ArgError(ecode62), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "62"" of type '" "double""'");
  } 
  arg62 = static_cast< double >(val62);
  ecode63 = SWIG_AsVal_double(args[62], &val63);
  if (!SWIG_IsOK(ecode63)) {
    SWIG_exception_fail(SWIG_ArgError(ecode63), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "63"" of type '" "double""'");
  } 
  arg63 = static_cast< double >(val63);
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "66"" of type '" "int""'");
  } 
  arg66 = static_cast< int >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode68 = SWIG_AsVal_unsigned_SS_int(args[67], &val68);
  if (!SWIG_IsOK(ecode68)) {
    SWIG_exception_fail(SWIG_ArgError(ecode68), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "68"" of type '" "dimen""'");
  } 
  arg68 = static_cast< dimen >(val68);
  {
    arg69 = 0;
    if(args[68]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      if(arr->Length()) {
        arg69 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg69[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg70 = 0;
    if(args[69]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      if(arr->Length()) {
        arg70 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg70[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg71 = 0;
    if(args[70]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      if(arr->Length()) {
        arg71 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg71[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg72 = 0;
    if(args[71]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      if(arr->Length()) {
        arg72 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg72[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg73 = 0;
    if(args[72]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      if(arr->Length()) {
        arg73 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg73[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode74 = SWIG_AsVal_double(args[73], &val74);
  if (!SWIG_IsOK(ecode74)) {
    SWIG_exception_fail(SWIG_ArgError(ecode74), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "74"" of type '" "double""'");
  } 
  arg74 = static_cast< double >(val74);
  ecode75 = SWIG_AsVal_double(args[74], &val75);
  if (!SWIG_IsOK(ecode75)) {
    SWIG_exception_fail(SWIG_ArgError(ecode75), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "75"" of type '" "double""'");
  } 
  arg75 = static_cast< double >(val75);
  ecode76 = SWIG_AsVal_double(args[75], &val76);
  if (!SWIG_IsOK(ecode76)) {
    SWIG_exception_fail(SWIG_ArgError(ecode76), "in method '" "Optimise_internalCVPAextcostslSaMSoft" "', argument " "76"" of type '" "double""'");
  } 
  arg76 = static_cast< double >(val76);
  {
    arg77 = 0;
    if(args[76]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      if(arr->Length()) {
        arg77 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg77[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAextcostslSaMSoft(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg28[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[37]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg38[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg67[i]));
      }
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg69[i]));
      }
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg70[i]));
      }
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg71[i]));
      }
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg72[i]));
      }
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg73[i]));
      }
    }
  }
  {
    if(arg77 && args[76]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg77[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  
  
  
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28){
      delete[] arg28;arg28=0;
    }
  }
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  {
    if(arg38 && args[37]->IsArray()) {
      delete[] arg38;
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  
  
  
  
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  {
    if(arg52 && args[51]->IsArray()) {
      delete[] arg52;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      delete[] arg65;
    }
  }
  
  {
    if(arg67){
      delete[] arg67;arg67=0;
    }
  }
  
  {
    if(arg69 && args[68]->IsArray()) {
      delete[] arg69;
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      delete[] arg70;
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      delete[] arg71;
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      delete[] arg72;
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      delete[] arg73;
    }
  }
  
  
  
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  int arg44 = (int) 0 ;
  char *arg45 = (char *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  int val44 ;
  int ecode44 = 0 ;
  int res45 ;
  char *buf45 = 0 ;
  int alloc45 = 0 ;
  short result;
  
  if(args.Length() != 45) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPA.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPA" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPA" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPA" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPA" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPA" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPA" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPA" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPA" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPA" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPA" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPA" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPA" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPA" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPA" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPA" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPA" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPA" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPA" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPA" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPA" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPA" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPA" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "Optimise_internalCVPA" "', argument " "44"" of type '" "int""'");
  } 
  arg44 = static_cast< int >(val44);
  res45 = SWIG_AsCharPtrAndSize(args[44], &buf45, NULL, &alloc45);
  if (!SWIG_IsOK(res45)) {
    SWIG_exception_fail(SWIG_ArgError(res45), "in method '" "Optimise_internalCVPA" "', argument " "45"" of type '" "char *""'");
  }
  arg45 = reinterpret_cast< char * >(buf45);
  result = (short)Optimise_internalCVPA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAF(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  short result;
  
  if(args.Length() != 53) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAF.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAF" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAF" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAF" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAF" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAF" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAF" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAF" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAF" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAF" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAF" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAF" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAF" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAF" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAF" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAF" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAF" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAF" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAF" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAF" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAF" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAF" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAF" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAF" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAF" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAF" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAF" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAF" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAF" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  result = (short)Optimise_internalCVPAF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  short result;
  
  if(args.Length() != 60) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFb.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFb" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFb" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFb" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFb" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFb" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFb" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFb" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFb" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFb" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFb" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFb" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFb" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFb" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFb" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFb" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFb" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFb" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFb" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFb" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFb" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFb" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFb" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFb" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFb" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFb" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFb" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFb" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFb" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFb" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFb" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFb" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFb" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFb" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFb" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFb" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  result = (short)Optimise_internalCVPAFb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFbl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  short result;
  
  if(args.Length() != 62) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFbl.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFbl" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFbl" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFbl" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFbl" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFbl" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFbl" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFbl" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFbl" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFbl" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFbl" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFbl" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFbl" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFbl" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFbl" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFbl" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFbl" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFbl" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFbl" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFbl" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFbl" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFbl" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFbl" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFbl" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFbl" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFbl" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFbl" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFbl" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFbl" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFbl" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFbl" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFbl" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFbl" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFbl" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFbl" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFbl" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFbl" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFbl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  vector arg64 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  short result;
  
  if(args.Length() != 64) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblQ.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblQ" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblQ" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblQ" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblQ" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblQ" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblQ" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblQ" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblQ" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblQ" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblQ" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblQ" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblQ" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblQ" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblQ" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblQ" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblQ" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblQ" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblQ" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblQ" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblQ" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblQ" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblQ" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblQ" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblQ" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblQ" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblQ" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblQ" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblQ" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblQ" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblQ" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblQ" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblQ" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblQ" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblQ" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblQ" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblQ" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg64 = 0;
    if(args[63]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      if(arr->Length()) {
        arg64 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg64[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[63]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg64[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  {
    if(arg64 && args[63]->IsArray()) {
      delete[] arg64;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSa(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  short result;
  
  if(args.Length() != 63) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSa.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSa" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSa" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSa" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSa" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSa" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSa" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSa" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSa" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSa" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSa" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblSa" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblSa" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSa" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSa" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSa" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSa" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSa" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSa" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSa" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSa" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSa" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSa" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSa" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSa" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSa" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSa" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSa" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSa" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSa" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSa" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSa" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSa" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSa" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSa" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSa" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSa" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSaM(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  int val64 ;
  int ecode64 = 0 ;
  short result;
  
  if(args.Length() != 65) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSaM.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode64 = SWIG_AsVal_int(args[63], &val64);
  if (!SWIG_IsOK(ecode64)) {
    SWIG_exception_fail(SWIG_ArgError(ecode64), "in method '" "Optimise_internalCVPAFblSaM" "', argument " "64"" of type '" "int""'");
  } 
  arg64 = static_cast< int >(val64);
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaM(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg65[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSaMS(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  double arg67 = (double) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  int val64 ;
  int ecode64 = 0 ;
  unsigned int val66 ;
  int ecode66 = 0 ;
  double val67 ;
  int ecode67 = 0 ;
  short result;
  
  if(args.Length() != 67) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSaMS.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode64 = SWIG_AsVal_int(args[63], &val64);
  if (!SWIG_IsOK(ecode64)) {
    SWIG_exception_fail(SWIG_ArgError(ecode64), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "64"" of type '" "int""'");
  } 
  arg64 = static_cast< int >(val64);
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_unsigned_SS_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "66"" of type '" "dimen""'");
  } 
  arg66 = static_cast< dimen >(val66);
  ecode67 = SWIG_AsVal_double(args[66], &val67);
  if (!SWIG_IsOK(ecode67)) {
    SWIG_exception_fail(SWIG_ArgError(ecode67), "in method '" "Optimise_internalCVPAFblSaMS" "', argument " "67"" of type '" "double""'");
  } 
  arg67 = static_cast< double >(val67);
  result = (short)Optimise_internalCVPAFblSaMS(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg65[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSaMSoft(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  int val64 ;
  int ecode64 = 0 ;
  unsigned int val66 ;
  int ecode66 = 0 ;
  short result;
  
  if(args.Length() != 71) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSaMSoft.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode64 = SWIG_AsVal_int(args[63], &val64);
  if (!SWIG_IsOK(ecode64)) {
    SWIG_exception_fail(SWIG_ArgError(ecode64), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "64"" of type '" "int""'");
  } 
  arg64 = static_cast< int >(val64);
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_unsigned_SS_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAFblSaMSoft" "', argument " "66"" of type '" "dimen""'");
  } 
  arg66 = static_cast< dimen >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg68 = 0;
    if(args[67]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      if(arr->Length()) {
        arg68 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg68[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg69 = 0;
    if(args[68]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      if(arr->Length()) {
        arg69 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg69[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg70 = 0;
    if(args[69]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      if(arr->Length()) {
        arg70 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg70[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg71 = 0;
    if(args[70]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      if(arr->Length()) {
        arg71 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg71[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoft(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg67[i]));
      }
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg68[i]));
      }
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg69[i]));
      }
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg70[i]));
      }
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg71[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  
  {
    if(arg67 && args[66]->IsArray()) {
      delete[] arg67;
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      delete[] arg68;
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      delete[] arg69;
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      delete[] arg70;
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      delete[] arg71;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSaMSoftQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  real arg22 ;
  real arg23 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  double val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  int val64 ;
  int ecode64 = 0 ;
  unsigned int val66 ;
  int ecode66 = 0 ;
  double val74 ;
  int ecode74 = 0 ;
  double val75 ;
  int ecode75 = 0 ;
  double val76 ;
  int ecode76 = 0 ;
  short result;
  
  if(args.Length() != 77) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSaMSoftQ.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  ecode22 = SWIG_AsVal_double(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "22"" of type '" "real""'");
  } 
  arg22 = static_cast< real >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode64 = SWIG_AsVal_int(args[63], &val64);
  if (!SWIG_IsOK(ecode64)) {
    SWIG_exception_fail(SWIG_ArgError(ecode64), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "64"" of type '" "int""'");
  } 
  arg64 = static_cast< int >(val64);
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_unsigned_SS_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "66"" of type '" "dimen""'");
  } 
  arg66 = static_cast< dimen >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg68 = 0;
    if(args[67]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      if(arr->Length()) {
        arg68 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg68[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg69 = 0;
    if(args[68]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      if(arr->Length()) {
        arg69 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg69[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg70 = 0;
    if(args[69]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      if(arr->Length()) {
        arg70 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg70[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg71 = 0;
    if(args[70]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      if(arr->Length()) {
        arg71 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg71[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg72 = 0;
    if(args[71]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      if(arr->Length()) {
        arg72 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg72[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg73 = 0;
    if(args[72]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      if(arr->Length()) {
        arg73 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg73[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode74 = SWIG_AsVal_double(args[73], &val74);
  if (!SWIG_IsOK(ecode74)) {
    SWIG_exception_fail(SWIG_ArgError(ecode74), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "74"" of type '" "double""'");
  } 
  arg74 = static_cast< double >(val74);
  ecode75 = SWIG_AsVal_double(args[74], &val75);
  if (!SWIG_IsOK(ecode75)) {
    SWIG_exception_fail(SWIG_ArgError(ecode75), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "75"" of type '" "double""'");
  } 
  arg75 = static_cast< double >(val75);
  ecode76 = SWIG_AsVal_double(args[75], &val76);
  if (!SWIG_IsOK(ecode76)) {
    SWIG_exception_fail(SWIG_ArgError(ecode76), "in method '" "Optimise_internalCVPAFblSaMSoftQ" "', argument " "76"" of type '" "double""'");
  } 
  arg76 = static_cast< double >(val76);
  {
    arg77 = 0;
    if(args[76]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      if(arr->Length()) {
        arg77 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg77[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoftQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg67[i]));
      }
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg68[i]));
      }
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg69[i]));
      }
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg70[i]));
      }
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg71[i]));
      }
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg72[i]));
      }
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg73[i]));
      }
    }
  }
  {
    if(arg77 && args[76]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg77[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  
  {
    if(arg67 && args[66]->IsArray()) {
      delete[] arg67;
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      delete[] arg68;
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      delete[] arg69;
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      delete[] arg70;
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      delete[] arg71;
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      delete[] arg72;
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      delete[] arg73;
    }
  }
  
  
  
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_internalCVPAFblSaMSoftQV(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  vector arg10 = (vector) 0 ;
  vector arg11 = (vector) 0 ;
  real arg12 ;
  vector arg13 = (vector) 0 ;
  real arg14 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  real arg17 ;
  long arg18 ;
  long arg19 ;
  int arg20 ;
  int arg21 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  int arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  int *arg31 = (int *) 0 ;
  dimen arg32 ;
  vector arg33 = (vector) 0 ;
  real arg34 ;
  dimen arg35 ;
  vector arg36 = (vector) 0 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  vector arg39 = (vector) 0 ;
  dimen arg40 ;
  dimen *arg41 = (dimen *) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  double arg46 = (double) -1 ;
  double arg47 = (double) -1 ;
  double *arg48 = (double *) 0 ;
  vector arg49 = (vector) 0 ;
  int arg50 = (int) 0 ;
  char *arg51 = (char *) 0 ;
  int arg52 = (int) 0 ;
  double arg53 = (double) 3.0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 1 ;
  double arg60 = (double) 1 ;
  double arg61 = (double) 0 ;
  vector arg62 = (vector) 0 ;
  vector arg63 = (vector) 0 ;
  int arg64 = (int) 0 ;
  size_t *arg65 = (size_t *) 0 ;
  dimen arg66 = (dimen) 0 ;
  vector arg67 = (vector) 0 ;
  vector arg68 = (vector) 0 ;
  vector arg69 = (vector) 0 ;
  vector arg70 = (vector) 0 ;
  vector arg71 = (vector) 0 ;
  vector arg72 = (vector) 0 ;
  vector arg73 = (vector) 0 ;
  double arg74 = (double) -1 ;
  double arg75 = (double) -1 ;
  double arg76 = (double) -1 ;
  int *arg77 = (int *) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val17 ;
  int ecode17 = 0 ;
  long val18 ;
  int ecode18 = 0 ;
  long val19 ;
  int ecode19 = 0 ;
  int val20 ;
  int ecode20 = 0 ;
  int val21 ;
  int ecode21 = 0 ;
  int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  unsigned int val32 ;
  int ecode32 = 0 ;
  double val34 ;
  int ecode34 = 0 ;
  unsigned int val35 ;
  int ecode35 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  unsigned int val40 ;
  int ecode40 = 0 ;
  double val46 ;
  int ecode46 = 0 ;
  double val47 ;
  int ecode47 = 0 ;
  int val50 ;
  int ecode50 = 0 ;
  int res51 ;
  char *buf51 = 0 ;
  int alloc51 = 0 ;
  int val52 ;
  int ecode52 = 0 ;
  double val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  double val60 ;
  int ecode60 = 0 ;
  double val61 ;
  int ecode61 = 0 ;
  int val64 ;
  int ecode64 = 0 ;
  unsigned int val66 ;
  int ecode66 = 0 ;
  double val74 ;
  int ecode74 = 0 ;
  double val75 ;
  int ecode75 = 0 ;
  double val76 ;
  int ecode76 = 0 ;
  short result;
  
  if(args.Length() != 77) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_internalCVPAFblSaMSoftQV.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode12 = SWIG_AsVal_double(args[11], &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "12"" of type '" "real""'");
  } 
  arg12 = static_cast< real >(val12);
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_double(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "14"" of type '" "real""'");
  } 
  arg14 = static_cast< real >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode17 = SWIG_AsVal_double(args[16], &val17);
  if (!SWIG_IsOK(ecode17)) {
    SWIG_exception_fail(SWIG_ArgError(ecode17), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "17"" of type '" "real""'");
  } 
  arg17 = static_cast< real >(val17);
  ecode18 = SWIG_AsVal_long(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "18"" of type '" "long""'");
  } 
  arg18 = static_cast< long >(val18);
  ecode19 = SWIG_AsVal_long(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "19"" of type '" "long""'");
  } 
  arg19 = static_cast< long >(val19);
  ecode20 = SWIG_AsVal_int(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "20"" of type '" "int""'");
  } 
  arg20 = static_cast< int >(val20);
  ecode21 = SWIG_AsVal_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "21"" of type '" "int""'");
  } 
  arg21 = static_cast< int >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode24 = SWIG_AsVal_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "24"" of type '" "int""'");
  } 
  arg24 = static_cast< int >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode32 = SWIG_AsVal_unsigned_SS_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "32"" of type '" "dimen""'");
  } 
  arg32 = static_cast< dimen >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode34 = SWIG_AsVal_double(args[33], &val34);
  if (!SWIG_IsOK(ecode34)) {
    SWIG_exception_fail(SWIG_ArgError(ecode34), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "34"" of type '" "real""'");
  } 
  arg34 = static_cast< real >(val34);
  ecode35 = SWIG_AsVal_unsigned_SS_int(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "35"" of type '" "dimen""'");
  } 
  arg35 = static_cast< dimen >(val35);
  {
    arg36 = 0;
    if(args[35]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      if(arr->Length()) {
        arg36 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg36[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode40 = SWIG_AsVal_unsigned_SS_int(args[39], &val40);
  if (!SWIG_IsOK(ecode40)) {
    SWIG_exception_fail(SWIG_ArgError(ecode40), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "40"" of type '" "dimen""'");
  } 
  arg40 = static_cast< dimen >(val40);
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_double(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "46"" of type '" "double""'");
  } 
  arg46 = static_cast< double >(val46);
  ecode47 = SWIG_AsVal_double(args[46], &val47);
  if (!SWIG_IsOK(ecode47)) {
    SWIG_exception_fail(SWIG_ArgError(ecode47), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "47"" of type '" "double""'");
  } 
  arg47 = static_cast< double >(val47);
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode50 = SWIG_AsVal_int(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "50"" of type '" "int""'");
  } 
  arg50 = static_cast< int >(val50);
  res51 = SWIG_AsCharPtrAndSize(args[50], &buf51, NULL, &alloc51);
  if (!SWIG_IsOK(res51)) {
    SWIG_exception_fail(SWIG_ArgError(res51), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "51"" of type '" "char *""'");
  }
  arg51 = reinterpret_cast< char * >(buf51);
  ecode52 = SWIG_AsVal_int(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "52"" of type '" "int""'");
  } 
  arg52 = static_cast< int >(val52);
  ecode53 = SWIG_AsVal_double(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "53"" of type '" "double""'");
  } 
  arg53 = static_cast< double >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  ecode60 = SWIG_AsVal_double(args[59], &val60);
  if (!SWIG_IsOK(ecode60)) {
    SWIG_exception_fail(SWIG_ArgError(ecode60), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "60"" of type '" "double""'");
  } 
  arg60 = static_cast< double >(val60);
  ecode61 = SWIG_AsVal_double(args[60], &val61);
  if (!SWIG_IsOK(ecode61)) {
    SWIG_exception_fail(SWIG_ArgError(ecode61), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "61"" of type '" "double""'");
  } 
  arg61 = static_cast< double >(val61);
  {
    arg62 = 0;
    if(args[61]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      if(arr->Length()) {
        arg62 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg62[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg63 = 0;
    if(args[62]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      if(arr->Length()) {
        arg63 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg63[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode64 = SWIG_AsVal_int(args[63], &val64);
  if (!SWIG_IsOK(ecode64)) {
    SWIG_exception_fail(SWIG_ArgError(ecode64), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "64"" of type '" "int""'");
  } 
  arg64 = static_cast< int >(val64);
  {
    arg65 = 0;
    if(args[64]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      if(arr->Length()) {
        arg65 = new size_t[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg65[i] = (size_t) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode66 = SWIG_AsVal_unsigned_SS_int(args[65], &val66);
  if (!SWIG_IsOK(ecode66)) {
    SWIG_exception_fail(SWIG_ArgError(ecode66), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "66"" of type '" "dimen""'");
  } 
  arg66 = static_cast< dimen >(val66);
  {
    arg67 = 0;
    if(args[66]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      if(arr->Length()) {
        arg67 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg67[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg68 = 0;
    if(args[67]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      if(arr->Length()) {
        arg68 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg68[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg69 = 0;
    if(args[68]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      if(arr->Length()) {
        arg69 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg69[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg70 = 0;
    if(args[69]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      if(arr->Length()) {
        arg70 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg70[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg71 = 0;
    if(args[70]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      if(arr->Length()) {
        arg71 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg71[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg72 = 0;
    if(args[71]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      if(arr->Length()) {
        arg72 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg72[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg73 = 0;
    if(args[72]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      if(arr->Length()) {
        arg73 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg73[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode74 = SWIG_AsVal_double(args[73], &val74);
  if (!SWIG_IsOK(ecode74)) {
    SWIG_exception_fail(SWIG_ArgError(ecode74), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "74"" of type '" "double""'");
  } 
  arg74 = static_cast< double >(val74);
  ecode75 = SWIG_AsVal_double(args[74], &val75);
  if (!SWIG_IsOK(ecode75)) {
    SWIG_exception_fail(SWIG_ArgError(ecode75), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "75"" of type '" "double""'");
  } 
  arg75 = static_cast< double >(val75);
  ecode76 = SWIG_AsVal_double(args[75], &val76);
  if (!SWIG_IsOK(ecode76)) {
    SWIG_exception_fail(SWIG_ArgError(ecode76), "in method '" "Optimise_internalCVPAFblSaMSoftQV" "', argument " "76"" of type '" "double""'");
  } 
  arg76 = static_cast< double >(val76);
  {
    arg77 = 0;
    if(args[76]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      if(arr->Length()) {
        arg77 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg77[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)Optimise_internalCVPAFblSaMSoftQV(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60,arg61,arg62,arg63,arg64,arg65,arg66,arg67,arg68,arg69,arg70,arg71,arg72,arg73,arg74,arg75,arg76,arg77);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg31[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg36 && args[35]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[35]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg36[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg39[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg62 && args[61]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[61]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg62[i]));
      }
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[62]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg63[i]));
      }
    }
  }
  {
    if(arg65 && args[64]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[64]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg65[i]));
      }
    }
  }
  {
    if(arg67 && args[66]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[66]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg67[i]));
      }
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[67]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg68[i]));
      }
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[68]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg69[i]));
      }
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[69]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg70[i]));
      }
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[70]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg71[i]));
      }
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[71]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg72[i]));
      }
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[72]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg73[i]));
      }
    }
  }
  {
    if(arg77 && args[76]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[76]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg77[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  
  
  
  
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  
  
  
  
  
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31){
      delete[] arg31;arg31=0;
    }
  }
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  
  
  {
    if(arg36 && args[35]->IsArray()) {
      delete[] arg36;
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39 && args[38]->IsArray()) {
      delete[] arg39;
    }
  }
  
  {
    if(arg41){
      delete[] arg41;arg41=0;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  {
    if(arg48){
      delete[] arg48;arg48=0;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  
  
  {
    if(arg62 && args[61]->IsArray()) {
      delete[] arg62;
    }
  }
  {
    if(arg63 && args[62]->IsArray()) {
      delete[] arg63;
    }
  }
  
  {
    if(arg65){
      delete[] arg65;arg65=0;
    }
  }
  
  {
    if(arg67 && args[66]->IsArray()) {
      delete[] arg67;
    }
  }
  {
    if(arg68 && args[67]->IsArray()) {
      delete[] arg68;
    }
  }
  {
    if(arg69 && args[68]->IsArray()) {
      delete[] arg69;
    }
  }
  {
    if(arg70 && args[69]->IsArray()) {
      delete[] arg70;
    }
  }
  {
    if(arg71 && args[70]->IsArray()) {
      delete[] arg71;
    }
  }
  {
    if(arg72 && args[71]->IsArray()) {
      delete[] arg72;
    }
  }
  {
    if(arg73 && args[72]->IsArray()) {
      delete[] arg73;
    }
  }
  
  
  
  {
    if(arg77){
      delete[] arg77;arg77=0;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  unsigned int val42 ;
  int ecode42 = 0 ;
  unsigned int val44 ;
  int ecode44 = 0 ;
  short result;
  
  if(args.Length() != 47) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPA.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPA" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPA" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPA" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPA" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPA" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPA" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPA" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPA" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPA" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPA" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPA" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPA" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPA" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPA" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPA" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPA" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPA" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPA" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPA" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPA" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode42 = SWIG_AsVal_unsigned_SS_int(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "FrontierCVPA" "', argument " "42"" of type '" "dimen""'");
  } 
  arg42 = static_cast< dimen >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_unsigned_SS_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "FrontierCVPA" "', argument " "44"" of type '" "dimen""'");
  } 
  arg44 = static_cast< dimen >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)FrontierCVPA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg45[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAF(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  unsigned int val42 ;
  int ecode42 = 0 ;
  unsigned int val44 ;
  int ecode44 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  short result;
  
  if(args.Length() != 51) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAF.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAF" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAF" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAF" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAF" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAF" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAF" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAF" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAF" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAF" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAF" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAF" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAF" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAF" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAF" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPAF" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPAF" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPAF" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAF" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAF" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPAF" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode42 = SWIG_AsVal_unsigned_SS_int(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "FrontierCVPAF" "', argument " "42"" of type '" "dimen""'");
  } 
  arg42 = static_cast< dimen >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_unsigned_SS_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "FrontierCVPAF" "', argument " "44"" of type '" "dimen""'");
  } 
  arg44 = static_cast< dimen >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "FrontierCVPAF" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  result = (short)FrontierCVPAF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg45[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAFb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  unsigned int val42 ;
  int ecode42 = 0 ;
  unsigned int val44 ;
  int ecode44 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  long val52 ;
  int ecode52 = 0 ;
  long val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  double val56 ;
  int ecode56 = 0 ;
  short result;
  
  if(args.Length() != 56) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAFb.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAFb" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAFb" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAFb" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAFb" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAFb" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAFb" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAFb" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAFb" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAFb" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAFb" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAFb" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAFb" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAFb" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAFb" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPAFb" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPAFb" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPAFb" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAFb" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAFb" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPAFb" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode42 = SWIG_AsVal_unsigned_SS_int(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "FrontierCVPAFb" "', argument " "42"" of type '" "dimen""'");
  } 
  arg42 = static_cast< dimen >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_unsigned_SS_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "FrontierCVPAFb" "', argument " "44"" of type '" "dimen""'");
  } 
  arg44 = static_cast< dimen >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "FrontierCVPAFb" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  ecode52 = SWIG_AsVal_long(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "FrontierCVPAFb" "', argument " "52"" of type '" "long""'");
  } 
  arg52 = static_cast< long >(val52);
  ecode53 = SWIG_AsVal_long(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "FrontierCVPAFb" "', argument " "53"" of type '" "long""'");
  } 
  arg53 = static_cast< long >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "FrontierCVPAFb" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "FrontierCVPAFb" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_double(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "FrontierCVPAFb" "', argument " "56"" of type '" "double""'");
  } 
  arg56 = static_cast< double >(val56);
  result = (short)FrontierCVPAFb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg45[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAFbl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  double arg57 = (double) 0 ;
  vector arg58 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  unsigned int val42 ;
  int ecode42 = 0 ;
  unsigned int val44 ;
  int ecode44 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  long val52 ;
  int ecode52 = 0 ;
  long val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  double val56 ;
  int ecode56 = 0 ;
  double val57 ;
  int ecode57 = 0 ;
  short result;
  
  if(args.Length() != 58) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAFbl.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAFbl" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAFbl" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAFbl" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAFbl" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAFbl" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAFbl" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAFbl" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAFbl" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAFbl" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAFbl" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAFbl" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAFbl" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAFbl" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAFbl" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPAFbl" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPAFbl" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPAFbl" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAFbl" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAFbl" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPAFbl" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode42 = SWIG_AsVal_unsigned_SS_int(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "FrontierCVPAFbl" "', argument " "42"" of type '" "dimen""'");
  } 
  arg42 = static_cast< dimen >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_unsigned_SS_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "FrontierCVPAFbl" "', argument " "44"" of type '" "dimen""'");
  } 
  arg44 = static_cast< dimen >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "FrontierCVPAFbl" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  ecode52 = SWIG_AsVal_long(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "FrontierCVPAFbl" "', argument " "52"" of type '" "long""'");
  } 
  arg52 = static_cast< long >(val52);
  ecode53 = SWIG_AsVal_long(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "FrontierCVPAFbl" "', argument " "53"" of type '" "long""'");
  } 
  arg53 = static_cast< long >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "FrontierCVPAFbl" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "FrontierCVPAFbl" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_double(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "FrontierCVPAFbl" "', argument " "56"" of type '" "double""'");
  } 
  arg56 = static_cast< double >(val56);
  ecode57 = SWIG_AsVal_double(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "FrontierCVPAFbl" "', argument " "57"" of type '" "double""'");
  } 
  arg57 = static_cast< double >(val57);
  {
    arg58 = 0;
    if(args[57]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[57]);
      if(arr->Length()) {
        arg58 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg58[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)FrontierCVPAFbl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg45[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg58 && args[57]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[57]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg58[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  
  
  
  
  
  
  {
    if(arg58 && args[57]->IsArray()) {
      delete[] arg58;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAFblQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  dimen arg42 ;
  vector arg43 = (vector) 0 ;
  dimen arg44 ;
  dimen *arg45 = (dimen *) 0 ;
  vector arg46 = (vector) 0 ;
  vector arg47 = (vector) 0 ;
  vector arg48 = (vector) 0 ;
  vector arg49 = (vector) 0 ;
  vector arg50 = (vector) 0 ;
  int arg51 = (int) 0 ;
  long arg52 = (long) -1 ;
  long arg53 = (long) -1 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  double arg56 = (double) 1 ;
  double arg57 = (double) 0 ;
  vector arg58 = (vector) 0 ;
  vector arg59 = (vector) 0 ;
  vector arg60 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  unsigned int val42 ;
  int ecode42 = 0 ;
  unsigned int val44 ;
  int ecode44 = 0 ;
  int val51 ;
  int ecode51 = 0 ;
  long val52 ;
  int ecode52 = 0 ;
  long val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  double val56 ;
  int ecode56 = 0 ;
  double val57 ;
  int ecode57 = 0 ;
  short result;
  
  if(args.Length() != 60) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAFblQ.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAFblQ" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAFblQ" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAFblQ" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAFblQ" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAFblQ" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAFblQ" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAFblQ" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAFblQ" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAFblQ" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAFblQ" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAFblQ" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAFblQ" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAFblQ" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAFblQ" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPAFblQ" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPAFblQ" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPAFblQ" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAFblQ" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAFblQ" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPAFblQ" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode42 = SWIG_AsVal_unsigned_SS_int(args[41], &val42);
  if (!SWIG_IsOK(ecode42)) {
    SWIG_exception_fail(SWIG_ArgError(ecode42), "in method '" "FrontierCVPAFblQ" "', argument " "42"" of type '" "dimen""'");
  } 
  arg42 = static_cast< dimen >(val42);
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode44 = SWIG_AsVal_unsigned_SS_int(args[43], &val44);
  if (!SWIG_IsOK(ecode44)) {
    SWIG_exception_fail(SWIG_ArgError(ecode44), "in method '" "FrontierCVPAFblQ" "', argument " "44"" of type '" "dimen""'");
  } 
  arg44 = static_cast< dimen >(val44);
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg46 = 0;
    if(args[45]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      if(arr->Length()) {
        arg46 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg46[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg47 = 0;
    if(args[46]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      if(arr->Length()) {
        arg47 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg47[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg48 = 0;
    if(args[47]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      if(arr->Length()) {
        arg48 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg48[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg49 = 0;
    if(args[48]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      if(arr->Length()) {
        arg49 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg49[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg50 = 0;
    if(args[49]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      if(arr->Length()) {
        arg50 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg50[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode51 = SWIG_AsVal_int(args[50], &val51);
  if (!SWIG_IsOK(ecode51)) {
    SWIG_exception_fail(SWIG_ArgError(ecode51), "in method '" "FrontierCVPAFblQ" "', argument " "51"" of type '" "int""'");
  } 
  arg51 = static_cast< int >(val51);
  ecode52 = SWIG_AsVal_long(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "FrontierCVPAFblQ" "', argument " "52"" of type '" "long""'");
  } 
  arg52 = static_cast< long >(val52);
  ecode53 = SWIG_AsVal_long(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "FrontierCVPAFblQ" "', argument " "53"" of type '" "long""'");
  } 
  arg53 = static_cast< long >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "FrontierCVPAFblQ" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "FrontierCVPAFblQ" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_double(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "FrontierCVPAFblQ" "', argument " "56"" of type '" "double""'");
  } 
  arg56 = static_cast< double >(val56);
  ecode57 = SWIG_AsVal_double(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "FrontierCVPAFblQ" "', argument " "57"" of type '" "double""'");
  } 
  arg57 = static_cast< double >(val57);
  {
    arg58 = 0;
    if(args[57]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[57]);
      if(arr->Length()) {
        arg58 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg58[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg59 = 0;
    if(args[58]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[58]);
      if(arr->Length()) {
        arg59 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg59[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg60 = 0;
    if(args[59]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[59]);
      if(arr->Length()) {
        arg60 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg60[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)FrontierCVPAFblQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg45[i]));
      }
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[45]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg46[i]));
      }
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[46]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg47[i]));
      }
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[47]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg48[i]));
      }
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[48]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg49[i]));
      }
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[49]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg50[i]));
      }
    }
  }
  {
    if(arg58 && args[57]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[57]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg58[i]));
      }
    }
  }
  {
    if(arg59 && args[58]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[58]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg59[i]));
      }
    }
  }
  {
    if(arg60 && args[59]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[59]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg60[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  {
    if(arg45){
      delete[] arg45;arg45=0;
    }
  }
  {
    if(arg46 && args[45]->IsArray()) {
      delete[] arg46;
    }
  }
  {
    if(arg47 && args[46]->IsArray()) {
      delete[] arg47;
    }
  }
  {
    if(arg48 && args[47]->IsArray()) {
      delete[] arg48;
    }
  }
  {
    if(arg49 && args[48]->IsArray()) {
      delete[] arg49;
    }
  }
  {
    if(arg50 && args[49]->IsArray()) {
      delete[] arg50;
    }
  }
  
  
  
  
  
  
  
  {
    if(arg58 && args[57]->IsArray()) {
      delete[] arg58;
    }
  }
  {
    if(arg59 && args[58]->IsArray()) {
      delete[] arg59;
    }
  }
  {
    if(arg60 && args[59]->IsArray()) {
      delete[] arg60;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPF(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  real arg21 ;
  long arg22 ;
  long arg23 ;
  dimen arg24 ;
  int arg25 ;
  real arg26 ;
  real arg27 ;
  int arg28 ;
  int arg29 ;
  real arg30 ;
  real arg31 ;
  int arg32 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  int *arg35 = (int *) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  real arg38 ;
  dimen arg39 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  vector arg44 = (vector) 0 ;
  vector arg45 = (vector) 0 ;
  int arg46 = (int) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val21 ;
  int ecode21 = 0 ;
  long val22 ;
  int ecode22 = 0 ;
  long val23 ;
  int ecode23 = 0 ;
  unsigned int val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  double val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  int val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  double val30 ;
  int ecode30 = 0 ;
  double val31 ;
  int ecode31 = 0 ;
  int val32 ;
  int ecode32 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  double val38 ;
  int ecode38 = 0 ;
  unsigned int val39 ;
  int ecode39 = 0 ;
  int val46 ;
  int ecode46 = 0 ;
  short result;
  
  if(args.Length() != 46) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPF.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPF" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPF" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPF" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPF" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPF" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_double(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPF" "', argument " "21"" of type '" "real""'");
  } 
  arg21 = static_cast< real >(val21);
  ecode22 = SWIG_AsVal_long(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPF" "', argument " "22"" of type '" "long""'");
  } 
  arg22 = static_cast< long >(val22);
  ecode23 = SWIG_AsVal_long(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPF" "', argument " "23"" of type '" "long""'");
  } 
  arg23 = static_cast< long >(val23);
  ecode24 = SWIG_AsVal_unsigned_SS_int(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPF" "', argument " "24"" of type '" "dimen""'");
  } 
  arg24 = static_cast< dimen >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPF" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_double(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPF" "', argument " "26"" of type '" "real""'");
  } 
  arg26 = static_cast< real >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPF" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_int(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPF" "', argument " "28"" of type '" "int""'");
  } 
  arg28 = static_cast< int >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPF" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  ecode30 = SWIG_AsVal_double(args[29], &val30);
  if (!SWIG_IsOK(ecode30)) {
    SWIG_exception_fail(SWIG_ArgError(ecode30), "in method '" "FrontierCVPF" "', argument " "30"" of type '" "real""'");
  } 
  arg30 = static_cast< real >(val30);
  ecode31 = SWIG_AsVal_double(args[30], &val31);
  if (!SWIG_IsOK(ecode31)) {
    SWIG_exception_fail(SWIG_ArgError(ecode31), "in method '" "FrontierCVPF" "', argument " "31"" of type '" "real""'");
  } 
  arg31 = static_cast< real >(val31);
  ecode32 = SWIG_AsVal_int(args[31], &val32);
  if (!SWIG_IsOK(ecode32)) {
    SWIG_exception_fail(SWIG_ArgError(ecode32), "in method '" "FrontierCVPF" "', argument " "32"" of type '" "int""'");
  } 
  arg32 = static_cast< int >(val32);
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPF" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_double(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPF" "', argument " "38"" of type '" "real""'");
  } 
  arg38 = static_cast< real >(val38);
  ecode39 = SWIG_AsVal_unsigned_SS_int(args[38], &val39);
  if (!SWIG_IsOK(ecode39)) {
    SWIG_exception_fail(SWIG_ArgError(ecode39), "in method '" "FrontierCVPF" "', argument " "39"" of type '" "dimen""'");
  } 
  arg39 = static_cast< dimen >(val39);
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg44 = 0;
    if(args[43]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      if(arr->Length()) {
        arg44 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg44[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg45 = 0;
    if(args[44]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      if(arr->Length()) {
        arg45 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg45[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode46 = SWIG_AsVal_int(args[45], &val46);
  if (!SWIG_IsOK(ecode46)) {
    SWIG_exception_fail(SWIG_ArgError(ecode46), "in method '" "FrontierCVPF" "', argument " "46"" of type '" "int""'");
  } 
  arg46 = static_cast< int >(val46);
  result = (short)FrontierCVPF(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[43]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg44[i]));
      }
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[44]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg45[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35){
      delete[] arg35;arg35=0;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  {
    if(arg44 && args[43]->IsArray()) {
      delete[] arg44;
    }
  }
  {
    if(arg45 && args[44]->IsArray()) {
      delete[] arg45;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAextcosts(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  dimen arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  int arg29 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  int *arg32 = (int *) 0 ;
  dimen arg33 ;
  vector arg34 = (vector) 0 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  pUtility arg44 = (pUtility) 0 ;
  pModC arg45 = (pModC) 0 ;
  pModQ arg46 = (pModQ) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  void *arg49 = (void *) 0 ;
  short arg50 = (short) 0 ;
  vector arg51 = (vector) 0 ;
  short arg52 = (short) 1 ;
  int arg53 = (int) 0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  unsigned int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  unsigned int val33 ;
  int ecode33 = 0 ;
  double val35 ;
  int ecode35 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  void *argp44 ;
  int res44 = 0 ;
  void *argp45 ;
  int res45 = 0 ;
  void *argp46 ;
  int res46 = 0 ;
  short val50 ;
  int ecode50 = 0 ;
  short val52 ;
  int ecode52 = 0 ;
  int val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  short result;
  
  if(args.Length() != 55) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAextcosts.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAextcosts" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAextcosts" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAextcosts" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAextcosts" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAextcosts" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "FrontierCVPAextcosts" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "FrontierCVPAextcosts" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAextcosts" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_unsigned_SS_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAextcosts" "', argument " "22"" of type '" "dimen""'");
  } 
  arg22 = static_cast< dimen >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAextcosts" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAextcosts" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAextcosts" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAextcosts" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAextcosts" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAextcosts" "', argument " "28"" of type '" "real""'");
  } 
  arg28 = static_cast< real >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAextcosts" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg32 = 0;
    if(args[31]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      if(arr->Length()) {
        arg32 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg32[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode33 = SWIG_AsVal_unsigned_SS_int(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "FrontierCVPAextcosts" "', argument " "33"" of type '" "dimen""'");
  } 
  arg33 = static_cast< dimen >(val33);
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode35 = SWIG_AsVal_double(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "FrontierCVPAextcosts" "', argument " "35"" of type '" "real""'");
  } 
  arg35 = static_cast< real >(val35);
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAextcosts" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAextcosts" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res44 = SWIG_ConvertPtr(args[43], &argp44, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res44)) {
      SWIG_exception_fail(SWIG_ArgError(res44), "in method '" "FrontierCVPAextcosts" "', argument " "44"" of type '" "pUtility""'"); 
    }  
    if (!argp44) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcosts" "', argument " "44"" of type '" "pUtility""'");
    } else {
      arg44 = *(reinterpret_cast< pUtility * >(argp44));
    }
  }
  {
    res45 = SWIG_ConvertPtr(args[44], &argp45, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res45)) {
      SWIG_exception_fail(SWIG_ArgError(res45), "in method '" "FrontierCVPAextcosts" "', argument " "45"" of type '" "pModC""'"); 
    }  
    if (!argp45) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcosts" "', argument " "45"" of type '" "pModC""'");
    } else {
      arg45 = *(reinterpret_cast< pModC * >(argp45));
    }
  }
  {
    res46 = SWIG_ConvertPtr(args[45], &argp46, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res46)) {
      SWIG_exception_fail(SWIG_ArgError(res46), "in method '" "FrontierCVPAextcosts" "', argument " "46"" of type '" "pModQ""'"); 
    }  
    if (!argp46) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcosts" "', argument " "46"" of type '" "pModQ""'");
    } else {
      arg46 = *(reinterpret_cast< pModQ * >(argp46));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode50 = SWIG_AsVal_short(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "FrontierCVPAextcosts" "', argument " "50"" of type '" "short""'");
  } 
  arg50 = static_cast< short >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode52 = SWIG_AsVal_short(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "FrontierCVPAextcosts" "', argument " "52"" of type '" "short""'");
  } 
  arg52 = static_cast< short >(val52);
  ecode53 = SWIG_AsVal_int(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "FrontierCVPAextcosts" "', argument " "53"" of type '" "int""'");
  } 
  arg53 = static_cast< int >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "FrontierCVPAextcosts" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "FrontierCVPAextcosts" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "FrontierCVPAextcosts" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "FrontierCVPAextcosts" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "FrontierCVPAextcosts" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  result = (short)FrontierCVPAextcosts(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg32 && args[31]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg32[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg51[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  
  
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FrontierCVPAextcostsl(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  long arg7 ;
  char **arg8 = (char **) 0 ;
  vector arg9 = (vector) 0 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  real arg18 ;
  real arg19 ;
  long arg20 ;
  long arg21 ;
  dimen arg22 ;
  real arg23 ;
  real arg24 ;
  int arg25 ;
  int arg26 ;
  real arg27 ;
  real arg28 ;
  int arg29 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  int *arg32 = (int *) 0 ;
  dimen arg33 ;
  vector arg34 = (vector) 0 ;
  real arg35 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  dimen arg38 ;
  dimen *arg39 = (dimen *) 0 ;
  vector arg40 = (vector) 0 ;
  vector arg41 = (vector) 0 ;
  vector arg42 = (vector) 0 ;
  vector arg43 = (vector) 0 ;
  pUtility arg44 = (pUtility) 0 ;
  pModC arg45 = (pModC) 0 ;
  pModQ arg46 = (pModQ) 0 ;
  void *arg47 = (void *) 0 ;
  void *arg48 = (void *) 0 ;
  void *arg49 = (void *) 0 ;
  short arg50 = (short) 0 ;
  vector arg51 = (vector) 0 ;
  short arg52 = (short) 1 ;
  int arg53 = (int) 0 ;
  long arg54 = (long) -1 ;
  long arg55 = (long) -1 ;
  long arg56 = (long) -1 ;
  long arg57 = (long) -1 ;
  double arg58 = (double) 1 ;
  double arg59 = (double) 0 ;
  vector arg60 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  double val18 ;
  int ecode18 = 0 ;
  double val19 ;
  int ecode19 = 0 ;
  long val20 ;
  int ecode20 = 0 ;
  long val21 ;
  int ecode21 = 0 ;
  unsigned int val22 ;
  int ecode22 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  double val24 ;
  int ecode24 = 0 ;
  int val25 ;
  int ecode25 = 0 ;
  int val26 ;
  int ecode26 = 0 ;
  double val27 ;
  int ecode27 = 0 ;
  double val28 ;
  int ecode28 = 0 ;
  int val29 ;
  int ecode29 = 0 ;
  unsigned int val33 ;
  int ecode33 = 0 ;
  double val35 ;
  int ecode35 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  unsigned int val38 ;
  int ecode38 = 0 ;
  void *argp44 ;
  int res44 = 0 ;
  void *argp45 ;
  int res45 = 0 ;
  void *argp46 ;
  int res46 = 0 ;
  short val50 ;
  int ecode50 = 0 ;
  short val52 ;
  int ecode52 = 0 ;
  int val53 ;
  int ecode53 = 0 ;
  long val54 ;
  int ecode54 = 0 ;
  long val55 ;
  int ecode55 = 0 ;
  long val56 ;
  int ecode56 = 0 ;
  long val57 ;
  int ecode57 = 0 ;
  double val58 ;
  int ecode58 = 0 ;
  double val59 ;
  int ecode59 = 0 ;
  short result;
  
  if(args.Length() != 57) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FrontierCVPAextcostsl.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "FrontierCVPAextcostsl" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  {
    arg2 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "FrontierCVPAextcostsl" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  ecode7 = SWIG_AsVal_long(args[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "FrontierCVPAextcostsl" "', argument " "7"" of type '" "long""'");
  } 
  arg7 = static_cast< long >(val7);
  {
    arg8 = 0;
    
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()){
        arg8 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg8[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "FrontierCVPAextcostsl" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode18 = SWIG_AsVal_double(args[17], &val18);
  if (!SWIG_IsOK(ecode18)) {
    SWIG_exception_fail(SWIG_ArgError(ecode18), "in method '" "FrontierCVPAextcostsl" "', argument " "18"" of type '" "real""'");
  } 
  arg18 = static_cast< real >(val18);
  ecode19 = SWIG_AsVal_double(args[18], &val19);
  if (!SWIG_IsOK(ecode19)) {
    SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "FrontierCVPAextcostsl" "', argument " "19"" of type '" "real""'");
  } 
  arg19 = static_cast< real >(val19);
  ecode20 = SWIG_AsVal_long(args[19], &val20);
  if (!SWIG_IsOK(ecode20)) {
    SWIG_exception_fail(SWIG_ArgError(ecode20), "in method '" "FrontierCVPAextcostsl" "', argument " "20"" of type '" "long""'");
  } 
  arg20 = static_cast< long >(val20);
  ecode21 = SWIG_AsVal_long(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "FrontierCVPAextcostsl" "', argument " "21"" of type '" "long""'");
  } 
  arg21 = static_cast< long >(val21);
  ecode22 = SWIG_AsVal_unsigned_SS_int(args[21], &val22);
  if (!SWIG_IsOK(ecode22)) {
    SWIG_exception_fail(SWIG_ArgError(ecode22), "in method '" "FrontierCVPAextcostsl" "', argument " "22"" of type '" "dimen""'");
  } 
  arg22 = static_cast< dimen >(val22);
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "FrontierCVPAextcostsl" "', argument " "23"" of type '" "real""'");
  } 
  arg23 = static_cast< real >(val23);
  ecode24 = SWIG_AsVal_double(args[23], &val24);
  if (!SWIG_IsOK(ecode24)) {
    SWIG_exception_fail(SWIG_ArgError(ecode24), "in method '" "FrontierCVPAextcostsl" "', argument " "24"" of type '" "real""'");
  } 
  arg24 = static_cast< real >(val24);
  ecode25 = SWIG_AsVal_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "FrontierCVPAextcostsl" "', argument " "25"" of type '" "int""'");
  } 
  arg25 = static_cast< int >(val25);
  ecode26 = SWIG_AsVal_int(args[25], &val26);
  if (!SWIG_IsOK(ecode26)) {
    SWIG_exception_fail(SWIG_ArgError(ecode26), "in method '" "FrontierCVPAextcostsl" "', argument " "26"" of type '" "int""'");
  } 
  arg26 = static_cast< int >(val26);
  ecode27 = SWIG_AsVal_double(args[26], &val27);
  if (!SWIG_IsOK(ecode27)) {
    SWIG_exception_fail(SWIG_ArgError(ecode27), "in method '" "FrontierCVPAextcostsl" "', argument " "27"" of type '" "real""'");
  } 
  arg27 = static_cast< real >(val27);
  ecode28 = SWIG_AsVal_double(args[27], &val28);
  if (!SWIG_IsOK(ecode28)) {
    SWIG_exception_fail(SWIG_ArgError(ecode28), "in method '" "FrontierCVPAextcostsl" "', argument " "28"" of type '" "real""'");
  } 
  arg28 = static_cast< real >(val28);
  ecode29 = SWIG_AsVal_int(args[28], &val29);
  if (!SWIG_IsOK(ecode29)) {
    SWIG_exception_fail(SWIG_ArgError(ecode29), "in method '" "FrontierCVPAextcostsl" "', argument " "29"" of type '" "int""'");
  } 
  arg29 = static_cast< int >(val29);
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg32 = 0;
    if(args[31]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      if(arr->Length()) {
        arg32 = new int[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg32[i] = (int) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode33 = SWIG_AsVal_unsigned_SS_int(args[32], &val33);
  if (!SWIG_IsOK(ecode33)) {
    SWIG_exception_fail(SWIG_ArgError(ecode33), "in method '" "FrontierCVPAextcostsl" "', argument " "33"" of type '" "dimen""'");
  } 
  arg33 = static_cast< dimen >(val33);
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode35 = SWIG_AsVal_double(args[34], &val35);
  if (!SWIG_IsOK(ecode35)) {
    SWIG_exception_fail(SWIG_ArgError(ecode35), "in method '" "FrontierCVPAextcostsl" "', argument " "35"" of type '" "real""'");
  } 
  arg35 = static_cast< real >(val35);
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "FrontierCVPAextcostsl" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode38 = SWIG_AsVal_unsigned_SS_int(args[37], &val38);
  if (!SWIG_IsOK(ecode38)) {
    SWIG_exception_fail(SWIG_ArgError(ecode38), "in method '" "FrontierCVPAextcostsl" "', argument " "38"" of type '" "dimen""'");
  } 
  arg38 = static_cast< dimen >(val38);
  {
    arg39 = 0;
    if(args[38]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      if(arr->Length()) {
        arg39 = new dimen[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg39[i] = (dimen) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg40 = 0;
    if(args[39]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      if(arr->Length()) {
        arg40 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg40[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg41 = 0;
    if(args[40]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      if(arr->Length()) {
        arg41 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg41[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg42 = 0;
    if(args[41]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      if(arr->Length()) {
        arg42 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg42[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg43 = 0;
    if(args[42]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      if(arr->Length()) {
        arg43 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg43[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    res44 = SWIG_ConvertPtr(args[43], &argp44, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res44)) {
      SWIG_exception_fail(SWIG_ArgError(res44), "in method '" "FrontierCVPAextcostsl" "', argument " "44"" of type '" "pUtility""'"); 
    }  
    if (!argp44) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcostsl" "', argument " "44"" of type '" "pUtility""'");
    } else {
      arg44 = *(reinterpret_cast< pUtility * >(argp44));
    }
  }
  {
    res45 = SWIG_ConvertPtr(args[44], &argp45, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res45)) {
      SWIG_exception_fail(SWIG_ArgError(res45), "in method '" "FrontierCVPAextcostsl" "', argument " "45"" of type '" "pModC""'"); 
    }  
    if (!argp45) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcostsl" "', argument " "45"" of type '" "pModC""'");
    } else {
      arg45 = *(reinterpret_cast< pModC * >(argp45));
    }
  }
  {
    res46 = SWIG_ConvertPtr(args[45], &argp46, SWIGTYPE_p_pModQ,  0 );
    if (!SWIG_IsOK(res46)) {
      SWIG_exception_fail(SWIG_ArgError(res46), "in method '" "FrontierCVPAextcostsl" "', argument " "46"" of type '" "pModQ""'"); 
    }  
    if (!argp46) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FrontierCVPAextcostsl" "', argument " "46"" of type '" "pModQ""'");
    } else {
      arg46 = *(reinterpret_cast< pModQ * >(argp46));
    }
  }
  {
    
  }
  {
    
  }
  {
    
  }
  ecode50 = SWIG_AsVal_short(args[49], &val50);
  if (!SWIG_IsOK(ecode50)) {
    SWIG_exception_fail(SWIG_ArgError(ecode50), "in method '" "FrontierCVPAextcostsl" "', argument " "50"" of type '" "short""'");
  } 
  arg50 = static_cast< short >(val50);
  {
    arg51 = 0;
    if(args[50]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      if(arr->Length()) {
        arg51 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg51[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode52 = SWIG_AsVal_short(args[51], &val52);
  if (!SWIG_IsOK(ecode52)) {
    SWIG_exception_fail(SWIG_ArgError(ecode52), "in method '" "FrontierCVPAextcostsl" "', argument " "52"" of type '" "short""'");
  } 
  arg52 = static_cast< short >(val52);
  ecode53 = SWIG_AsVal_int(args[52], &val53);
  if (!SWIG_IsOK(ecode53)) {
    SWIG_exception_fail(SWIG_ArgError(ecode53), "in method '" "FrontierCVPAextcostsl" "', argument " "53"" of type '" "int""'");
  } 
  arg53 = static_cast< int >(val53);
  ecode54 = SWIG_AsVal_long(args[53], &val54);
  if (!SWIG_IsOK(ecode54)) {
    SWIG_exception_fail(SWIG_ArgError(ecode54), "in method '" "FrontierCVPAextcostsl" "', argument " "54"" of type '" "long""'");
  } 
  arg54 = static_cast< long >(val54);
  ecode55 = SWIG_AsVal_long(args[54], &val55);
  if (!SWIG_IsOK(ecode55)) {
    SWIG_exception_fail(SWIG_ArgError(ecode55), "in method '" "FrontierCVPAextcostsl" "', argument " "55"" of type '" "long""'");
  } 
  arg55 = static_cast< long >(val55);
  ecode56 = SWIG_AsVal_long(args[55], &val56);
  if (!SWIG_IsOK(ecode56)) {
    SWIG_exception_fail(SWIG_ArgError(ecode56), "in method '" "FrontierCVPAextcostsl" "', argument " "56"" of type '" "long""'");
  } 
  arg56 = static_cast< long >(val56);
  ecode57 = SWIG_AsVal_long(args[56], &val57);
  if (!SWIG_IsOK(ecode57)) {
    SWIG_exception_fail(SWIG_ArgError(ecode57), "in method '" "FrontierCVPAextcostsl" "', argument " "57"" of type '" "long""'");
  } 
  arg57 = static_cast< long >(val57);
  ecode58 = SWIG_AsVal_double(args[57], &val58);
  if (!SWIG_IsOK(ecode58)) {
    SWIG_exception_fail(SWIG_ArgError(ecode58), "in method '" "FrontierCVPAextcostsl" "', argument " "58"" of type '" "double""'");
  } 
  arg58 = static_cast< double >(val58);
  ecode59 = SWIG_AsVal_double(args[58], &val59);
  if (!SWIG_IsOK(ecode59)) {
    SWIG_exception_fail(SWIG_ArgError(ecode59), "in method '" "FrontierCVPAextcostsl" "', argument " "59"" of type '" "double""'");
  } 
  arg59 = static_cast< double >(val59);
  {
    arg60 = 0;
    if(args[59]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[59]);
      if(arr->Length()) {
        arg60 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg60[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)FrontierCVPAextcostsl(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg2 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg32 && args[31]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg32[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  {
    if(arg39 && args[38]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[38]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_long(arg39[i]));
      }
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[39]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg40[i]));
      }
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[40]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg41[i]));
      }
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[41]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg42[i]));
      }
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[42]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg43[i]));
      }
    }
  }
  {
    if(arg51 && args[50]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[50]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg51[i]));
      }
    }
  }
  {
    if(arg60 && args[59]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[59]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg60[i]));
      }
    }
  }
  
  {
    if(arg2 && args[1]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      delete[] arg9;
    }
  }
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  {
    if(arg32){
      delete[] arg32;arg32=0;
    }
  }
  
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  {
    if(arg39){
      delete[] arg39;arg39=0;
    }
  }
  {
    if(arg40 && args[39]->IsArray()) {
      delete[] arg40;
    }
  }
  {
    if(arg41 && args[40]->IsArray()) {
      delete[] arg41;
    }
  }
  {
    if(arg42 && args[41]->IsArray()) {
      delete[] arg42;
    }
  }
  {
    if(arg43 && args[42]->IsArray()) {
      delete[] arg43;
    }
  }
  
  
  
  
  {
    if(arg51 && args[50]->IsArray()) {
      delete[] arg51;
    }
  }
  
  
  
  
  
  
  
  
  {
    if(arg60 && args[59]->IsArray()) {
      delete[] arg60;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertiesC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  double *arg11 = (double *) 0 ;
  double *arg12 = (double *) 0 ;
  double *arg13 = (double *) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  vector arg16 = (vector) 0 ;
  vector arg17 = (vector) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  dimen arg25 ;
  vector arg26 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val25 ;
  int ecode25 = 0 ;
  
  if(args.Length() != 26) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertiesC.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PropertiesC" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PropertiesC" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode25 = SWIG_AsVal_unsigned_SS_int(args[24], &val25);
  if (!SWIG_IsOK(ecode25)) {
    SWIG_exception_fail(SWIG_ArgError(ecode25), "in method '" "PropertiesC" "', argument " "25"" of type '" "dimen""'");
  } 
  arg25 = static_cast< dimen >(val25);
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  PropertiesC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      delete[] arg16;
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      delete[] arg17;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_PropertiesCA(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  real *arg7 = (real *) 0 ;
  real *arg8 = (real *) 0 ;
  real *arg9 = (real *) 0 ;
  real *arg10 = (real *) 0 ;
  vector arg11 = (vector) 0 ;
  real *arg12 = (real *) 0 ;
  real *arg13 = (real *) 0 ;
  real *arg14 = (real *) 0 ;
  real *arg15 = (real *) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  vector arg21 = (vector) 0 ;
  vector arg22 = (vector) 0 ;
  vector arg23 = (vector) 0 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  vector arg27 = (vector) 0 ;
  vector arg28 = (vector) 0 ;
  vector arg29 = (vector) 0 ;
  vector arg30 = (vector) 0 ;
  vector arg31 = (vector) 0 ;
  vector arg32 = (vector) 0 ;
  vector arg33 = (vector) 0 ;
  vector arg34 = (vector) 0 ;
  vector arg35 = (vector) 0 ;
  dimen arg36 ;
  vector arg37 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val36 ;
  int ecode36 = 0 ;
  
  if(args.Length() != 37) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_PropertiesCA.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PropertiesCA" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PropertiesCA" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg23 = 0;
    if(args[22]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      if(arr->Length()) {
        arg23 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg23[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg27 = 0;
    if(args[26]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      if(arr->Length()) {
        arg27 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg27[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg28 = 0;
    if(args[27]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      if(arr->Length()) {
        arg28 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg28[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg29 = 0;
    if(args[28]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      if(arr->Length()) {
        arg29 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg29[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg30 = 0;
    if(args[29]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      if(arr->Length()) {
        arg30 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg30[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg31 = 0;
    if(args[30]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      if(arr->Length()) {
        arg31 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg31[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg32 = 0;
    if(args[31]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      if(arr->Length()) {
        arg32 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg32[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg33 = 0;
    if(args[32]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      if(arr->Length()) {
        arg33 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg33[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg34 = 0;
    if(args[33]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      if(arr->Length()) {
        arg34 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg34[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg35 = 0;
    if(args[34]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      if(arr->Length()) {
        arg35 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg35[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode36 = SWIG_AsVal_unsigned_SS_int(args[35], &val36);
  if (!SWIG_IsOK(ecode36)) {
    SWIG_exception_fail(SWIG_ArgError(ecode36), "in method '" "PropertiesCA" "', argument " "36"" of type '" "dimen""'");
  } 
  arg36 = static_cast< dimen >(val36);
  {
    arg37 = 0;
    if(args[36]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      if(arr->Length()) {
        arg37 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg37[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  PropertiesCA(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[22]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg23[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[26]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg27[i]));
      }
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[27]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg28[i]));
      }
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[28]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg29[i]));
      }
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[29]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg30[i]));
      }
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[30]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg31[i]));
      }
    }
  }
  {
    if(arg32 && args[31]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[31]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg32[i]));
      }
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[32]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg33[i]));
      }
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[33]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg34[i]));
      }
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[34]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg35[i]));
      }
    }
  }
  {
    if(arg37 && args[36]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[36]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg37[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13){
      delete[] arg13;arg13=0;
    }
  }
  {
    if(arg14){
      delete[] arg14;arg14=0;
    }
  }
  {
    if(arg15){
      delete[] arg15;arg15=0;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  {
    if(arg23 && args[22]->IsArray()) {
      delete[] arg23;
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  {
    if(arg27 && args[26]->IsArray()) {
      delete[] arg27;
    }
  }
  {
    if(arg28 && args[27]->IsArray()) {
      delete[] arg28;
    }
  }
  {
    if(arg29 && args[28]->IsArray()) {
      delete[] arg29;
    }
  }
  {
    if(arg30 && args[29]->IsArray()) {
      delete[] arg30;
    }
  }
  {
    if(arg31 && args[30]->IsArray()) {
      delete[] arg31;
    }
  }
  {
    if(arg32 && args[31]->IsArray()) {
      delete[] arg32;
    }
  }
  {
    if(arg33 && args[32]->IsArray()) {
      delete[] arg33;
    }
  }
  {
    if(arg34 && args[33]->IsArray()) {
      delete[] arg34;
    }
  }
  {
    if(arg35 && args[34]->IsArray()) {
      delete[] arg35;
    }
  }
  
  {
    if(arg37 && args[36]->IsArray()) {
      delete[] arg37;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_GetBeta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  dimen arg6 ;
  vector arg7 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_GetBeta.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "GetBeta" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GetBeta" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_int(args[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "GetBeta" "', argument " "6"" of type '" "dimen""'");
  } 
  arg6 = static_cast< dimen >(val6);
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  GetBeta(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Get_RisksC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  double *arg6 = (double *) 0 ;
  double *arg7 = (double *) 0 ;
  double *arg8 = (double *) 0 ;
  double *arg9 = (double *) 0 ;
  double *arg10 = (double *) 0 ;
  dimen arg11 ;
  vector arg12 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  unsigned int val11 ;
  int ecode11 = 0 ;
  
  if(args.Length() != 12) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Get_RisksC.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Get_RisksC" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Get_RisksC" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[8]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode11 = SWIG_AsVal_unsigned_SS_int(args[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "Get_RisksC" "', argument " "11"" of type '" "dimen""'");
  } 
  arg11 = static_cast< dimen >(val11);
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  Get_RisksC(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[8]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[8]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[2]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7){
      delete[] arg7;arg7=0;
    }
  }
  {
    if(arg8){
      delete[] arg8;arg8=0;
    }
  }
  {
    if(arg9){
      delete[] arg9;arg9=0;
    }
  }
  {
    if(arg10){
      delete[] arg10;arg10=0;
    }
  }
  
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MarginalUtility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  unsigned int val21 ;
  int ecode21 = 0 ;
  
  if(args.Length() != 22) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MarginalUtility.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MarginalUtility" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarginalUtility" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MarginalUtility" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "MarginalUtility" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MarginalUtility" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_unsigned_SS_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MarginalUtility" "', argument " "21"" of type '" "dimen""'");
  } 
  arg21 = static_cast< dimen >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MarginalUtility(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MarginalUtilityb(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  unsigned int val21 ;
  int ecode21 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  
  if(args.Length() != 23) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MarginalUtilityb.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MarginalUtilityb" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarginalUtilityb" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MarginalUtilityb" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "MarginalUtilityb" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MarginalUtilityb" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_unsigned_SS_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MarginalUtilityb" "', argument " "21"" of type '" "dimen""'");
  } 
  arg21 = static_cast< dimen >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MarginalUtilityb" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  MarginalUtilityb(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MarginalUtilitybSa(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  vector arg24 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  unsigned int val21 ;
  int ecode21 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  
  if(args.Length() != 24) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MarginalUtilitybSa.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MarginalUtilitybSa" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarginalUtilitybSa" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MarginalUtilitybSa" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "MarginalUtilitybSa" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MarginalUtilitybSa" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_unsigned_SS_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MarginalUtilitybSa" "', argument " "21"" of type '" "dimen""'");
  } 
  arg21 = static_cast< dimen >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MarginalUtilitybSa" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MarginalUtilitybSa(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MarginalUtilitybSaQ(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  dimen arg10 ;
  vector arg11 = (vector) 0 ;
  vector arg12 = (vector) 0 ;
  vector arg13 = (vector) 0 ;
  vector arg14 = (vector) 0 ;
  vector arg15 = (vector) 0 ;
  real *arg16 = (real *) 0 ;
  real *arg17 = (real *) 0 ;
  vector arg18 = (vector) 0 ;
  vector arg19 = (vector) 0 ;
  vector arg20 = (vector) 0 ;
  dimen arg21 ;
  vector arg22 = (vector) 0 ;
  double arg23 = (double) 1 ;
  vector arg24 = (vector) 0 ;
  vector arg25 = (vector) 0 ;
  vector arg26 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val10 ;
  int ecode10 = 0 ;
  unsigned int val21 ;
  int ecode21 = 0 ;
  double val23 ;
  int ecode23 = 0 ;
  
  if(args.Length() != 26) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MarginalUtilitybSaQ.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MarginalUtilitybSaQ" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarginalUtilitybSaQ" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MarginalUtilitybSaQ" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "MarginalUtilitybSaQ" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  ecode10 = SWIG_AsVal_unsigned_SS_int(args[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "MarginalUtilitybSaQ" "', argument " "10"" of type '" "dimen""'");
  } 
  arg10 = static_cast< dimen >(val10);
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg14 = 0;
    if(args[13]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      if(arr->Length()) {
        arg14 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg14[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg16 = 0;
    if(args[15]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      if(arr->Length()) {
        arg16 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg16[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg17 = 0;
    if(args[16]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      if(arr->Length()) {
        arg17 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg17[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg18 = 0;
    if(args[17]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      if(arr->Length()) {
        arg18 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg18[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg19 = 0;
    if(args[18]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      if(arr->Length()) {
        arg19 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg19[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg20 = 0;
    if(args[19]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      if(arr->Length()) {
        arg20 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg20[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode21 = SWIG_AsVal_unsigned_SS_int(args[20], &val21);
  if (!SWIG_IsOK(ecode21)) {
    SWIG_exception_fail(SWIG_ArgError(ecode21), "in method '" "MarginalUtilitybSaQ" "', argument " "21"" of type '" "dimen""'");
  } 
  arg21 = static_cast< dimen >(val21);
  {
    arg22 = 0;
    if(args[21]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      if(arr->Length()) {
        arg22 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg22[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode23 = SWIG_AsVal_double(args[22], &val23);
  if (!SWIG_IsOK(ecode23)) {
    SWIG_exception_fail(SWIG_ArgError(ecode23), "in method '" "MarginalUtilitybSaQ" "', argument " "23"" of type '" "double""'");
  } 
  arg23 = static_cast< double >(val23);
  {
    arg24 = 0;
    if(args[23]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      if(arr->Length()) {
        arg24 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg24[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg25 = 0;
    if(args[24]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      if(arr->Length()) {
        arg25 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg25[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg26 = 0;
    if(args[25]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      if(arr->Length()) {
        arg26 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg26[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MarginalUtilitybSaQ(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[13]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg14[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg16 && args[15]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[15]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg16[i]));
      }
    }
  }
  {
    if(arg17 && args[16]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[16]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg17[i]));
      }
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[17]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg18[i]));
      }
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[18]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg19[i]));
      }
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[19]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg20[i]));
      }
    }
  }
  {
    if(arg22 && args[21]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[21]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg22[i]));
      }
    }
  }
  {
    if(arg24 && args[23]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[23]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg24[i]));
      }
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[24]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg25[i]));
      }
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[25]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg26[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  
  {
    if(arg11 && args[10]->IsArray()) {
      delete[] arg11;
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      delete[] arg12;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  {
    if(arg14 && args[13]->IsArray()) {
      delete[] arg14;
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  {
    if(arg16){
      delete[] arg16;arg16=0;
    }
  }
  {
    if(arg17){
      delete[] arg17;arg17=0;
    }
  }
  {
    if(arg18 && args[17]->IsArray()) {
      delete[] arg18;
    }
  }
  {
    if(arg19 && args[18]->IsArray()) {
      delete[] arg19;
    }
  }
  {
    if(arg20 && args[19]->IsArray()) {
      delete[] arg20;
    }
  }
  
  {
    if(arg22 && args[21]->IsArray()) {
      delete[] arg22;
    }
  }
  
  {
    if(arg24 && args[23]->IsArray()) {
      delete[] arg24;
    }
  }
  {
    if(arg25 && args[24]->IsArray()) {
      delete[] arg25;
    }
  }
  {
    if(arg26 && args[25]->IsArray()) {
      delete[] arg26;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MarginalUtility_ext(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  dimen arg1 ;
  long arg2 ;
  char **arg3 = (char **) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  real arg8 ;
  real arg9 ;
  vector arg10 = (vector) 0 ;
  real *arg11 = (real *) 0 ;
  real *arg12 = (real *) 0 ;
  vector arg13 = (vector) 0 ;
  dimen arg14 ;
  vector arg15 = (vector) 0 ;
  double arg16 = (double) 1 ;
  pUtility arg17 = (pUtility) 0 ;
  pModC arg18 = (pModC) 0 ;
  void *arg19 = (void *) 0 ;
  void *arg20 = (void *) 0 ;
  vector arg21 = (vector) 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  unsigned int val14 ;
  int ecode14 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  void *argp17 ;
  int res17 = 0 ;
  void *argp18 ;
  int res18 = 0 ;
  
  if(args.Length() != 19) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_MarginalUtility_ext.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MarginalUtility_ext" "', argument " "1"" of type '" "dimen""'");
  } 
  arg1 = static_cast< dimen >(val1);
  ecode2 = SWIG_AsVal_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MarginalUtility_ext" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    arg3 = 0;
    
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()){
        arg3 = new char *[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          int chars_written, back;
          v8::Handle<v8::String> kkk = v8::Handle<v8::String>::Cast(arr->Get(i)->ToString());
          /*
                          V8EXPORT int WriteUtf8(char* buffer,int length = -1,int* nchars_ref = NULL,int options = NO_OPTIONS) const;
                          */
          char* kkkk = new char[kkk->Utf8Length() * sizeof(*kkk) + 1]; //needed the sizeoff(*kkk) when the strings were long!
          back = kkk->WriteUtf8(kkkk,kkk->Utf8Length(), &chars_written); 
          kkkk[kkk->Utf8Length()] = '\0';
          arg3[i] = kkkk;
          //            printf("%s %d written, back %d **",kkkk,chars_written,back);
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode8 = SWIG_AsVal_double(args[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "MarginalUtility_ext" "', argument " "8"" of type '" "real""'");
  } 
  arg8 = static_cast< real >(val8);
  ecode9 = SWIG_AsVal_double(args[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "MarginalUtility_ext" "', argument " "9"" of type '" "real""'");
  } 
  arg9 = static_cast< real >(val9);
  {
    arg10 = 0;
    if(args[9]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      if(arr->Length()) {
        arg10 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg10[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg11 = 0;
    if(args[10]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      if(arr->Length()) {
        arg11 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg11[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg12 = 0;
    if(args[11]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      if(arr->Length()) {
        arg12 = new real[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg12[i] = (real) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg13 = 0;
    if(args[12]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      if(arr->Length()) {
        arg13 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg13[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode14 = SWIG_AsVal_unsigned_SS_int(args[13], &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "MarginalUtility_ext" "', argument " "14"" of type '" "dimen""'");
  } 
  arg14 = static_cast< dimen >(val14);
  {
    arg15 = 0;
    if(args[14]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      if(arr->Length()) {
        arg15 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg15[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode16 = SWIG_AsVal_double(args[15], &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "MarginalUtility_ext" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    res17 = SWIG_ConvertPtr(args[16], &argp17, SWIGTYPE_p_pUtility,  0 );
    if (!SWIG_IsOK(res17)) {
      SWIG_exception_fail(SWIG_ArgError(res17), "in method '" "MarginalUtility_ext" "', argument " "17"" of type '" "pUtility""'"); 
    }  
    if (!argp17) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MarginalUtility_ext" "', argument " "17"" of type '" "pUtility""'");
    } else {
      arg17 = *(reinterpret_cast< pUtility * >(argp17));
    }
  }
  {
    res18 = SWIG_ConvertPtr(args[17], &argp18, SWIGTYPE_p_pModC,  0 );
    if (!SWIG_IsOK(res18)) {
      SWIG_exception_fail(SWIG_ArgError(res18), "in method '" "MarginalUtility_ext" "', argument " "18"" of type '" "pModC""'"); 
    }  
    if (!argp18) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MarginalUtility_ext" "', argument " "18"" of type '" "pModC""'");
    } else {
      arg18 = *(reinterpret_cast< pModC * >(argp18));
    }
  }
  {
    
  }
  {
    
  }
  {
    arg21 = 0;
    if(args[20]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      if(arr->Length()) {
        arg21 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg21[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  MarginalUtility_ext(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_FromCharPtr(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg10 && args[9]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[9]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg10[i]));
      }
    }
  }
  {
    if(arg11 && args[10]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[10]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg11[i]));
      }
    }
  }
  {
    if(arg12 && args[11]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[11]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg12[i]));
      }
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[12]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg13[i]));
      }
    }
  }
  {
    if(arg15 && args[14]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[14]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg15[i]));
      }
    }
  }
  {
    if(arg21 && args[20]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[20]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg21[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[3]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[4]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[5]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[6]->IsArray()) {
      delete[] arg7;
    }
  }
  
  
  {
    if(arg10 && args[9]->IsArray()) {
      delete[] arg10;
    }
  }
  {
    if(arg11){
      delete[] arg11;arg11=0;
    }
  }
  {
    if(arg12){
      delete[] arg12;arg12=0;
    }
  }
  {
    if(arg13 && args[12]->IsArray()) {
      delete[] arg13;
    }
  }
  
  {
    if(arg15 && args[14]->IsArray()) {
      delete[] arg15;
    }
  }
  
  
  
  {
    if(arg21 && args[20]->IsArray()) {
      delete[] arg21;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_round_weight(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 = (double) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double result;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_round_weight.");
  
  ecode1 = SWIG_AsVal_double(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "round_weight" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "round_weight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "round_weight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(args[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "round_weight" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(args[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "round_weight" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  result = (double)round_weight(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_featol_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_featol_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_featol_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_featol_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->featol = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_featol_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_featol_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_featol_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (real) ((arg1)->featol);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_n_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_n_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    dimen arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_n_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_n_set" "', argument " "2"" of type '" "dimen""'");
    } 
    arg2 = static_cast< dimen >(val2);
    if (arg1) (arg1)->n = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_n_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_n_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    dimen result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_n_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (dimen) ((arg1)->n);
    jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_m_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_m_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    dimen arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned int val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_m_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_m_set" "', argument " "2"" of type '" "dimen""'");
    } 
    arg2 = static_cast< dimen >(val2);
    if (arg1) (arg1)->m = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_m_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_m_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    dimen result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_m_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (dimen) ((arg1)->m);
    jsresult = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_A_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_A_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_A_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->A)delete []arg1->A;//This may not always be the correct thing to do though!
        arg1->A = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_A_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_A_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_A_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->A);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_lower_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_lower_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_lower_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->lower)delete []arg1->lower;//This may not always be the correct thing to do though!
        arg1->lower = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_lower_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_lower_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_lower_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->lower);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_upper_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_upper_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_upper_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->upper)delete []arg1->upper;//This may not always be the correct thing to do though!
        arg1->upper = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_upper_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_upper_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_upper_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->upper);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_lp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_lp_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_lp_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_lp_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->lp = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_lp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_lp_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_lp_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (unsigned char) ((arg1)->lp);
    jsresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_c_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_c_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_c_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->c)delete []arg1->c;//This may not always be the correct thing to do though!
        arg1->c = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_c_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_c_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_c_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->c);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_H_from_higher_terms_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_H_from_higher_terms_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_H_from_higher_terms_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->H_from_higher_terms = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_H_from_higher_terms_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_H_from_higher_terms_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_H_from_higher_terms_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->H_from_higher_terms);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_scale_utility_external_terms_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_scale_utility_external_terms_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_scale_utility_external_terms_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_scale_utility_external_terms_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->scale_utility_external_terms = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_scale_utility_external_terms_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_scale_utility_external_terms_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_scale_utility_external_terms_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (double) ((arg1)->scale_utility_external_terms);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_DoExtraIterations_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_DoExtraIterations_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_DoExtraIterations_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_DoExtraIterations_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->DoExtraIterations = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_DoExtraIterations_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_DoExtraIterations_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_DoExtraIterations_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (unsigned char) ((arg1)->DoExtraIterations);
    jsresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_use_higher_H_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_use_higher_H_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_use_higher_H_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_use_higher_H_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->use_higher_H = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_use_higher_H_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_use_higher_H_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_use_higher_H_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (unsigned char) ((arg1)->use_higher_H);
    jsresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_round_result_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_round_result_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_round_result_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_round_result_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->round_result = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_round_result_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_round_result_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_round_result_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (short) ((arg1)->round_result);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_CONJ_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_CONJ_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_CONJ_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_CONJ_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->CONJ = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_CONJ_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_CONJ_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_CONJ_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (short) ((arg1)->CONJ);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_useInteriorPoint_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_useInteriorPoint_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_useInteriorPoint_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_useInteriorPoint_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->useInteriorPoint = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_useInteriorPoint_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_useInteriorPoint_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_useInteriorPoint_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (short) ((arg1)->useInteriorPoint);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_x_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_x_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_x_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->x)delete []arg1->x;//This may not always be the correct thing to do though!
        arg1->x = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_x_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_x_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_x_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (vector) ((arg1)->x);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_higher_reset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_higher_reset_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_higher_reset_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_higher_reset_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->higher_reset = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_higher_reset_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_higher_reset_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_higher_reset_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (unsigned char) ((arg1)->higher_reset);
    jsresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Base_Optimise(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Base_Optimise(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Base_Optimise(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Base_Optimise(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Base_Optimise(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Base_Optimise * arg1 = (Base_Optimise *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_hmul_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_hmul_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    pHmul arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_hmul_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_pHmul,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_hmul_set" "', argument " "2"" of type '" "pHmul""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Base_Optimise_hmul_set" "', argument " "2"" of type '" "pHmul""'");
      } else {
        arg2 = *(reinterpret_cast< pHmul * >(argp2));
      }
    }
    if (arg1) (arg1)->hmul = arg2;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_hmul_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_hmul_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pHmul result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_hmul_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result =  ((arg1)->hmul);
    jsresult = SWIG_NewPointerObj((new pHmul(static_cast< const pHmul& >(result))), SWIGTYPE_p_pHmul, SWIG_POINTER_OWN |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_Util_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_Util_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    pUtility arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_Util_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_pUtility,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_Util_set" "', argument " "2"" of type '" "pUtility""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Base_Optimise_Util_set" "', argument " "2"" of type '" "pUtility""'");
      } else {
        arg2 = *(reinterpret_cast< pUtility * >(argp2));
      }
    }
    if (arg1) (arg1)->Util = arg2;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_Util_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_Util_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pUtility result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_Util_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result =  ((arg1)->Util);
    jsresult = SWIG_NewPointerObj((new pUtility(static_cast< const pUtility& >(result))), SWIGTYPE_p_pUtility, SWIG_POINTER_OWN |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_ModDeriv_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_ModDeriv_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    pModC arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModDeriv_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_pModC,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_ModDeriv_set" "', argument " "2"" of type '" "pModC""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Base_Optimise_ModDeriv_set" "', argument " "2"" of type '" "pModC""'");
      } else {
        arg2 = *(reinterpret_cast< pModC * >(argp2));
      }
    }
    if (arg1) (arg1)->ModDeriv = arg2;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_ModDeriv_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_ModDeriv_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pModC result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModDeriv_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result =  ((arg1)->ModDeriv);
    jsresult = SWIG_NewPointerObj((new pModC(static_cast< const pModC& >(result))), SWIGTYPE_p_pModC, SWIG_POINTER_OWN |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_ModHessian_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_ModHessian_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    pModQ arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    void *argp2 ;
    int res2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModHessian_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_pModQ,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_ModHessian_set" "', argument " "2"" of type '" "pModQ""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Base_Optimise_ModHessian_set" "', argument " "2"" of type '" "pModQ""'");
      } else {
        arg2 = *(reinterpret_cast< pModQ * >(argp2));
      }
    }
    if (arg1) (arg1)->ModHessian = arg2;
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_ModHessian_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_ModHessian_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    pModQ result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModHessian_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result =  ((arg1)->ModHessian);
    jsresult = SWIG_NewPointerObj((new pModQ(static_cast< const pModQ& >(result))), SWIGTYPE_p_pModQ, SWIG_POINTER_OWN |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Base_Optimise_Version_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Base_Optimise_Version_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    char *arg2 = (char *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    int res2 ;
    char *buf2 = 0 ;
    int alloc2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_Version_set" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_Version_set" "', argument " "2"" of type '" "char *""'");
    }
    arg2 = reinterpret_cast< char * >(buf2);
    if (arg1->Version) delete[] arg1->Version;
    if (arg2) {
      size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
      arg1->Version = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
    } else {
      arg1->Version = 0;
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Base_Optimise_Version_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Base_Optimise_Version_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Base_Optimise *arg1 = (Base_Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    char *result = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_Version_get" "', argument " "1"" of type '" "Base_Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Base_Optimise * >(argp1);
    result = (char *) ((arg1)->Version);
    jsresult = SWIG_FromCharPtr((const char *)result);
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_Base_Optimise_clocker(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  int arg2 = (int) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_clocker.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_clocker" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_clocker" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (double)(arg1)->clocker(arg2);
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_SetLog(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_SetLog.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_SetLog" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  (arg1)->SetLog();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_PrintLog(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_PrintLog.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_PrintLog" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  (arg1)->PrintLog();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_AddLog(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_AddLog.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_AddLog" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(args[0], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Base_Optimise_AddLog" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->AddLog((char const *)arg2);
  jsresult = SWIGV8_UNDEFINED();
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_qphess(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_qphess.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_qphess" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_qphess" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Base_Optimise_qphess" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Base_Optimise_qphess" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Base_Optimise_qphess" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->qphess(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  
  
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_utility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  real result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_utility.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_utility" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_utility" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (real)(arg1)->utility(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_ModifyC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned char arg6 = (unsigned char) 1 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_ModifyC.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModifyC" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_ModifyC" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Base_Optimise_ModifyC" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  (arg1)->ModifyC(arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_qphess_base(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_qphess_base.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_qphess_base" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_qphess_base" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Base_Optimise_qphess_base" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Base_Optimise_qphess_base" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Base_Optimise_qphess_base" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  
  
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_utility_base(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  real result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_utility_base.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_utility_base" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_utility_base" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (real)(arg1)->utility_base(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_Opt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_Opt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_Opt" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_Opt" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Base_Optimise_Opt" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)(arg1)->Opt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_OptInterior(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_OptInterior.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_OptInterior" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_OptInterior" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Base_Optimise_OptInterior" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)(arg1)->OptInterior(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_OptAdvanced(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  vector arg9 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  short result;
  
  if(args.Length() != 8) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_OptAdvanced.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_OptAdvanced" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_OptAdvanced" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Base_Optimise_OptAdvanced" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg9 = 0;
    if(args[7]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      if(arr->Length()) {
        arg9 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg9[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)(arg1)->OptAdvanced(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  {
    if(arg9 && args[7]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[7]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg9[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  {
    if(arg9 && args[7]->IsArray()) {
      delete[] arg9;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_PathMin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  double arg7 = (double) 1.490116119384766e-008 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  real result;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_PathMin.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_PathMin" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_PathMin" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode7 = SWIG_AsVal_double(args[5], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Base_Optimise_PathMin" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  result = (real)(arg1)->PathMin(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Base_Optimise_ModifyC_base(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Base_Optimise *arg1 = (Base_Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Base_Optimise_ModifyC_base.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Base_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Base_Optimise_ModifyC_base" "', argument " "1"" of type '" "Base_Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Base_Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Base_Optimise_ModifyC_base" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->ModifyC_base(arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_veto_Base_Optimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  SWIG_exception(SWIG_ERROR, "Class Base_Optimise can not be instantiated");
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_H_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_H_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_H_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->H)delete []arg1->H;//This may not always be the correct thing to do though!
        arg1->H = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_H_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_H_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_H_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->H);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_Optimise_OptSetup__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_OptSetup" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_OptSetup" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    try
    {
      ////thread	Py_BEGIN_ALLOW_THREADS
      result = (char *)(arg1)->OptSetup(arg2);
      ////thread	Py_END_ALLOW_THREADS
    }
    catch(MemProb mess)
    {
      printf("%s\n",arg1->Version);
      printf("n=%ld. %s, cannot allocate %ld bytes\n",mess.n,mess.mess.c_str(),mess.amount);
      result= (char*)"Not enough memory for optimisation";
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_OptSetup__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_OptSetup" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_OptSetup" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_OptSetup" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    try
    {
      ////thread	Py_BEGIN_ALLOW_THREADS
      result = (char *)(arg1)->OptSetup(arg2,arg3);
      ////thread	Py_END_ALLOW_THREADS
    }
    catch(MemProb mess)
    {
      printf("%s\n",arg1->Version);
      printf("n=%ld. %s, cannot allocate %ld bytes\n",mess.n,mess.mess.c_str(),mess.amount);
      result= (char*)"Not enough memory for optimisation";
    }
  }
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise__wrap_Optimise_OptSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Optimise_OptSetup__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Optimise_OptSetup__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Optimise_OptSetup__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Optimise_OptSetup__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function OptSetup.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_GOpt(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  short result;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_GOpt.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_GOpt" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_GOpt" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_GOpt" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (short)(arg1)->GOpt(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIG_From_short(static_cast< short >(result));
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_Drop(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  short result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_Drop.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Drop" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_Drop" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_Drop" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  result = (short)(arg1)->Drop(arg2,arg3);
  jsresult = SWIG_From_short(static_cast< short >(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_DropCheck(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_DropCheck.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_DropCheck" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  result = (arg1)->DropCheck();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_ThreshCheck__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_ThreshCheck" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_double(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_ThreshCheck" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  result = (arg1)->ThreshCheck(arg2);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_ThreshCheck__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_ThreshCheck" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  {
    arg2 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (arg1)->ThreshCheck(arg2);
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  {
    if(arg2 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  
  {
    if(arg2 && args[0]->IsArray()) {
      delete[] arg2;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise__wrap_Optimise_ThreshCheck(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Optimise_ThreshCheck__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Optimise_ThreshCheck__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Optimise_ThreshCheck__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Optimise_ThreshCheck__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function ThreshCheck.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_threshvector_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_threshvector_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshvector_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->threshvector = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_threshvector_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_threshvector_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshvector_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->threshvector);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_threshscalar_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_threshscalar_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshscalar_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_threshscalar_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->threshscalar = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_threshscalar_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_threshscalar_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshscalar_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (double) ((arg1)->threshscalar);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_longbasket_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_longbasket_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_longbasket_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_longbasket_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->longbasket = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_longbasket_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_longbasket_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_longbasket_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (long) ((arg1)->longbasket);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_shortbasket_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_shortbasket_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_shortbasket_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_shortbasket_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->shortbasket = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_shortbasket_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_shortbasket_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_shortbasket_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (long) ((arg1)->shortbasket);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_tradebuy_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_tradebuy_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_tradebuy_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_tradebuy_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->tradebuy = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_tradebuy_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_tradebuy_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_tradebuy_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (long) ((arg1)->tradebuy);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_tradesell_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_tradesell_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    long arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_tradesell_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_long(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_tradesell_set" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
    if (arg1) (arg1)->tradesell = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_tradesell_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_tradesell_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    long result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_tradesell_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (long) ((arg1)->tradesell);
    jsresult = SWIG_From_long(static_cast< long >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_new_Optimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  Optimise *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Optimise.");
  result = (Optimise *)new Optimise();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_Optimise, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Optimise(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Optimise(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Optimise(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_Optimise(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_Optimise(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            Optimise * arg1 = (Optimise *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_Optimise_beta(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_beta.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_beta" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  {
    arg2 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->beta(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[0]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_risk(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  real result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_risk.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_risk" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  {
    arg2 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (real)(arg1)->risk(arg2,arg3);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg2 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  
  {
    if(arg2 && args[0]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_MC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_MC.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_MC" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  {
    arg2 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->MC(arg2,arg3,arg4);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  
  {
    if(arg2 && args[0]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_qphess_base(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_qphess_base.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_qphess_base" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_qphess_base" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_qphess_base" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Optimise_qphess_base" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_qphess_base" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_qphess(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_qphess.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_qphess" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_qphess" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_qphess" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Optimise_qphess" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Optimise_qphess" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->qphess(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_TransformH(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 = (size_t) 0 ;
  unsigned char arg3 = (unsigned char) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_TransformH.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_TransformH" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_TransformH" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_TransformH" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  (arg1)->TransformH(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_utility(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  real result;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_utility.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_utility" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_utility" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  result = (real)(arg1)->utility(arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_double(static_cast< double >(result));
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_ModifyC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  dimen arg2 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  unsigned char arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned char val6 ;
  int ecode6 = 0 ;
  
  if(args.Length() != 5) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_ModifyC.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_ModifyC" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_ModifyC" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  ecode6 = SWIG_AsVal_unsigned_SS_char(args[4], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Optimise_ModifyC" "', argument " "6"" of type '" "unsigned char""'");
  } 
  arg6 = static_cast< unsigned char >(val6);
  (arg1)->ModifyC(arg2,arg3,arg4,arg5,arg6);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_CompSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_CompSetup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_CompSetup" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  (arg1)->CompSetup();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_H_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_H_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_H_size" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  result = (arg1)->H_size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Optimise_turnover(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_turnover.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_turnover" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  result = (double)(arg1)->turnover();
  jsresult = SWIG_From_double(static_cast< double >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_ncomp_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_ncomp_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_ncomp_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_ncomp_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->ncomp = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_ncomp_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_ncomp_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_ncomp_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result =  ((arg1)->ncomp);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_Composites_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_Composites_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Composites_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->Composites)delete []arg1->Composites;//This may not always be the correct thing to do though!
        arg1->Composites = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_Composites_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_Composites_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Composites_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->Composites);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_initial_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_initial_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_initial_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->initial)delete []arg1->initial;//This may not always be the correct thing to do though!
        arg1->initial = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_initial_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_initial_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_initial_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->initial);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_absoluteA_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_absoluteA_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_absoluteA_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->absoluteA = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_absoluteA_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_absoluteA_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_absoluteA_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->absoluteA);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_lowerA_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_lowerA_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_lowerA_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->lowerA = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_lowerA_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_lowerA_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_lowerA_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->lowerA);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_upperA_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_upperA_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_upperA_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->upperA = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_upperA_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_upperA_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_upperA_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->upperA);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_mask_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_mask_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_mask_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    if (arg1) (arg1)->mask = arg2;
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_mask_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_mask_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_mask_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->mask);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_mabs_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_mabs_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_mabs_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_mabs_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->mabs = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_mabs_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_mabs_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_mabs_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result =  ((arg1)->mabs);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_gross_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_gross_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_gross_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_gross_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->gross = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_gross_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_gross_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_gross_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (short) ((arg1)->gross);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_SLRATmax_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_SLRATmax_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_SLRATmax_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_SLRATmax_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->SLRATmax = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_SLRATmax_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_SLRATmax_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_SLRATmax_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (double) ((arg1)->SLRATmax);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_SLRATmin_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_SLRATmin_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    double arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_SLRATmin_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_SLRATmin_set" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
    if (arg1) (arg1)->SLRATmin = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_SLRATmin_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_SLRATmin_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_SLRATmin_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (double) ((arg1)->SLRATmin);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_delta_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_delta_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_delta_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_delta_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->delta = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_delta_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_delta_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_delta_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->delta);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_drop_to_this_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_drop_to_this_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_drop_to_this_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->drop_to_this)delete []arg1->drop_to_this;//This may not always be the correct thing to do though!
        arg1->drop_to_this = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_drop_to_this_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_drop_to_this_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_drop_to_this_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (vector) ((arg1)->drop_to_this);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_hess_choice_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_hess_choice_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_hess_choice_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_hess_choice_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->hess_choice = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_hess_choice_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_hess_choice_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_hess_choice_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (short) ((arg1)->hess_choice);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_Full_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_Full_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Full_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_Full_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->Full = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_Full_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_Full_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Full_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (short) ((arg1)->Full);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_LSValue_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_LSValue_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_LSValue_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_LSValue_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->LSValue = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_LSValue_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_LSValue_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_LSValue_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->LSValue);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_LSValue_Low_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_LSValue_Low_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_LSValue_Low_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_LSValue_Low_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->LSValue_Low = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_LSValue_Low_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_LSValue_Low_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_LSValue_Low_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->LSValue_Low);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_dropfac_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_dropfac_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_dropfac_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_dropfac_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->dropfac = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_dropfac_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_dropfac_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_dropfac_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->dropfac);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_threshfac_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_threshfac_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshfac_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_threshfac_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->threshfac = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_threshfac_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_threshfac_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_threshfac_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->threshfac);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_equalbounds_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_equalbounds_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_equalbounds_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_equalbounds_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->equalbounds = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_equalbounds_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_equalbounds_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_equalbounds_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->equalbounds);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_nowTime_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_nowTime_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    real arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    double val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_nowTime_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_double(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_nowTime_set" "', argument " "2"" of type '" "real""'");
    } 
    arg2 = static_cast< real >(val2);
    if (arg1) (arg1)->nowTime = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_nowTime_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_nowTime_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    real result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_nowTime_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (real) ((arg1)->nowTime);
    jsresult = SWIG_From_double(static_cast< double >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_badcountlimit_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_badcountlimit_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_badcountlimit_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_badcountlimit_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->badcountlimit = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_badcountlimit_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_badcountlimit_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_badcountlimit_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result =  ((arg1)->badcountlimit);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_UseDiagPenalty_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_UseDiagPenalty_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    unsigned char arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_UseDiagPenalty_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_UseDiagPenalty_set" "', argument " "2"" of type '" "unsigned char""'");
    } 
    arg2 = static_cast< unsigned char >(val2);
    if (arg1) (arg1)->UseDiagPenalty = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_UseDiagPenalty_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_UseDiagPenalty_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    unsigned char result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_UseDiagPenalty_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (unsigned char) ((arg1)->UseDiagPenalty);
    jsresult = SWIG_From_unsigned_SS_char(static_cast< unsigned char >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_Optimise_back_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_Optimise_back_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    Optimise *arg1 = (Optimise *) 0 ;
    short arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_back_set" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    ecode2 = SWIG_AsVal_short(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_back_set" "', argument " "2"" of type '" "short""'");
    } 
    arg2 = static_cast< short >(val2);
    if (arg1) (arg1)->back = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_Optimise_back_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_Optimise_back_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    Optimise *arg1 = (Optimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    short result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_back_get" "', argument " "1"" of type '" "Optimise *""'"); 
    }
    arg1 = reinterpret_cast< Optimise * >(argp1);
    result = (short) ((arg1)->back);
    jsresult = SWIG_From_short(static_cast< short >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_Optimise_Rounding(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  Optimise *arg1 = (Optimise *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  vector arg6 = (vector) 0 ;
  vector arg7 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 6) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Optimise_Rounding.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_Optimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Optimise_Rounding" "', argument " "1"" of type '" "Optimise *""'"); 
  }
  arg1 = reinterpret_cast< Optimise * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Optimise_Rounding" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Optimise_Rounding" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->Rounding(arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  
  
  
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  {
    if(arg6 && args[4]->IsArray()) {
      delete[] arg6;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_FOptimise_nfac_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_FOptimise_nfac_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    FOptimise *arg1 = (FOptimise *) 0 ;
    size_t arg2 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t val2 ;
    int ecode2 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_nfac_set" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    ecode2 = SWIG_AsVal_size_t(value, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FOptimise_nfac_set" "', argument " "2"" of type '" "size_t""'");
    } 
    arg2 = static_cast< size_t >(val2);
    if (arg1) (arg1)->nfac = arg2;
    
    
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_FOptimise_nfac_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_FOptimise_nfac_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    FOptimise *arg1 = (FOptimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    size_t result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_nfac_get" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    result =  ((arg1)->nfac);
    jsresult = SWIG_From_size_t(static_cast< size_t >(result));
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_FOptimise_FL_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_FOptimise_FL_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    FOptimise *arg1 = (FOptimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_FL_set" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->FL)delete []arg1->FL;//This may not always be the correct thing to do though!
        arg1->FL = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_FOptimise_FL_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_FOptimise_FL_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    FOptimise *arg1 = (FOptimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_FL_get" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    result = (vector) ((arg1)->FL);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_FOptimise_SV_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_FOptimise_SV_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    FOptimise *arg1 = (FOptimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_SV_set" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->SV)delete []arg1->SV;//This may not always be the correct thing to do though!
        arg1->SV = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_FOptimise_SV_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_FOptimise_SV_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    FOptimise *arg1 = (FOptimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_SV_get" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    result = (vector) ((arg1)->SV);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


#if (V8_MAJOR_VERSION-0) < 5
static void _wrap_FOptimise_FC_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#else
  static void _wrap_FOptimise_FC_set(v8::Local<v8::Name> property, v8::Local<v8::Value> value, const SwigV8PropertyCallbackInfoVoid &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    FOptimise *arg1 = (FOptimise *) 0 ;
    vector arg2 = (vector) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_FC_set" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    {
      arg2 = 0;
      if(value->IsArray())
      {
        v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(value);
        if(arr->Length()) {
          arg2 = new double[arr->Length()];
          for(size_t i = 0;i < arr->Length();++i) {
            arg2[i] = (double) arr->Get(i)->NumberValue();
          }
        }
      }
    }
    {
      if(arg1)
      {
        if(arg1->FC)delete []arg1->FC;//This may not always be the correct thing to do though!
        arg1->FC = arg2;
      }
    }
    
    {
      if(arg2 && value->IsArray()) {
        delete[] arg2;
      }
    }
    
    goto fail;
  fail:
    return;
  }


#if (V8_MAJOR_VERSION-0) < 5
static SwigV8ReturnValue _wrap_FOptimise_FC_get(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
#else
  static SwigV8ReturnValue _wrap_FOptimise_FC_get(v8::Local<v8::Name> property, const SwigV8PropertyCallbackInfo &info) {
#endif
    SWIGV8_HANDLESCOPE();
    
    v8::Handle<v8::Value> jsresult;
    FOptimise *arg1 = (FOptimise *) 0 ;
    void *argp1 = 0 ;
    int res1 = 0 ;
    vector result;
    
    res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_FC_get" "', argument " "1"" of type '" "FOptimise *""'"); 
    }
    arg1 = reinterpret_cast< FOptimise * >(argp1);
    result = (vector) ((arg1)->FC);
    jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
    
    
    SWIGV8_RETURN_INFO(jsresult, info);
    
    goto fail;
  fail:
    SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
  }


static SwigV8ReturnValue _wrap_FOptimise_facmul(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  dimen arg2 ;
  double *arg3 = (double *) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_facmul.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_facmul" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FOptimise_facmul" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->facmul(arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  
  {
    if(arg3){
      delete[] arg3;arg3=0;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FOptimise_factor_model_process(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_factor_model_process.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_factor_model_process" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  (arg1)->factor_model_process();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FOptimise_FMC(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  vector arg2 = (vector) 0 ;
  vector arg3 = (vector) 0 ;
  vector arg4 = (vector) 0 ;
  vector arg5 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 4) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_FMC.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_FMC" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  {
    arg2 = 0;
    if(args[0]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      if(arr->Length()) {
        arg2 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg2[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg3 = 0;
    if(args[1]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      if(arr->Length()) {
        arg3 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg3[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg4 = 0;
    if(args[2]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      if(arr->Length()) {
        arg4 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg4[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg5 = 0;
    if(args[3]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      if(arr->Length()) {
        arg5 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg5[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->FMC(arg2,arg3,arg4,arg5);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg2 && args[0]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[0]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg2[i]));
      }
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[1]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg3[i]));
      }
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[2]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg4[i]));
      }
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[3]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg5[i]));
      }
    }
  }
  
  {
    if(arg2 && args[0]->IsArray()) {
      delete[] arg2;
    }
  }
  {
    if(arg3 && args[1]->IsArray()) {
      delete[] arg3;
    }
  }
  {
    if(arg4 && args[2]->IsArray()) {
      delete[] arg4;
    }
  }
  {
    if(arg5 && args[3]->IsArray()) {
      delete[] arg5;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FOptimise_H_size(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_H_size.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_H_size" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  result = (arg1)->H_size();
  jsresult = SWIG_From_size_t(static_cast< size_t >(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FOptimise_CompSetup(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_CompSetup.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_CompSetup" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  (arg1)->CompSetup();
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_FOptimise(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  FOptimise *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_FOptimise.");
  result = (FOptimise *)new FOptimise();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_FOptimise, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_FOptimise(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_FOptimise(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_FOptimise(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#elif (V8_MAJOR_VERSION-0) < 5
      static void _wrap_delete_FOptimise(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#else
        static void _wrap_delete_FOptimise(const v8::WeakCallbackInfo<SWIGV8_Proxy> &data) {
          SWIGV8_Proxy *proxy = data.GetParameter();
#endif
          
          if(proxy->swigCMemOwn && proxy->swigCObject) {
            FOptimise * arg1 = (FOptimise *)proxy->swigCObject;
            delete arg1;
          }
          delete proxy;
          
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031710)
          object.Dispose();
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031900)
          object.Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x032100)
          object->Dispose(isolate);
#elif (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
          object->Dispose();
#elif (V8_MAJOR_VERSION-0) < 5
          object.Clear();
#endif
        }


static SwigV8ReturnValue _wrap_FOptimise_qphess_base(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  dimen arg2 ;
  dimen arg3 ;
  dimen arg4 ;
  dimen arg5 ;
  double *arg6 = (double *) 0 ;
  vector arg7 = (vector) 0 ;
  vector arg8 = (vector) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  
  if(args.Length() != 7) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_qphess_base.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_qphess_base" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FOptimise_qphess_base" "', argument " "2"" of type '" "dimen""'");
  } 
  arg2 = static_cast< dimen >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FOptimise_qphess_base" "', argument " "3"" of type '" "dimen""'");
  } 
  arg3 = static_cast< dimen >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FOptimise_qphess_base" "', argument " "4"" of type '" "dimen""'");
  } 
  arg4 = static_cast< dimen >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(args[3], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "FOptimise_qphess_base" "', argument " "5"" of type '" "dimen""'");
  } 
  arg5 = static_cast< dimen >(val5);
  {
    arg6 = 0;
    if(args[4]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      if(arr->Length()) {
        arg6 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg6[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg7 = 0;
    if(args[5]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      if(arr->Length()) {
        arg7 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg7[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  {
    arg8 = 0;
    if(args[6]->IsArray())
    {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      if(arr->Length()) {
        arg8 = new double[arr->Length()];
        for(size_t i = 0;i < arr->Length();++i) {
          arg8[i] = (double) arr->Get(i)->NumberValue();
        }
      }
    }
  }
  (arg1)->qphess_base(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jsresult = SWIGV8_UNDEFINED();
  {
    if(arg6 && args[4]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[4]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg6[i]));
      }
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[5]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg7[i]));
      }
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      v8::Handle<v8::Array> arr= v8::Handle<v8::Array>::Cast(args[6]);
      for(size_t i = 0;i < arr->Length();++i) {
        arr->Set(i,SWIG_From_double(arg8[i]));
      }
    }
  }
  
  
  
  
  
  {
    if(arg6){
      delete[] arg6;arg6=0;
    }
  }
  {
    if(arg7 && args[5]->IsArray()) {
      delete[] arg7;
    }
  }
  {
    if(arg8 && args[6]->IsArray()) {
      delete[] arg8;
    }
  }
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_FOptimise_TransformH(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  FOptimise *arg1 = (FOptimise *) 0 ;
  size_t arg2 = (size_t) 0 ;
  unsigned char arg3 = (unsigned char) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_FOptimise_TransformH.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_FOptimise, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FOptimise_TransformH" "', argument " "1"" of type '" "FOptimise *""'"); 
  }
  arg1 = reinterpret_cast< FOptimise * >(argp1);
  ecode2 = SWIG_AsVal_size_t(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FOptimise_TransformH" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FOptimise_TransformH" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  (arg1)->TransformH(arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_FOptimiseTo_p_Optimise(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Optimise *)  ((FOptimise *) x));
}
static void *_p_OptimiseTo_p_Base_Optimise(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Base_Optimise *)  ((Optimise *) x));
}
static void *_p_FOptimiseTo_p_Base_Optimise(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Base_Optimise *) (Optimise *) ((FOptimise *) x));
}
static swig_type_info _swigt__p_Base_Optimise = {"_p_Base_Optimise", "Base_Optimise *|p_Base_Optimise", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FOptimise = {"_p_FOptimise", "FOptimise *|p_FOptimise", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Optimise = {"_p_Optimise", "Optimise *|p_Optimise", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "real *|vector|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|Integer *|short_scl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p1DFunc = {"_p_p1DFunc", "p1DFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pConstraintFunc = {"_p_pConstraintFunc", "pConstraintFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pHmul = {"_p_pHmul", "pHmul *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pModC = {"_p_pModC", "pModC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pModQ = {"_p_pModQ", "pModQ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pUtility = {"_p_pUtility", "pUtility *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "dimen *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Base_Optimise,
  &_swigt__p_FOptimise,
  &_swigt__p_Optimise,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p1DFunc,
  &_swigt__p_pConstraintFunc,
  &_swigt__p_pHmul,
  &_swigt__p_pModC,
  &_swigt__p_pModQ,
  &_swigt__p_pUtility,
  &_swigt__p_p_char,
  &_swigt__p_size_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_Base_Optimise[] = {  {&_swigt__p_Base_Optimise, 0, 0, 0},  {&_swigt__p_Optimise, _p_OptimiseTo_p_Base_Optimise, 0, 0},  {&_swigt__p_FOptimise, _p_FOptimiseTo_p_Base_Optimise, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FOptimise[] = {  {&_swigt__p_FOptimise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Optimise[] = {  {&_swigt__p_Optimise, 0, 0, 0},  {&_swigt__p_FOptimise, _p_FOptimiseTo_p_Optimise, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p1DFunc[] = {  {&_swigt__p_p1DFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pConstraintFunc[] = {  {&_swigt__p_pConstraintFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pHmul[] = {  {&_swigt__p_pHmul, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pModC[] = {  {&_swigt__p_pModC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pModQ[] = {  {&_swigt__p_pModQ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pUtility[] = {  {&_swigt__p_pUtility, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Base_Optimise,
  _swigc__p_FOptimise,
  _swigc__p_Optimise,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p1DFunc,
  _swigc__p_pConstraintFunc,
  _swigc__p_pHmul,
  _swigc__p_pModC,
  _swigc__p_pModQ,
  _swigc__p_pUtility,
  _swigc__p_p_char,
  _swigc__p_size_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
#if (V8_MAJOR_VERSION-0) < 5
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  global_obj->SetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey, mod);
#endif
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
#if (V8_MAJOR_VERSION-0) < 5
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));
#else
  v8::Local<v8::Private> privateKey = v8::Private::ForApi(v8::Isolate::GetCurrent(), SWIGV8_STRING_NEW("swig_module_info_data"));
  v8::Local<v8::Value> moduleinfo;
  if (!global_obj->GetPrivate(SWIGV8_CURRENT_CONTEXT(), privateKey).ToLocal(&moduleinfo))
    return 0;
#endif

  if (moduleinfo.IsEmpty() || moduleinfo->IsNull() || moduleinfo->IsUndefined())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty() || moduleinfo_extern->IsNull() || moduleinfo_extern->IsUndefined())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_Base_Optimise, Type: p_Base_Optimise, Dtor: _wrap_delete_Base_Optimise */
v8::Handle<v8::FunctionTemplate> _exports_Base_Optimise_class = SWIGV8_CreateClassTemplate("_exports_Base_Optimise");
SWIGV8_SET_CLASS_TEMPL(_exports_Base_Optimise_clientData.class_templ, _exports_Base_Optimise_class);
_exports_Base_Optimise_clientData.dtor = _wrap_delete_Base_Optimise;
if (SWIGTYPE_p_Base_Optimise->clientdata == 0) {
  SWIGTYPE_p_Base_Optimise->clientdata = &_exports_Base_Optimise_clientData;
}
/* Name: _exports_Optimise, Type: p_Optimise, Dtor: _wrap_delete_Optimise */
v8::Handle<v8::FunctionTemplate> _exports_Optimise_class = SWIGV8_CreateClassTemplate("_exports_Optimise");
SWIGV8_SET_CLASS_TEMPL(_exports_Optimise_clientData.class_templ, _exports_Optimise_class);
_exports_Optimise_clientData.dtor = _wrap_delete_Optimise;
if (SWIGTYPE_p_Optimise->clientdata == 0) {
  SWIGTYPE_p_Optimise->clientdata = &_exports_Optimise_clientData;
}
/* Name: _exports_FOptimise, Type: p_FOptimise, Dtor: _wrap_delete_FOptimise */
v8::Handle<v8::FunctionTemplate> _exports_FOptimise_class = SWIGV8_CreateClassTemplate("_exports_FOptimise");
SWIGV8_SET_CLASS_TEMPL(_exports_FOptimise_clientData.class_templ, _exports_FOptimise_class);
_exports_FOptimise_clientData.dtor = _wrap_delete_FOptimise;
if (SWIGTYPE_p_FOptimise->clientdata == 0) {
  SWIGTYPE_p_FOptimise->clientdata = &_exports_FOptimise_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "featol", _wrap_Base_Optimise_featol_get, _wrap_Base_Optimise_featol_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "n", _wrap_Base_Optimise_n_get, _wrap_Base_Optimise_n_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "m", _wrap_Base_Optimise_m_get, _wrap_Base_Optimise_m_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "A", _wrap_Base_Optimise_A_get, _wrap_Base_Optimise_A_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "lower", _wrap_Base_Optimise_lower_get, _wrap_Base_Optimise_lower_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "upper", _wrap_Base_Optimise_upper_get, _wrap_Base_Optimise_upper_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "lp", _wrap_Base_Optimise_lp_get, _wrap_Base_Optimise_lp_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "c", _wrap_Base_Optimise_c_get, _wrap_Base_Optimise_c_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "H_from_higher_terms", _wrap_Base_Optimise_H_from_higher_terms_get, _wrap_Base_Optimise_H_from_higher_terms_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "scale_utility_external_terms", _wrap_Base_Optimise_scale_utility_external_terms_get, _wrap_Base_Optimise_scale_utility_external_terms_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "DoExtraIterations", _wrap_Base_Optimise_DoExtraIterations_get, _wrap_Base_Optimise_DoExtraIterations_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "use_higher_H", _wrap_Base_Optimise_use_higher_H_get, _wrap_Base_Optimise_use_higher_H_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "round_result", _wrap_Base_Optimise_round_result_get, _wrap_Base_Optimise_round_result_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "CONJ", _wrap_Base_Optimise_CONJ_get, _wrap_Base_Optimise_CONJ_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "useInteriorPoint", _wrap_Base_Optimise_useInteriorPoint_get, _wrap_Base_Optimise_useInteriorPoint_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "x", _wrap_Base_Optimise_x_get, _wrap_Base_Optimise_x_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "higher_reset", _wrap_Base_Optimise_higher_reset_get, _wrap_Base_Optimise_higher_reset_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "hmul", _wrap_Base_Optimise_hmul_get, _wrap_Base_Optimise_hmul_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "Util", _wrap_Base_Optimise_Util_get, _wrap_Base_Optimise_Util_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "ModDeriv", _wrap_Base_Optimise_ModDeriv_get, _wrap_Base_Optimise_ModDeriv_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "ModHessian", _wrap_Base_Optimise_ModHessian_get, _wrap_Base_Optimise_ModHessian_set);
SWIGV8_AddMemberVariable(_exports_Base_Optimise_class, "Version", _wrap_Base_Optimise_Version_get, _wrap_Base_Optimise_Version_set);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "clocker", _wrap_Base_Optimise_clocker);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "SetLog", _wrap_Base_Optimise_SetLog);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "PrintLog", _wrap_Base_Optimise_PrintLog);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "AddLog", _wrap_Base_Optimise_AddLog);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "qphess", _wrap_Base_Optimise_qphess);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "utility", _wrap_Base_Optimise_utility);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "ModifyC", _wrap_Base_Optimise_ModifyC);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "qphess_base", _wrap_Base_Optimise_qphess_base);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "utility_base", _wrap_Base_Optimise_utility_base);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "Opt", _wrap_Base_Optimise_Opt);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "OptInterior", _wrap_Base_Optimise_OptInterior);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "OptAdvanced", _wrap_Base_Optimise_OptAdvanced);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "PathMin", _wrap_Base_Optimise_PathMin);
SWIGV8_AddMemberFunction(_exports_Base_Optimise_class, "ModifyC_base", _wrap_Base_Optimise_ModifyC_base);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "H", _wrap_Optimise_H_get, _wrap_Optimise_H_set);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "OptSetup", _wrap_Optimise__wrap_Optimise_OptSetup);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "GOpt", _wrap_Optimise_GOpt);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "Drop", _wrap_Optimise_Drop);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "DropCheck", _wrap_Optimise_DropCheck);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "ThreshCheck", _wrap_Optimise__wrap_Optimise_ThreshCheck);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "threshvector", _wrap_Optimise_threshvector_get, _wrap_Optimise_threshvector_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "threshscalar", _wrap_Optimise_threshscalar_get, _wrap_Optimise_threshscalar_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "longbasket", _wrap_Optimise_longbasket_get, _wrap_Optimise_longbasket_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "shortbasket", _wrap_Optimise_shortbasket_get, _wrap_Optimise_shortbasket_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "tradebuy", _wrap_Optimise_tradebuy_get, _wrap_Optimise_tradebuy_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "tradesell", _wrap_Optimise_tradesell_get, _wrap_Optimise_tradesell_set);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "beta", _wrap_Optimise_beta);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "risk", _wrap_Optimise_risk);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "MC", _wrap_Optimise_MC);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "qphess_base", _wrap_Optimise_qphess_base);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "qphess", _wrap_Optimise_qphess);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "TransformH", _wrap_Optimise_TransformH);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "utility", _wrap_Optimise_utility);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "ModifyC", _wrap_Optimise_ModifyC);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "CompSetup", _wrap_Optimise_CompSetup);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "H_size", _wrap_Optimise_H_size);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "turnover", _wrap_Optimise_turnover);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "ncomp", _wrap_Optimise_ncomp_get, _wrap_Optimise_ncomp_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "Composites", _wrap_Optimise_Composites_get, _wrap_Optimise_Composites_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "initial", _wrap_Optimise_initial_get, _wrap_Optimise_initial_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "absoluteA", _wrap_Optimise_absoluteA_get, _wrap_Optimise_absoluteA_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "lowerA", _wrap_Optimise_lowerA_get, _wrap_Optimise_lowerA_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "upperA", _wrap_Optimise_upperA_get, _wrap_Optimise_upperA_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "mask", _wrap_Optimise_mask_get, _wrap_Optimise_mask_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "mabs", _wrap_Optimise_mabs_get, _wrap_Optimise_mabs_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "gross", _wrap_Optimise_gross_get, _wrap_Optimise_gross_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "SLRATmax", _wrap_Optimise_SLRATmax_get, _wrap_Optimise_SLRATmax_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "SLRATmin", _wrap_Optimise_SLRATmin_get, _wrap_Optimise_SLRATmin_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "delta", _wrap_Optimise_delta_get, _wrap_Optimise_delta_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "drop_to_this", _wrap_Optimise_drop_to_this_get, _wrap_Optimise_drop_to_this_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "hess_choice", _wrap_Optimise_hess_choice_get, _wrap_Optimise_hess_choice_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "Full", _wrap_Optimise_Full_get, _wrap_Optimise_Full_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "LSValue", _wrap_Optimise_LSValue_get, _wrap_Optimise_LSValue_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "LSValue_Low", _wrap_Optimise_LSValue_Low_get, _wrap_Optimise_LSValue_Low_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "dropfac", _wrap_Optimise_dropfac_get, _wrap_Optimise_dropfac_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "threshfac", _wrap_Optimise_threshfac_get, _wrap_Optimise_threshfac_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "equalbounds", _wrap_Optimise_equalbounds_get, _wrap_Optimise_equalbounds_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "nowTime", _wrap_Optimise_nowTime_get, _wrap_Optimise_nowTime_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "badcountlimit", _wrap_Optimise_badcountlimit_get, _wrap_Optimise_badcountlimit_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "UseDiagPenalty", _wrap_Optimise_UseDiagPenalty_get, _wrap_Optimise_UseDiagPenalty_set);
SWIGV8_AddMemberVariable(_exports_Optimise_class, "back", _wrap_Optimise_back_get, _wrap_Optimise_back_set);
SWIGV8_AddMemberFunction(_exports_Optimise_class, "Rounding", _wrap_Optimise_Rounding);
SWIGV8_AddMemberVariable(_exports_FOptimise_class, "nfac", _wrap_FOptimise_nfac_get, _wrap_FOptimise_nfac_set);
SWIGV8_AddMemberVariable(_exports_FOptimise_class, "FL", _wrap_FOptimise_FL_get, _wrap_FOptimise_FL_set);
SWIGV8_AddMemberVariable(_exports_FOptimise_class, "SV", _wrap_FOptimise_SV_get, _wrap_FOptimise_SV_set);
SWIGV8_AddMemberVariable(_exports_FOptimise_class, "FC", _wrap_FOptimise_FC_get, _wrap_FOptimise_FC_set);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "facmul", _wrap_FOptimise_facmul);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "factor_model_process", _wrap_FOptimise_factor_model_process);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "FMC", _wrap_FOptimise_FMC);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "H_size", _wrap_FOptimise_H_size);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "CompSetup", _wrap_FOptimise_CompSetup);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "qphess_base", _wrap_FOptimise_qphess_base);
SWIGV8_AddMemberFunction(_exports_FOptimise_class, "TransformH", _wrap_FOptimise_TransformH);


  /* setup inheritances */
  if (SWIGTYPE_p_Base_Optimise->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Base_Optimise->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_Optimise_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Base_Optimise->clientdata)->class_templ);
#else
  _exports_Optimise_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Base_Optimise->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_Optimise _Base_Optimise\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_Optimise _Base_Optimise\n");
#endif
}
if (SWIGTYPE_p_Optimise->clientdata && !(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Optimise->clientdata)->class_templ.IsEmpty()))
{
#if (V8_MAJOR_VERSION-0) < 4 && (SWIG_V8_VERSION < 0x031903)
  _exports_FOptimise_class->Inherit(static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Optimise->clientdata)->class_templ);
#else
  _exports_FOptimise_class->Inherit(
    v8::Local<v8::FunctionTemplate>::New(
      v8::Isolate::GetCurrent(),
      static_cast<SWIGV8_ClientData *>(SWIGTYPE_p_Optimise->clientdata)->class_templ)
    );
#endif
  
#ifdef SWIGRUNTIME_DEBUG
  printf("Inheritance successful _exports_FOptimise _Optimise\n");
#endif
} else {
#ifdef SWIGRUNTIME_DEBUG
  printf("Unable to inherit baseclass, it didn't exist _exports_FOptimise _Optimise\n");
#endif
}


  /* class instances */
  /* Class: Base_Optimise (_exports_Base_Optimise) */
v8::Handle<v8::FunctionTemplate> _exports_Base_Optimise_class_0 = SWIGV8_CreateClassTemplate("Base_Optimise");
_exports_Base_Optimise_class_0->SetCallHandler(_wrap_new_veto_Base_Optimise);
_exports_Base_Optimise_class_0->Inherit(_exports_Base_Optimise_class);
_exports_Base_Optimise_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Base_Optimise_obj = _exports_Base_Optimise_class_0->GetFunction();
/* Class: Optimise (_exports_Optimise) */
v8::Handle<v8::FunctionTemplate> _exports_Optimise_class_0 = SWIGV8_CreateClassTemplate("Optimise");
_exports_Optimise_class_0->SetCallHandler(_wrap_new_Optimise);
_exports_Optimise_class_0->Inherit(_exports_Optimise_class);
_exports_Optimise_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Optimise_obj = _exports_Optimise_class_0->GetFunction();
/* Class: FOptimise (_exports_FOptimise) */
v8::Handle<v8::FunctionTemplate> _exports_FOptimise_class_0 = SWIGV8_CreateClassTemplate("FOptimise");
_exports_FOptimise_class_0->SetCallHandler(_wrap_new_FOptimise);
_exports_FOptimise_class_0->Inherit(_exports_FOptimise_class);
_exports_FOptimise_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_FOptimise_obj = _exports_FOptimise_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(exports_obj, "MCAR", _wrap_MCAR);
SWIGV8_AddStaticFunction(exports_obj, "FX_get", _wrap_FX_get);
SWIGV8_AddStaticFunction(exports_obj, "SimpleOpt", _wrap_SimpleOpt);
SWIGV8_AddStaticFunction(exports_obj, "testchars", _wrap_testchars);
SWIGV8_AddStaticFunction(exports_obj, "test2dlist", _wrap_test2dlist);
SWIGV8_AddStaticFunction(exports_obj, "Sym_mult", _wrap_Sym_mult);
SWIGV8_AddStaticFunction(exports_obj, "GetOrder", _wrap_GetOrder);
SWIGV8_AddStaticFunction(exports_obj, "PatternMin", _wrap_PatternMin);
SWIGV8_AddStaticFunction(exports_obj, "dumpvec", _wrap_dumpvec);
SWIGV8_AddStaticFunction(exports_obj, "dumpsvec", _wrap_dumpsvec);
SWIGV8_AddStaticFunction(exports_obj, "ReorderS", _wrap_ReorderS);
SWIGV8_AddStaticFunction(exports_obj, "ReorderSquare", _wrap_ReorderSquare);
SWIGV8_AddStaticFunction(exports_obj, "Reorder", _wrap_Reorder);
SWIGV8_AddStaticFunction(exports_obj, "Reorder_mult", _wrap_Reorder_mult);
SWIGV8_AddStaticFunction(exports_obj, "getBIMcov", _wrap_getBIMcov);
SWIGV8_AddStaticFunction(exports_obj, "procBIMcov", _wrap_procBIMcov);
SWIGV8_AddStaticFunction(exports_obj, "procBIMmod", _wrap_procBIMmod);
SWIGV8_AddStaticFunction(exports_obj, "digitise", _wrap_digitise);
SWIGV8_AddStaticFunction(exports_obj, "roundcount", _wrap_roundcount);
SWIGV8_AddStaticFunction(exports_obj, "fix_covariancem", _wrap_fix_covariancem);
SWIGV8_AddStaticFunction(exports_obj, "InvQ_d", _wrap_InvQ_d);
SWIGV8_AddStaticFunction(exports_obj, "ConstrRegress", _wrap_ConstrRegress);
SWIGV8_AddStaticFunction(exports_obj, "pickout", _wrap_pickout);
SWIGV8_AddStaticFunction(exports_obj, "pickoutstrings", _wrap_pickoutstrings);
SWIGV8_AddStaticFunction(exports_obj, "Return_Message", _wrap_Return_Message);
SWIGV8_AddStaticFunction(exports_obj, "MultiStageMessage", _wrap_MultiStageMessage);
SWIGV8_AddStaticFunction(exports_obj, "SOCPlstestMessage", _wrap_SOCPlstestMessage);
SWIGV8_AddStaticFunction(exports_obj, "eigendecomp", _wrap_eigendecomp);
SWIGV8_AddStaticFunction(exports_obj, "dldlfactNULL", _wrap_dldlfactNULL);
SWIGV8_AddStaticFunction(exports_obj, "expire_date", _wrap_expire_date);
SWIGV8_AddStaticFunction(exports_obj, "version", _wrap_version);
SWIGV8_AddStaticFunction(exports_obj, "cversion", _wrap_cversion);
SWIGV8_AddStaticFunction(exports_obj, "component_key", _wrap_component_key);
SWIGV8_AddStaticFunction(exports_obj, "days_left", _wrap_days_left);
SWIGV8_AddStaticFunction(exports_obj, "Extract_Factor_Information", _wrap_Extract_Factor_Information);
SWIGV8_AddStaticFunction(exports_obj, "CurrencyProcessFL", _wrap_CurrencyProcessFL);
SWIGV8_AddStaticFunction(exports_obj, "winsorise", _wrap_winsorise);
SWIGV8_AddStaticFunction(exports_obj, "percentile", _wrap_percentile);
SWIGV8_AddStaticFunction(exports_obj, "average", _wrap_average);
SWIGV8_AddStaticFunction(exports_obj, "stddev", _wrap_stddev);
SWIGV8_AddStaticFunction(exports_obj, "covariance1", _wrap_covariance1);
SWIGV8_AddStaticFunction(exports_obj, "mAve", _wrap_mAve);
SWIGV8_AddStaticFunction(exports_obj, "mSum", _wrap_mSum);
SWIGV8_AddStaticFunction(exports_obj, "mProd", _wrap_mProd);
SWIGV8_AddStaticFunction(exports_obj, "mCovar", _wrap_mCovar);
SWIGV8_AddStaticFunction(exports_obj, "mCorrel", _wrap_mCorrel);
SWIGV8_AddStaticFunction(exports_obj, "mVar", _wrap_mVar);
SWIGV8_AddStaticFunction(exports_obj, "mStddev", _wrap_mStddev);
SWIGV8_AddStaticFunction(exports_obj, "cAve", _wrap_cAve);
SWIGV8_AddStaticFunction(exports_obj, "cSum", _wrap_cSum);
SWIGV8_AddStaticFunction(exports_obj, "cProd", _wrap_cProd);
SWIGV8_AddStaticFunction(exports_obj, "cCovar", _wrap_cCovar);
SWIGV8_AddStaticFunction(exports_obj, "cCorrel", _wrap_cCorrel);
SWIGV8_AddStaticFunction(exports_obj, "cVar", _wrap_cVar);
SWIGV8_AddStaticFunction(exports_obj, "cStddev", _wrap_cStddev);
SWIGV8_AddStaticFunction(exports_obj, "prodArrays", _wrap_prodArrays);
SWIGV8_AddStaticFunction(exports_obj, "wAve", _wrap_wAve);
SWIGV8_AddStaticFunction(exports_obj, "wAveProd", _wrap_wAveProd);
SWIGV8_AddStaticFunction(exports_obj, "wCovar", _wrap_wCovar);
SWIGV8_AddStaticFunction(exports_obj, "ddotvec", _wrap_ddotvec);
SWIGV8_AddStaticFunction(exports_obj, "genmult", _wrap_genmult);
SWIGV8_AddStaticFunction(exports_obj, "getFSF", _wrap_getFSF);
SWIGV8_AddStaticFunction(exports_obj, "DOT", _wrap_DOT);
SWIGV8_AddStaticFunction(exports_obj, "combineS", _wrap_combineS);
SWIGV8_AddStaticFunction(exports_obj, "symm_inverse_x", _wrap_symm_inverse_x);
SWIGV8_AddStaticFunction(exports_obj, "vec2symm", _wrap_vec2symm);
SWIGV8_AddStaticFunction(exports_obj, "symmsymm", _wrap_symmsymm);
SWIGV8_AddStaticFunction(exports_obj, "Sinv_X", _wrap_Sinv_X);
SWIGV8_AddStaticFunction(exports_obj, "A1MA2", _wrap_A1MA2);
SWIGV8_AddStaticFunction(exports_obj, "square2symm", _wrap_square2symm);
SWIGV8_AddStaticFunction(exports_obj, "square2sqsymm", _wrap_square2sqsymm);
SWIGV8_AddStaticFunction(exports_obj, "gensymm", _wrap_gensymm);
SWIGV8_AddStaticFunction(exports_obj, "Sinv_M", _wrap_Sinv_M);
SWIGV8_AddStaticFunction(exports_obj, "AdotSiAX", _wrap_AdotSiAX);
SWIGV8_AddStaticFunction(exports_obj, "AdotSi", _wrap_AdotSi);
SWIGV8_AddStaticFunction(exports_obj, "SiAX", _wrap_SiAX);
SWIGV8_AddStaticFunction(exports_obj, "Sisymm", _wrap_Sisymm);
SWIGV8_AddStaticFunction(exports_obj, "OptSemi", _wrap_OptSemi);
SWIGV8_AddStaticFunction(exports_obj, "OptSemiGen", _wrap_OptSemiGen);
SWIGV8_AddStaticFunction(exports_obj, "vecvec2symmat", _wrap_vecvec2symmat);
SWIGV8_AddStaticFunction(exports_obj, "Amake", _wrap_Amake);
SWIGV8_AddStaticFunction(exports_obj, "OptFundClass", _wrap_OptFundClass);
SWIGV8_AddStaticFunction(exports_obj, "Factor2Cov", _wrap_Factor2Cov);
SWIGV8_AddStaticFunction(exports_obj, "Factor2Var", _wrap_Factor2Var);
SWIGV8_AddStaticFunction(exports_obj, "opt_fix", _wrap_opt_fix);
SWIGV8_AddStaticFunction(exports_obj, "eig_fix", _wrap_eig_fix);
SWIGV8_AddStaticFunction(exports_obj, "quad_fix", _wrap_quad_fix);
SWIGV8_AddStaticFunction(exports_obj, "basic_factor_global_local_attribution", _wrap_basic_factor_global_local_attribution);
SWIGV8_AddStaticFunction(exports_obj, "basic_factor_global_local_attribution1", _wrap_basic_factor_global_local_attribution1);
SWIGV8_AddStaticFunction(exports_obj, "xCx", _wrap_xCx);
SWIGV8_AddStaticFunction(exports_obj, "gausspdf", _wrap_gausspdf);
SWIGV8_AddStaticFunction(exports_obj, "resampfront", _wrap_resampfront);
SWIGV8_AddStaticFunction(exports_obj, "manyVars", _wrap_manyVars);
SWIGV8_AddStaticFunction(exports_obj, "ManyVarsD", _wrap_ManyVarsD);
SWIGV8_AddStaticFunction(exports_obj, "manyVarsX", _wrap_manyVarsX);
SWIGV8_AddStaticFunction(exports_obj, "dmxtmulv", _wrap_dmxtmulv);
SWIGV8_AddStaticFunction(exports_obj, "dmxmulv", _wrap_dmxmulv);
SWIGV8_AddStaticFunction(exports_obj, "dmxtmultv", _wrap_dmxtmultv);
SWIGV8_AddStaticFunction(exports_obj, "BITA_dgemv", _wrap_BITA_dgemv);
SWIGV8_AddStaticFunction(exports_obj, "SriskAttribution", _wrap_SriskAttribution);
SWIGV8_AddStaticFunction(exports_obj, "SvarianceAttribution", _wrap_SvarianceAttribution);
SWIGV8_AddStaticFunction(exports_obj, "FriskAttribution", _wrap_FriskAttribution);
SWIGV8_AddStaticFunction(exports_obj, "FvarianceAttribution", _wrap_FvarianceAttribution);
SWIGV8_AddStaticFunction(exports_obj, "FexposureAttribution", _wrap_FexposureAttribution);
SWIGV8_AddStaticFunction(exports_obj, "MCTR_Beta", _wrap_MCTR_Beta);
SWIGV8_AddStaticFunction(exports_obj, "SOCPopt1", _wrap_SOCPopt1);
SWIGV8_AddStaticFunction(exports_obj, "SOCPopt", _wrap_SOCPopt);
SWIGV8_AddStaticFunction(exports_obj, "SOCPgenopt", _wrap_SOCPgenopt);
SWIGV8_AddStaticFunction(exports_obj, "testSOCPinf", _wrap_testSOCPinf);
SWIGV8_AddStaticFunction(exports_obj, "SOCPinfeasHomogtDUMP", _wrap_SOCPinfeasHomogtDUMP);
SWIGV8_AddStaticFunction(exports_obj, "SOCPinfeasHomogt", _wrap_SOCPinfeasHomogt);
SWIGV8_AddStaticFunction(exports_obj, "RootProcessQ", _wrap_RootProcessQ);
SWIGV8_AddStaticFunction(exports_obj, "RootQ", _wrap_RootQ);
SWIGV8_AddStaticFunction(exports_obj, "RootQgram", _wrap_RootQgram);
SWIGV8_AddStaticFunction(exports_obj, "RootQold", _wrap_RootQold);
SWIGV8_AddStaticFunction(exports_obj, "fixA", _wrap_fixA);
SWIGV8_AddStaticFunction(exports_obj, "DroppingOut", _wrap_DroppingOut);
SWIGV8_AddStaticFunction(exports_obj, "SOCPlstest", _wrap_SOCPlstest);
SWIGV8_AddStaticFunction(exports_obj, "SOCPRobust", _wrap_SOCPRobust);
SWIGV8_AddStaticFunction(exports_obj, "SOCPlsRobust", _wrap_SOCPlsRobust);
SWIGV8_AddStaticFunction(exports_obj, "SOCPlsRobustl", _wrap_SOCPlsRobustl);
SWIGV8_AddStaticFunction(exports_obj, "SOCPlsRobustlC", _wrap_SOCPlsRobustlC);
SWIGV8_AddStaticFunction(exports_obj, "Projection", _wrap_Projection);
SWIGV8_AddStaticFunction(exports_obj, "CovarianceInverter", _wrap_CovarianceInverter);
SWIGV8_AddStaticFunction(exports_obj, "RankingConstraints", _wrap_RankingConstraints);
SWIGV8_AddStaticFunction(exports_obj, "SOCPRanked", _wrap_SOCPRanked);
SWIGV8_AddStaticFunction(exports_obj, "dsptrf", _wrap_dsptrf);
SWIGV8_AddStaticFunction(exports_obj, "dsptrs", _wrap_dsptrs);
SWIGV8_AddStaticFunction(exports_obj, "applyA", _wrap_applyA);
SWIGV8_AddStaticFunction(exports_obj, "applyrootA", _wrap_applyrootA);
SWIGV8_AddStaticFunction(exports_obj, "applyinverserootA", _wrap_applyinverserootA);
SWIGV8_AddStaticFunction(exports_obj, "ReorderNames", _wrap_ReorderNames);
SWIGV8_AddStaticFunction(exports_obj, "LPinterior", _wrap_LPinterior);
SWIGV8_AddStaticFunction(exports_obj, "QPopt", _wrap_QPopt);
SWIGV8_AddStaticFunction(exports_obj, "LPopt", _wrap_LPopt);
SWIGV8_AddStaticFunction(exports_obj, "QPbySeqLP", _wrap_QPbySeqLP);
SWIGV8_AddStaticFunction(exports_obj, "QPinterior", _wrap_QPinterior);
SWIGV8_AddStaticFunction(exports_obj, "facmul", _wrap_facmul);
SWIGV8_AddStaticFunction(exports_obj, "facmuli", _wrap_facmuli);
SWIGV8_AddStaticFunction(exports_obj, "FastInverseFactorModelProcess", _wrap_FastInverseFactorModelProcess);
SWIGV8_AddStaticFunction(exports_obj, "MakeUU", _wrap_MakeUU);
SWIGV8_AddStaticFunction(exports_obj, "fastInverse", _wrap_fastInverse);
SWIGV8_AddStaticFunction(exports_obj, "OmegaOpt", _wrap_OmegaOpt);
SWIGV8_AddStaticFunction(exports_obj, "FindR", _wrap_FindR);
SWIGV8_AddStaticFunction(exports_obj, "RobustOpt", _wrap_RobustOpt);
SWIGV8_AddStaticFunction(exports_obj, "RobustOptU", _wrap_RobustOptU);
SWIGV8_AddStaticFunction(exports_obj, "QuadCVals", _wrap_QuadCVals);
SWIGV8_AddStaticFunction(exports_obj, "IncreaseL", _wrap_IncreaseL);
SWIGV8_AddStaticFunction(exports_obj, "OmegaSVOpt", _wrap_OmegaSVOpt);
SWIGV8_AddStaticFunction(exports_obj, "OmegaGeneral", _wrap_OmegaGeneral);
SWIGV8_AddStaticFunction(exports_obj, "OmegaGeneralP", _wrap_OmegaGeneralP);
SWIGV8_AddStaticFunction(exports_obj, "OmegaGeneralPDump", _wrap_OmegaGeneralPDump);
SWIGV8_AddStaticFunction(exports_obj, "OmegaProps", _wrap_OmegaProps);
SWIGV8_AddStaticFunction(exports_obj, "QPbySOCP", _wrap_QPbySOCP);
SWIGV8_AddStaticFunction(exports_obj, "OmegaH", _wrap_OmegaH);
SWIGV8_AddStaticFunction(exports_obj, "clean_w", _wrap_clean_w);
SWIGV8_AddStaticFunction(exports_obj, "trace", _wrap_trace);
SWIGV8_AddStaticFunction(exports_obj, "anneal", _wrap_anneal);
SWIGV8_AddStaticFunction(exports_obj, "ThetaMulti", _wrap_ThetaMulti);
SWIGV8_AddStaticFunction(exports_obj, "Lsmooth", _wrap_Lsmooth);
SWIGV8_AddStaticFunction(exports_obj, "SemiVar", _wrap_SemiVar);
SWIGV8_AddStaticFunction(exports_obj, "GeneralLongOpt", _wrap_GeneralLongOpt);
SWIGV8_AddStaticFunction(exports_obj, "LPhelper", _wrap_LPhelper);
SWIGV8_AddStaticFunction(exports_obj, "LPgeneral", _wrap_LPgeneral);
SWIGV8_AddStaticFunction(exports_obj, "RobustOptDump", _wrap_RobustOptDump);
SWIGV8_AddStaticFunction(exports_obj, "LPFullNewton", _wrap_LPFullNewton);
SWIGV8_AddStaticFunction(exports_obj, "LPbySOCPp", _wrap_LPbySOCPp);
SWIGV8_AddStaticFunction(exports_obj, "LPbySOCP", _wrap_LPbySOCP);
SWIGV8_AddStaticFunction(exports_obj, "LPstraight", _wrap_LPstraight);
SWIGV8_AddStaticFunction(exports_obj, "GainLossOpt", _wrap_GainLossOpt);
SWIGV8_AddStaticFunction(exports_obj, "GainLossOptGen", _wrap_GainLossOptGen);
SWIGV8_AddStaticFunction(exports_obj, "GLOptimise", _wrap_GLOptimise);
SWIGV8_AddStaticFunction(exports_obj, "GLOptimiseR", _wrap_GLOptimiseR);
SWIGV8_AddStaticFunction(exports_obj, "GLOptimiseRC", _wrap_GLOptimiseRC);
SWIGV8_AddStaticFunction(exports_obj, "GLProp", _wrap_GLProp);
SWIGV8_AddStaticFunction(exports_obj, "bunchf", _wrap_bunchf);
SWIGV8_AddStaticFunction(exports_obj, "MVLOptimise", _wrap_MVLOptimise);
SWIGV8_AddStaticFunction(exports_obj, "MVLOptimiseg", _wrap_MVLOptimiseg);
SWIGV8_AddStaticFunction(exports_obj, "MVLOptimiseR", _wrap_MVLOptimiseR);
SWIGV8_AddStaticFunction(exports_obj, "MVLOptimiseRC", _wrap_MVLOptimiseRC);
SWIGV8_AddStaticFunction(exports_obj, "GLO_internal_model", _wrap_GLO_internal_model);
SWIGV8_AddStaticFunction(exports_obj, "CvarOptimise", _wrap_CvarOptimise);
SWIGV8_AddStaticFunction(exports_obj, "CvarOptimiseC", _wrap_CvarOptimiseC);
SWIGV8_AddStaticFunction(exports_obj, "SemiVariance", _wrap_SemiVariance);
SWIGV8_AddStaticFunction(exports_obj, "GradSemiVariance", _wrap_GradSemiVariance);
SWIGV8_AddStaticFunction(exports_obj, "HessSemiVariance", _wrap_HessSemiVariance);
SWIGV8_AddStaticFunction(exports_obj, "SemiVarOptimise", _wrap_SemiVarOptimise);
SWIGV8_AddStaticFunction(exports_obj, "SemiVarOptimiseT", _wrap_SemiVarOptimiseT);
SWIGV8_AddStaticFunction(exports_obj, "CVarValue", _wrap_CVarValue);
SWIGV8_AddStaticFunction(exports_obj, "CVarGrad", _wrap_CVarGrad);
SWIGV8_AddStaticFunction(exports_obj, "CVarValueO", _wrap_CVarValueO);
SWIGV8_AddStaticFunction(exports_obj, "CVarValuen", _wrap_CVarValuen);
SWIGV8_AddStaticFunction(exports_obj, "OptCVar", _wrap_OptCVar);
SWIGV8_AddStaticFunction(exports_obj, "OptGL", _wrap_OptGL);
SWIGV8_AddStaticFunction(exports_obj, "AQAmake", _wrap_AQAmake);
SWIGV8_AddStaticFunction(exports_obj, "FixedAtEnd", _wrap_FixedAtEnd);
SWIGV8_AddStaticFunction(exports_obj, "SOCPportfolio", _wrap_SOCPportfolio);
SWIGV8_AddStaticFunction(exports_obj, "getmacaddress", _wrap_getmacaddress);
SWIGV8_AddStaticFunction(exports_obj, "remtime", _wrap_remtime);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_Entropy", _wrap_Optimise_Entropy);
SWIGV8_AddStaticFunction(exports_obj, "EntropyUtility", _wrap_EntropyUtility);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_EntropyU", _wrap_Optimise_EntropyU);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseCrossEntropy", _wrap_OptimiseCrossEntropy);
SWIGV8_AddStaticFunction(exports_obj, "SDPsvec", _wrap_SDPsvec);
SWIGV8_AddStaticFunction(exports_obj, "SDPsMat", _wrap_SDPsMat);
SWIGV8_AddStaticFunction(exports_obj, "nullA", _wrap_nullA);
SWIGV8_AddStaticFunction(exports_obj, "LPQN", _wrap_LPQN);
SWIGV8_AddStaticFunction(exports_obj, "GAUSS_NEWTON_Optimiser", _wrap_GAUSS_NEWTON_Optimiser);
SWIGV8_AddStaticFunction(exports_obj, "packed2symm", _wrap_packed2symm);
SWIGV8_AddStaticFunction(exports_obj, "symm2packed", _wrap_symm2packed);
SWIGV8_AddStaticFunction(exports_obj, "Conic_General", _wrap_Conic_General);
SWIGV8_AddStaticFunction(exports_obj, "get_w", _wrap_get_w);
SWIGV8_AddStaticFunction(exports_obj, "WtransSDP", _wrap_WtransSDP);
SWIGV8_AddStaticFunction(exports_obj, "applyXSDP", _wrap_applyXSDP);
SWIGV8_AddStaticFunction(exports_obj, "applyXm1SDP", _wrap_applyXm1SDP);
SWIGV8_AddStaticFunction(exports_obj, "SDPsymm2MCAR", _wrap_SDPsymm2MCAR);
SWIGV8_AddStaticFunction(exports_obj, "factor_model_process_inverse", _wrap_factor_model_process_inverse);
SWIGV8_AddStaticFunction(exports_obj, "facmul_and_inv", _wrap_facmul_and_inv);
SWIGV8_AddStaticFunction(exports_obj, "small_round", _wrap_small_round);
SWIGV8_AddStaticFunction(exports_obj, "make_indexM", _wrap_make_indexM);
SWIGV8_AddStaticFunction(exports_obj, "pull_BITA", _wrap_pull_BITA);
SWIGV8_AddStaticFunction(exports_obj, "sns_BITA", _wrap_sns_BITA);
SWIGV8_AddStaticFunction(exports_obj, "ssf_BITA", _wrap_ssf_BITA);
SWIGV8_AddStaticFunction(exports_obj, "A2U", _wrap_A2U);
SWIGV8_AddStaticFunction(exports_obj, "UseSparseCh", _wrap_UseSparseCh);
SWIGV8_AddStaticFunction(exports_obj, "Conic_VeryGeneral", _wrap_Conic_VeryGeneral);
SWIGV8_AddStaticFunction(exports_obj, "lowrank_facmul_and_inv", _wrap_lowrank_facmul_and_inv);
SWIGV8_AddStaticFunction(exports_obj, "process_lowrank_plus_symm_inverse", _wrap_process_lowrank_plus_symm_inverse);
SWIGV8_AddStaticFunction(exports_obj, "W2trans", _wrap_W2trans);
SWIGV8_AddStaticFunction(exports_obj, "Wtrans", _wrap_Wtrans);
SWIGV8_AddStaticFunction(exports_obj, "SDPwsymm2MCAR", _wrap_SDPwsymm2MCAR);
SWIGV8_AddStaticFunction(exports_obj, "SDPvec2MCAR", _wrap_SDPvec2MCAR);
SWIGV8_AddStaticFunction(exports_obj, "RiskParityOpt", _wrap_RiskParityOpt);
SWIGV8_AddStaticFunction(exports_obj, "RiskParitySolveF", _wrap_RiskParitySolveF);
SWIGV8_AddStaticFunction(exports_obj, "RiskParitySolve", _wrap_RiskParitySolve);
SWIGV8_AddStaticFunction(exports_obj, "RiskParitySolve2", _wrap_RiskParitySolve2);
SWIGV8_AddStaticFunction(exports_obj, "SharpOpt", _wrap_SharpOpt);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseGeneral", _wrap_OptimiseGeneral);
SWIGV8_AddStaticFunction(exports_obj, "CanCastAsInteger", _wrap_CanCastAsInteger);
SWIGV8_AddStaticFunction(exports_obj, "dgetrf_BITA", _wrap_dgetrf_BITA);
SWIGV8_AddStaticFunction(exports_obj, "dgetri_BITA", _wrap_dgetri_BITA);
SWIGV8_AddStaticFunction(exports_obj, "dgetrs_BITA", _wrap_dgetrs_BITA);
SWIGV8_AddStaticFunction(exports_obj, "Accumulation5_10_40", _wrap_Accumulation5_10_40);
SWIGV8_AddStaticFunction(exports_obj, "EndRound", _wrap_EndRound);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseGeneralBarrier", _wrap_OptimiseGeneralBarrier);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseNLC", _wrap_OptimiseNLC);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseNLC1", _wrap_OptimiseNLC1);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseNLC_Seq", _wrap_OptimiseNLC_Seq);
SWIGV8_AddStaticFunction(exports_obj, "gramS", _wrap_gramS);
SWIGV8_AddStaticFunction(exports_obj, "inverseT", _wrap_inverseT);
SWIGV8_AddStaticFunction(exports_obj, "solveT", _wrap_solveT);
SWIGV8_AddStaticFunction(exports_obj, "solveTt", _wrap_solveTt);
SWIGV8_AddStaticFunction(exports_obj, "multT", _wrap_multT);
SWIGV8_AddStaticFunction(exports_obj, "multTt", _wrap_multTt);
SWIGV8_AddStaticFunction(exports_obj, "FixGram", _wrap_FixGram);
SWIGV8_AddStaticFunction(exports_obj, "Arnoldi", _wrap_Arnoldi);
SWIGV8_AddStaticFunction(exports_obj, "pattern6", _wrap_pattern6);
SWIGV8_AddStaticFunction(exports_obj, "setunitHess", _wrap_setunitHess);
SWIGV8_AddStaticFunction(exports_obj, "findzero", _wrap_findzero);
SWIGV8_AddStaticFunction(exports_obj, "parity_check", _wrap_parity_check);
SWIGV8_AddStaticFunction(exports_obj, "OptimiseNLCAL", _wrap_OptimiseNLCAL);
SWIGV8_AddStaticFunction(exports_obj, "QuasiNewton", _wrap_QuasiNewton);
SWIGV8_AddStaticFunction(exports_obj, "multistage", _wrap_multistage);
SWIGV8_AddStaticFunction(exports_obj, "BasicQpOpt", _wrap_BasicQpOpt);
SWIGV8_AddStaticFunction(exports_obj, "simplex", _wrap_simplex);
SWIGV8_AddStaticFunction(exports_obj, "factor_model_process", _wrap_factor_model_process);
SWIGV8_AddStaticFunction(exports_obj, "apt_model_process", _wrap_apt_model_process);
SWIGV8_AddStaticFunction(exports_obj, "NaiveRound", _wrap_NaiveRound);
SWIGV8_AddStaticFunction(exports_obj, "Solve1D", _wrap_Solve1D);
SWIGV8_AddStaticFunction(exports_obj, "PathMin", _wrap_PathMin);
SWIGV8_AddStaticFunction(exports_obj, "dmx_transpose", _wrap_dmx_transpose);
SWIGV8_AddStaticFunction(exports_obj, "get_nfac", _wrap_get_nfac);
SWIGV8_AddStaticFunction(exports_obj, "getdata", _wrap_getdata);
SWIGV8_AddStaticFunction(exports_obj, "get_stocknames", _wrap_get_stocknames);
SWIGV8_AddStaticFunction(exports_obj, "get_nstocks", _wrap_get_nstocks);
SWIGV8_AddStaticFunction(exports_obj, "get_factornames", _wrap_get_factornames);
SWIGV8_AddStaticFunction(exports_obj, "conj_solve", _wrap_conj_solve);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVP", _wrap_Optimise_internalCVP);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcosts", _wrap_Optimise_internalCVPAextcosts);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcostsl", _wrap_Optimise_internalCVPAextcostsl);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcostslSa", _wrap_Optimise_internalCVPAextcostslSa);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcostslSaM", _wrap_Optimise_internalCVPAextcostslSaM);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcostslSaMS", _wrap_Optimise_internalCVPAextcostslSaMS);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAextcostslSaMSoft", _wrap_Optimise_internalCVPAextcostslSaMSoft);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPA", _wrap_Optimise_internalCVPA);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAF", _wrap_Optimise_internalCVPAF);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFb", _wrap_Optimise_internalCVPAFb);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFbl", _wrap_Optimise_internalCVPAFbl);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblQ", _wrap_Optimise_internalCVPAFblQ);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSa", _wrap_Optimise_internalCVPAFblSa);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSaM", _wrap_Optimise_internalCVPAFblSaM);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSaMS", _wrap_Optimise_internalCVPAFblSaMS);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSaMSoft", _wrap_Optimise_internalCVPAFblSaMSoft);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSaMSoftQ", _wrap_Optimise_internalCVPAFblSaMSoftQ);
SWIGV8_AddStaticFunction(exports_obj, "Optimise_internalCVPAFblSaMSoftQV", _wrap_Optimise_internalCVPAFblSaMSoftQV);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPA", _wrap_FrontierCVPA);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAF", _wrap_FrontierCVPAF);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAFb", _wrap_FrontierCVPAFb);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAFbl", _wrap_FrontierCVPAFbl);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAFblQ", _wrap_FrontierCVPAFblQ);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPF", _wrap_FrontierCVPF);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAextcosts", _wrap_FrontierCVPAextcosts);
SWIGV8_AddStaticFunction(exports_obj, "FrontierCVPAextcostsl", _wrap_FrontierCVPAextcostsl);
SWIGV8_AddStaticFunction(exports_obj, "PropertiesC", _wrap_PropertiesC);
SWIGV8_AddStaticFunction(exports_obj, "PropertiesCA", _wrap_PropertiesCA);
SWIGV8_AddStaticFunction(exports_obj, "GetBeta", _wrap_GetBeta);
SWIGV8_AddStaticFunction(exports_obj, "Get_RisksC", _wrap_Get_RisksC);
SWIGV8_AddStaticFunction(exports_obj, "MarginalUtility", _wrap_MarginalUtility);
SWIGV8_AddStaticFunction(exports_obj, "MarginalUtilityb", _wrap_MarginalUtilityb);
SWIGV8_AddStaticFunction(exports_obj, "MarginalUtilitybSa", _wrap_MarginalUtilitybSa);
SWIGV8_AddStaticFunction(exports_obj, "MarginalUtilitybSaQ", _wrap_MarginalUtilitybSaQ);
SWIGV8_AddStaticFunction(exports_obj, "MarginalUtility_ext", _wrap_MarginalUtility_ext);
SWIGV8_AddStaticFunction(exports_obj, "round_weight", _wrap_round_weight);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("Base_Optimise"), _exports_Base_Optimise_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Optimise"), _exports_Optimise_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("FOptimise"), _exports_FOptimise_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(safe, safe_initialize)
#endif
